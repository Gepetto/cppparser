#line 8 "btyaccpa.ske"

/*
** @(#)btyaccpar, based on byacc 1.8 (Berkeley)
*/
#define YYBTYACC 1

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 38 "/home/dassat/github/cppparser/src/parser.y"
#include "cpptoken.h"
#include "cppast.h"
#include "cppvarinit.h"
#include "parser.tab.h"
#include "parser.l.h"
#include "cppobjfactory.h"
#include "obj-factory-helper.h"
#include "utils.h"

#include <cstdio>
#include <iostream>
#include <map>
#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

int GetKeywordId(const std::string& keyword) {
  static const std::map<std::string, int> keywordToIdMap =
  {
      {"virtual",   tknVirtual},
      {"final",     tknFinal},
      {"override",  tknOverride},
      {"const",     tknConst},
      {"noexcept",  tknNoExcept}
  };

  auto itr = keywordToIdMap.find(keyword);
  return (itr != keywordToIdMap.end()) ? itr->second : -1;
}

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gParseLog = 0;

#define ZZLOG               \
  {                         \
  if (gParseLog)                 \
    printf("ZZLOG @line#%d, parsing stream line#%d\n", __LINE__, g.mLineNo); \
}

static int gDisableYyValid = 0;

#define ZZVALID   {         \
  if (gParseLog)                 \
    printf("ZZVALID: ");    \
  ZZLOG;                    \
  if (!gDisableYyValid)     \
    YYVALID;                \
  }

#define ZZERROR             \
  do {                      \
    if (gParseLog)               \
      printf("ZZERROR: ");  \
    ZZLOG;                  \
    YYERROR;                \
  } while(0)

#define ZZVALID_DISABLE     \
  ++gDisableYyValid;

#define ZZVALID_ENABLE      \
  --gDisableYyValid;


/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/* FuncdeclHack:*/
/* Following gets parsed as variable with initialization:*/
/* Type Identifier(Type * Id);*/
/* `Type * Id` gets parsed as expression involving multiplication and so `Identifier`*/
/*  followed by expression in brackets becomes a call to constructor of `Type`.*/
/* Actually there is an ambiguity in the grammer which compilers solve by using context.*/
/* For purpose of this parser we cannot collect all required context to solve this ambiguity.*/
/* So, we use a hack:*/
/* We define a production rule for this case and flag it as error. But before flagging error*/
/* we save the position of operator '*' (or '&', or "&&") and then we check for location of*/
/* the same operator in other expression production rule before accepting that as valid expression.*/
/* For us we always want to parse it as function declaration rather than call to constructor by passing an expression,*/
/* and so the hack is expected to serve us well.*/
static const char* gParamModPos = nullptr;

/* TemplateParamHack:*/
/* Template parameter gets parsed as vardecl which then gets reduced as templateparam without name as used in forward declaration.*/
/* We don't want that, so to avoid such templateparam getting reduced as vardecl we apply some hack.*/
static const char* gTemplateParamStart = nullptr;
static bool gInTemplateSpec = false;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
using CppCompoundStack = std::stack<CppToken>;

static CppCompoundStack             gCompoundStack;
static CppAccessType                gCurAccessType;
static std::stack<CppAccessType>    gAccessTypeStack;

/** {End of Globals} */

#define YYPOSN char*

extern int yylex();

/* Yacc generated code causes warnings that need suppression.*/
/* This pragma should be at the end.*/
#if defined(__clang__) || defined(__GNUC__)
# pragma GCC diagnostic ignored "-Wwrite-strings"
#endif

#include "parser.tab.h"

#line 145 "parser.tab.c"
static int yylhs[] = {                                        -1,
    0,   51,   51,   50,   50,   50,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,  129,  127,  127,  127,
  127,  127,  127,  127,  127,   38,  130,   18,  131,   18,
  132,   18,   78,   79,   79,   79,   79,   79,   56,   56,
   73,   73,   73,   74,   74,   75,   76,   76,   76,   77,
   80,   80,   81,   66,   66,   66,  119,  119,  119,  119,
  119,  119,  120,  121,  121,  122,  122,  123,  123,  123,
  123,  123,  123,  123,  124,  124,  125,  125,  126,   60,
   16,   16,   16,   16,  133,    5,  134,    5,  135,    5,
  136,    5,  137,    5,  138,    5,  139,    5,  140,    5,
    6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,  141,
   14,  142,   15,  143,   11,  144,   10,    9,    9,   25,
   25,   25,   25,   25,   25,  128,   26,   26,   26,   26,
   22,   22,   22,   22,   22,   22,   22,   24,   23,   23,
   23,   85,   44,   46,   45,   43,   49,   49,   49,   49,
   49,   49,   48,   47,   40,   40,   31,   31,   31,   31,
   31,   39,   39,   39,   39,   39,   39,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   32,   32,   32,   33,
   33,   29,   29,   29,   29,   29,   29,   29,   29,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,    8,    8,    8,    8,    8,   20,   20,
   20,   21,   21,   21,   21,   21,   21,   21,   21,  104,
  104,  104,  103,  103,  103,  103,   98,   98,   98,   98,
   98,   98,   99,   99,   90,   91,   72,   72,   42,   42,
   86,   86,   86,   86,   86,   86,   86,   82,   83,   87,
   84,   88,   88,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   35,   13,   13,   13,   13,
   17,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   41,
   41,   41,   34,   34,   34,   34,   34,   34,   34,   34,
  146,   36,  147,   36,  148,   36,  149,   36,  150,   37,
  151,   37,  152,   37,  106,  106,  106,  106,  106,  106,
  107,  107,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  115,  115,  114,  113,  113,  113,   93,
   94,  153,   94,  154,   94,  155,   94,   94,   94,   92,
   92,   92,   92,   92,   92,   92,   92,  100,  100,  100,
  100,  101,  101,  101,  101,   96,   97,  156,   97,  157,
   97,  158,   97,   97,   97,   95,   95,   95,   95,   95,
   95,   95,   95,  145,  145,  159,  159,   54,  116,  118,
  118,  117,  117,  160,   52,  161,   52,   52,  162,   53,
  108,  108,  109,  109,  109,  109,  109,  111,  111,  111,
  111,  110,  110,   27,   27,   27,   27,   27,  102,  102,
  102,  163,   57,   58,   58,   58,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,    2,    2,    3,    3,    3,    3,    4,    4,    4,
  112,  112,  112,   55,    1,    1,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   70,   71,   71,   62,   62,
   62,   63,   63,   63,   64,   64,   68,   69,   67,   67,
   67,   65,
};
static int yylen[] = {                                         2,
    1,    0,    1,    1,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    2,    0,    4,
    0,    5,    7,    0,    5,    4,    2,    2,    3,    2,
    5,    5,    3,    5,    5,    6,    9,    9,    9,    7,
    3,    2,    6,    0,    1,    1,    4,    3,    4,    4,
    4,    4,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    2,    3,    2,    2,    3,    2,    3,    3,    1,
    1,    1,    2,    2,    0,    2,    0,    4,    0,    2,
    0,    2,    0,    2,    0,    3,    0,    2,    0,    2,
    1,    1,    1,    1,    1,    2,    1,    2,    3,    1,
    1,    1,    2,    2,    1,    2,    2,    2,    4,    0,
    5,    0,    3,    0,    2,    0,    2,    0,    1,    1,
    3,    1,    1,    1,    1,    1,    0,    2,    3,    2,
    5,    8,    6,    6,    9,    7,    8,    2,    5,    6,
    4,    3,    2,    2,    2,    2,    5,    5,    5,    5,
    2,    3,    5,    4,    2,    3,    2,    2,    2,    2,
    2,    6,    6,    8,    7,    5,    7,    5,    6,    6,
    5,    5,    4,    3,    2,    2,    2,    3,    3,    0,
    1,    2,    3,    1,    4,    3,    3,    2,    2,    3,
    2,    3,    4,    4,    3,    1,    1,    2,    1,    2,
    2,    2,    4,    1,    1,    4,    4,    5,    0,    1,
    2,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    5,    7,    2,    2,
    2,    2,    2,    2,    2,    2,    5,    7,    0,    3,
   12,   11,   10,    9,    9,    2,    2,    1,    1,    5,
    2,    4,    5,    3,    2,    3,    4,    5,    2,    2,
    2,    2,    3,    3,    2,    5,    1,    1,    2,    1,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
    2,    4,    2,    4,    2,    3,    3,    3,    4,    0,
    1,    3,    1,    3,    1,    1,    1,    2,    4,    3,
    0,    1,    0,    2,    0,    2,    0,    2,    0,    2,
    0,    4,    0,    5,    1,    1,    1,    1,    1,    1,
    0,    1,    1,    1,    1,    1,    2,    2,    2,    2,
    2,    3,    1,    0,    1,    4,    0,    1,    3,    2,
    3,    0,   10,    0,   12,    0,   13,    2,    2,    4,
    2,    2,    3,    3,    2,    2,    2,    0,    2,    2,
    3,    4,    3,    4,    3,    2,    2,    0,    8,    0,
   10,    0,   11,    2,    2,    5,    2,    2,    2,    3,
    3,    3,    2,    0,    1,    0,    1,    2,    5,    0,
    1,    1,    2,    0,   11,    0,    8,    2,    0,    6,
    0,    1,    0,    4,    5,    4,    5,    0,    1,    1,
    1,    0,    1,    3,    4,    2,    3,    2,    1,    1,
    1,    0,    5,    0,    1,    3,    2,    4,    2,    4,
    2,    4,    1,    3,    1,    3,    3,    3,    3,    3,
    3,    0,    1,    1,    4,    4,    4,    1,    2,    4,
    2,    2,    2,    2,    1,    2,    1,    1,    1,    2,
    1,    3,    4,    3,    4,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    4,    3,
    3,    4,    4,    4,    3,    4,    4,    6,    4,    4,
    7,    7,    7,    7,    3,    3,    2,    5,    6,    2,
    4,    2,    1,    2,    1,    4,    4,    5,    5,    2,
    1,    2,    2,    4,    4,    3,    1,    2,    3,    3,
    2,    1,    1,    2,    0,    1,    1,    1,    1,    1,
    1,    2,
};
static int yydefred[] = {                                      0,
  154,  156,  525,  528,    0,   57,    0,    0,    0,  131,
  134,  133,  132,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,  145,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,    0,  263,
    0,  142,  123,  310,   56,  166,    0,  260,  261,  387,
  386,  388,    0,  264,  265,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  140,    0,
  119,    0,    0,    0,  121,  129,    0,    0,    4,    0,
   10,    9,   15,    0,    0,    0,    7,   44,    0,    8,
    0,   11,    0,   12,   38,   39,   37,    0,    0,    0,
   14,   13,   31,   34,    0,    0,    0,   17,  611,    0,
   19,   20,   21,   22,   35,    0,    0,  236,   23,   32,
    0,    0,   24,   25,    0,   26,   27,    0,   28,   29,
    0,   30,    0,    0,    0,    0,    0,  462,    0,   48,
   49,   50,   51,   52,   53,   54,   55,   33,   45,   46,
  155,  157,  613,   58,    0,    0,    0,  141,    0,  262,
    0,    0,  389,    0,    0,    0,    0,  115,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  385,    0,
    0,    0,    0,    0,    0,    0,    0,  513,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  147,    0,    0,    0,    0,    0,    0,  492,    0,    0,
  146,    0,    0,    0,    0,  309,  136,    0,  524,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  347,  348,  323,    0,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  346,
    0,    0,    0,    0,    0,  334,    0,    0,    0,    0,
    0,    0,    0,  530,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  628,    0,    0,
  626,  629,    0,  630,  631,    0,    0,    0,    0,    0,
    0,    0,  216,    0,  224,    0,    0,  124,  612,    0,
  490,  491,    0,    0,  488,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  102,    0,  104,
    0,    0,    0,    0,    0,  602,  536,    0,    0,    0,
    0,    0,  526,    0,    0,    0,  199,    0,    0,    0,
    0,    0,    0,    0,    0,  519,    0,    0,    0,  125,
    0,    0,    0,    0,    0,  255,  253,  254,  252,    0,
  231,    0,    0,  120,    0,    0,   47,  116,    0,    0,
  122,  130,  113,  114,    0,   41,  128,  178,    0,    0,
    0,    0,    0,    0,    0,  222,  295,    0,    0,    0,
  197,    0,    0,  215,  198,    0,  195,  183,  184,    5,
    0,    0,    0,    6,  458,    0,    0,    0,    0,    0,
    0,  486,    0,  191,    0,    0,    0,  419,    0,  444,
    0,    0,   70,  610,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  544,  546,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  632,
    0,    0,    0,    0,    0,   82,  291,  403,    0,  393,
  394,  395,  396,    0,    0,    0,  275,  276,  305,    0,
  410,  426,    0,    0,  425,    0,  436,  437,    0,  453,
  273,  270,  274,    0,    0,    0,    0,    0,    0,    0,
    0,  201,  200,    0,    0,    0,    0,    0,  418,    0,
  445,    0,    0,    0,    0,  463,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  242,  245,    0,    0,
  182,    0,    0,    0,    0,  192,    0,    0,    0,    0,
    0,  167,    0,    0,    0,    0,    0,    0,  148,    0,
    0,    0,  232,    0,  235,  469,    0,    0,  153,    0,
    0,    0,    0,    0,    0,   81,    0,    0,    0,  358,
  311,  349,  350,    0,    0,    0,    0,  489,    0,  468,
    0,    0,    0,    0,    0,  624,    0,    0,    0,    0,
  595,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  617,    0,    0,    0,  596,    0,    0,
    0,  487,    0,  109,    0,    0,    0,   93,   94,   95,
   96,   97,   98,   99,  101,  100,  103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   69,    0,  532,    0,  534,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  357,
  126,    0,    0,  375,  379,    0,    0,  372,    0,    0,
  363,  361,    0,    0,    0,    0,    0,    0,    0,  259,
  257,  258,  256,  251,    0,  412,    0,    0,    0,   59,
    0,    0,    0,    0,  296,    0,  223,  294,    0,  214,
    0,    0,  226,    0,    0,    0,    0,  521,  522,  523,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  580,  581,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  585,    0,    0,    0,  578,    0,
    0,   73,    0,  397,    0,  398,  399,  400,  401,    0,
  303,  304,  423,  424,    0,  429,  430,    0,  411,    0,
  451,  452,    0,    0,  484,    0,    0,  196,    0,    0,
    0,    0,  230,  520,    0,    0,    0,    0,    0,  194,
    0,    0,    0,    0,    0,  181,    0,  167,    0,  167,
    0,    0,  356,    0,    0,    0,  233,  234,    0,    0,
    0,    0,    0,    0,  495,    0,  149,    0,    0,    0,
    0,    0,    0,    0,  606,  607,  352,  354,    0,  455,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  614,  615,    0,  618,    0,    0,    0,
    0,   90,   91,   89,   92,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  533,  535,
    0,  516,  517,  515,    0,  118,    0,    0,  374,  376,
  380,  150,    0,  378,    0,    0,    0,  420,  368,  589,
    0,  438,    0,    0,  359,  587,   60,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  213,  218,
  225,  219,    0,    0,  583,  586,  584,  579,  582,    0,
    0,  402,    0,    0,    0,    0,  431,  485,    0,  479,
  480,  481,  483,    0,    0,    0,  457,    0,    0,    0,
    0,  159,  167,  187,    0,  190,  188,  189,    0,  167,
    0,    0,    0,    0,    0,  171,    0,    0,  168,  162,
  163,  165,  179,    0,    0,    0,  193,    0,    0,    0,
    0,    0,    0,  493,    0,    0,    0,    0,    0,    0,
    0,  608,  609,  267,  446,  459,    0,    0,    0,  277,
    0,   72,   71,    0,    0,    0,    0,   75,   74,    0,
    0,    0,    0,  414,    0,  151,  381,    0,    0,  370,
    0,  362,    0,    0,    0,   62,    0,    0,  247,  246,
    0,    0,  212,    0,    0,  208,  211,    0,  221,    0,
    0,    0,    0,    0,  406,  433,    0,  435,    0,  472,
    0,    0,    0,    0,    0,  466,    0,    0,    0,    0,
    0,    0,    0,    0,  180,  173,  167,  174,  169,    0,
    0,  470,    0,  511,  510,    0,  509,  508,  507,    0,
    0,  496,    0,    0,    0,    0,    0,    0,  280,    0,
    0,    0,    0,    0,   76,    0,    0,    0,  440,    0,
    0,  382,  383,  369,    0,    0,    0,  416,  248,    0,
    0,    0,  209,  210,    0,  588,    0,    0,  432,  434,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  203,  202,    0,    0,  167,  176,    0,    0,    0,    0,
    0,  591,  592,  593,  594,  278,   80,    0,    0,    0,
    0,    0,    0,   63,    0,  268,    0,    0,  306,  384,
    0,    0,  442,    0,    0,    0,    0,    0,   83,    0,
    0,    0,    0,    0,    0,    0,    0,  177,  290,    0,
  172,    0,    0,    0,    0,    0,    0,    0,  439,  405,
    0,    0,    0,    0,    0,    0,  464,  467,    0,    0,
  204,  175,   78,   79,   77,    0,    0,    0,    0,    0,
    0,    0,  285,  284,    0,    0,    0,    0,    0,  441,
    0,  413,    0,    0,    0,    0,    0,    0,    0,  443,
    0,  282,  465,    0,  415,    0,    0,  417,
};
static int yydgoto[] = {                                      74,
   75,  724,  174,  175,  239,   79,  208,  416,  200,   81,
  178,   83,   84,   85,   86,   87,  493,  179,   89,  391,
  392,  180,   91,   92,  989,  831,   93,   94,   95,   96,
   97,  424, 1060,  702,  694,  695,  696,   98,   99,  100,
  703,  879,  101,  102,  103,  104,  105,  106,  107,  108,
  359,  184,  111,  112,  113,  114,  288,  844,  845,  116,
  117,  305,  311,  312,  118,  666,  313,  314,  315,  634,
  635,  119,  120,  121,  122,  123,  124,  125, 1117,  126,
  496,  325,  128,  129,  130,  289,  824,  417,  132,  133,
  134,  135,  136,  137,  138,  139,  140,  141,  142,  514,
  796,  187,  290,  189,  504,  291,  147, 1071,  807,  964,
  965,  434,  954,  515, 1211,  148,  149,  527,  150,  151,
  152,  153,  154,  155,  156,  157,  158,  159,  160,  164,
  927, 1046,  398,  906,  394,  401,  328,  691,  407,  402,
 1036,  589,  161,  162,  861,  698,  909,  910,  914,  911,
 1122, 1180,  923, 1120, 1184, 1043, 1177, 1212,  968, 1236,
 1146,  839,  588,
};
static int yysindex[] = {                                  23534,
    0,    0,    0,    0,    0,    0,    0,    0, 2083,    0,
    0,    0,    0, 1026,    0,    0,    0,    0, -202, 3255,
 1193,   50,    0,    0, 2714,    0,  849,    0, -215, -173,
 -143,  -46,  849,  681,  170,23964,22913,22913,  343,22913,
22913,22913,22913,22913,17807, 3803,    0,23096,23185,    0,
    0,    0,    0,    0,    0,    0, -202,    0,    0,    0,
    0,    0,    0,    0,    0, 4198,  328,  449,  571,23534,
  578,  681,23534,    0,    0,28386,  620,  590,    0,  141,
    0,  672,    0,  682,    0,    0,    0,    0,    0,   66,
    0,    0,    0, 4028, 2507,  701,    0,    0,   90,    0,
  721,    0,  822,    0,    0,    0,    0,23724, 1314,   68,
    0,    0,    0,    0,28296,    0,26234,    0,    0,    0,
    0,    0,    0,    0,    0,  557,    0,    0,    0,    0,
  632, 1387,    0,    0,  101,    0,    0, 1641,    0,    0,
  461,    0, 5489,11404,    0,  -25,11404,    0, 4684,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  661,  658, 1291,    0, 2090,    0,
  891,    0,    0,28658,    0,    0,   24,    0,    0,   24,
  745,  606,  893,   24,28658,    0,  738,28658,    0,    0,
 2090, 2090,  502,  965,  738, 7290, -202,    0,    0,  925,
 1018, 2090,  791, 2807,24330, 8609,    0,    0, 1077,  805,
    0, 2090,  115, 2090,  115, 1027, 1075,    0, 1346,    0,
    0,    0,22913, 1123,    0,    0,    0,23534,    0,  849,
28658,28658,28658,28658,  557,22913,19230,19359,    0, 3731,
 1137,18274, -202, 1291,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1149,  865,    0,    0, 7778,    0,  172, 2160,  632,28658,
28658,   67,   67,    0,   67,   67,    0,   67,    0,   67,
   67,19855,   82,    0,    0, 1194,22913,    0,19230,12469,
    0,    0, 1165,    0,    0,17807,  936,   67,19230,   67,
28688, 1810,    0,28688,    0,    0,28688,    0,    0,    0,
    0,    0, 5913,  341,    0, 2167, 5489, 1061,    0,    0,
 -202, -202,  -96,  333, 1066, -202, -131,    0, 1086,    0,
18541, 1894,18541, 1011,22913,    0,    0,    0,  957,26234,
    0,  125,    0,28658, -202,  958,    0,24603,    0,    0,
    0,    0,    0,    0,28477,    0, 1357,    0, 3445,    0,
18274,14641,19974, 7290,    0,    0,    0,    0,    0,  148,
    0, 1059,  936,    0,  -85,18274,    0,    0,18274,19974,
    0,    0,    0,    0,20222,    0,    0,    0,  135,    0,
   49, 8609,    0, 3360,  958,    0,    0,22913,19478,20351,
    0,22913,19974,    0,    0,  141,    0,    0,    0,    0,
 1338, 1359, 1370,    0,    0,  135, 2090,    0,28477,  958,
    0,    0,    0,    0,    0,    0,    0,    0, 3012,    0,
    0,28477,    0,    0,22913,22913,22913,22913,22913,22913,
22913,22913,22913,22913,22913,22913,22913,22913,22913,22913,
22913,22913,    0,    0,13402, 8609,22913,20470,22913,22913,
22913,22913,22913,22913,22913,22913,22913,19974,20599,    0,
 2663,22913,22913,23534, 1402,    0,    0,    0, 1221,    0,
    0,    0,    0,    0, 1443, -179,    0,    0,    0,  488,
    0,    0, 2561,  846,    0,  736,    0,    0,    0,    0,
    0,    0,    0, 1374,  375, 1374, 1413,    0,11404,    0,
    0,    0,    0,  214, 9832,28477,    0,    0,    0,    0,
    0,    0, 2518, 1455,   24,    0,  545,  738,  738, -202,
    0,    0,22913,  174,    0, 2090,    0,    0,  482, 1346,
    0, 1374,    0,  271,  673,    0,28658, -202, 1046,  471,
   38,    0, 7290, 1410,    0, 1192, 2807, 7290,    0,14641,
28658,  115,    0,  115,    0,    0, 2090,28778,    0,26269,
22913,   25,  179,  190,  217,    0,18274,  168,26328,    0,
    0,    0,    0, 1419, 1428,    0, -107,    0, 1201,    0,
    0, 1199,    0,    0,    0,    0,  738,22913,22913,22913,
    0,12469,    0, 1258, 1258,23285,22913,22913,22913,17807,
19230, 1490,26474,    0,  -20, 1512,26566,    0,22913,13489,
28688,    0, 2090,    0,    0,    0, 1285,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1524,26621,19855,
 1877, 1515,  729,26566, 1536, 1516, 1564,26679, 1570,26713,
    0,20718,    0, 1494,    0, 1583, 3523,24603,    0,24603,
24603,    0,    0, 1591,  574, 1612,23964,    0,    0,    0,
    0,13082,  174,    0,    0,    9,28225,    0,  997, 1810,
    0,    0, 1147,14641,  632, 1529,    0,    0,10586,    0,
    0,    0,    0,    0, -202,    0,   45,   74, 1614,    0,
26771,  608, -202,   -2,    0, 1381,    0,    0,27837,    0,
  588, 1629,    0,26859, 8460, 1552, -202,    0,    0,    0,
 3523, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,  530,
 3731, 3731, 2544, 2544, 1561, 1561, 1637, 2454, 2057, 8609,
    0,    0, 1561,    0,  497,  497,  283,  283,  283, 1757,
 2980, 2787, 3731, 1640,    0,26918, 8609, 8609,    0,27009,
    0,    0,28658,    0, 1429,    0,    0,    0,    0, 2090,
    0,    0,    0,    0,  401,    0,    0, 2090,    0,    0,
    0,    0,  697, 2090,    0,    0,  647,    0,  738, 8609,
  141,  141,    0,    0, -202, 1568, 1645,27064,    0,    0,
  531,   24,    0, 1639,   78,    0, 7290,    0, 7290,    0,
  266,  473,    0,28658, 1154,  174,    0,    0,23534,  703,
  791, 1193,  501,   86,    0, 1644,    0,27098, 1674, 1679,
 1680, 1686,  224,27156,    0,    0,    0,    0,  738,    0,
 1690, 1695,   67, 3731, 3731, 1632,    0,   67,   67,   67,
    0,12469,22913,    0,    0, 1490,    0,14641,  986,22913,
   67,    0,    0,    0,    0,    0,23534,23534,26566,    0,
22913,19974,19974,19974,23534,23534,22913, 1619,    0,    0,
28658,    0,    0,    0,  412,    0,  -35, 1720,    0,    0,
    0,    0,17807,    0,22913,20847,14641,    0,    0,    0,
  135,    0, 1722, 1486,    0,    0,    0,    0, -202, -202,
 1731, 1739, -202, 1439,   26, -202,  799, -202,    0,    0,
    0,    0, 1279,    0,    0,    0,    0,    0,    0,22913,
   52,    0, 1346, 1335,19607,19726,    0,    0, 1150,    0,
    0,    0,    0, 1377, 1444,    0,    0, 1661,  236, -202,
 -202,    0,    0,    0, 1753,    0,    0,    0, 7290,    0,
  754,  472,  543,  577,    0,    0, 1751, 1789,    0,    0,
    0,    0,    0,  174, 1575, 1560,    0, 1780,    0, 1782,
    0,22913, 1798,    0,28778,22913,22913,22913,22913,22913,
22913,    0,    0,    0,    0,    0,27837, 1345,28658,    0,
   67,    0,    0, 8051, 1755, 1805, 1816,    0,    0,27214,
    0, -107, -202,    0,14641,    0,    0,18274,27837,    0,
27303,    0, 1836,14641,    2,    0, 1844, 1851,    0,    0,
 1853,  441,    0, -202, -202,    0,    0,19974,    0, 1840,
 1878, 3731, 1883, 2090,    0,    0, 1907,    0, 1835,    0,
 1413, 7290, 7290, 1377, 1444,    0, -202, 1497, 2588, 1279,
  587,14641,  946,  625,    0,    0,    0,    0,    0,22913,
 2184,    0,28658,    0,    0,28658,    0,    0,    0,28225,
22913,    0,28225,   67,27394,27452,27510,27544,    0,   -6,
23534,19974,19974,19974,    0,    0,  943, 1930,    0, 1942,
 1365,    0,    0,    0, 1950, 1367, -202,    0,    0, 1956,
 1971, -202,    0,    0,22913,    0,  849, 1346,    0,    0,
  647,  406,  406, 7290, 7290,23534, 1977,  512,22913,22913,
    0,    0, -202, 1396,    0,    0,  759,27837,  174,  174,
28225,    0,    0,    0,    0,    0,    0, 1982, 1987, 1989,
    0,22913, 1976,    0,    0,    0, 2000,14641,    0,    0,
  849, 1748,    0, 2001,14641,14641, 2017,27837,    0, 1938,
  406,  406, 1758, 2028, -202,27599,27837,    0,    0, 1013,
    0,23534,23534,23534,27690,23724, 2022, 1431,    0,    0,
 2014, 2038,14641, 1472, 1495, 2041,    0,    0,14641, 2045,
    0,    0,    0,    0,    0,23724, 1314,  849, 1748,  846,
 2050, 1503,    0,    0,14641,23534, 1526, 2061, 1314,    0,
 2014,    0,  849, 1748, 1666, 1873,    0,14641,  846,    0,
 2014,    0,    0, 1711,    0,  846,    0,    0,
};
static int yyrindex[] = {                                     54,
    0,    0,    0,    0, 9207,    0,15926,    0,    0,    0,
    0,    0,    0, 1991,  772, 3652, 4231,17043, 1991,    0,
    0,    0,    0,    0,    0,11152,28567,    0,    0,    0,
    0,    0,    0,24034,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2025,    0,    0,    0,    0,
   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4404,    0,    0,    0,    0,    0,    0,    0,
    0, 4679, 1643,    0, 9516,    0,24749,24792,    0,   22,
    0,24499, 9616,    0,    0,    0, 4774, 7138,    0,13897,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  142, 2120,14305,
    0,    0,    0,    0,    0, 6684,    0,    0,    0, 6228,
    0,    0,    0,    0,    0, 5199, 2691,    0,    0,    0,
10141,    0,    0,    0, 1020,    0,    0,    0,    0,    0,
    0,    0, 1153,    0,  127,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,17907, 7880, 1324,    0, 4129,25284,
    0, 2051, 2072,25368,    0,  859,  709,    0,    0,    0,
    0,    0,    0,  728,    0,    0,    0,    0, 7980,    0,
16718,    0,    0,    0,    0,    0,11561,11252,    0,    0,
    0,    0,25696,    0,25696,    0, 2029,    0,    0, 8289,
    0, 8389,    0,    0, 7471,    0,    0, 2023,    0,    0,
    0,    0,    0,    0,    0,    0, 2025,    0,  -92,20965,
    0,    0,    0, 1991,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 9925,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10025,10334, 1808,    0,    0,    0,16618,    0,
    0,12768,12868,    0,13176,13276,10434,13584,26029,13684,
13992,    0,    0,23374,10743,    0, 2052,    0, 2025, 2053,
    0,    0,    0,    0,    0,    0,12369,14092,    0,14400,
    0,    0,    0,    0,    0, 1142,    0,    0,    0, 7699,
    0,    0,    0,    0,    0,    0,    0,    0, 5316, 5663,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2099,    0,    0,    0,    0,    0, 5962,    0, 2037,
    0,    0,    0,    0,    0,12674,    0,    0,    0, 1351,
 1685, 1476, 1638,  127,    0,    0,    0, 6575,    0,    0,
   99, 1787, 2043,    0,24950,    0,    0,    0,    0,    0,
    0,10843,11661,    0,    0,   99,    0,    0,   99, 2134,
    0,    0,    0,    0,    0,    0,    0,    0,25448, 6401,
 2634,    0, 2538,    0, 2735,    0,    0,    0,    0,    0,
    0,    0, 2043,    0,    0, 1920,    0,    0,    0,    0,
    0,    0,    0,    0,    0,25532,    0,   12,    0,12674,
 6846,    0, 2678,    0, 2516, 1902, 2149,    0,    0,    0,
 2056,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,25864,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1598,    0,
    0,    0,    0,    0,    0,  737, 1090,    0,    0, 1936,
    0,    0,    0,    0,    0,    0, 2107, 2152,    0, 2157,
    0, 2110,    0,    0,25696,    0,    0,  494, 1962, 1991,
24871, 7471,    0,    0, 3283,    0,    0,    0,    0, 2921,
    0, 2906, 2717,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11970,    0,    0,    0,    0, 1787,
    0,25696,    0,25696,    0,    0,    0,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   91,  -16,    0,    0,    0,
25779, 2187, 6351,16255,    0,    0, 2634,    0,    0,    0,
    0,    0,16031, 4840,23652,    0,    0,    0,    0, 2134,
    0,26118,    0,    0,    0, 1204,    0,    0,    0,    0,
    0,    0,    0,    0, 5772, 6119, 7031,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  731,  809,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1898,    0,
    0, 2207, 2126,    0,    0,    0,    0, 8698,24404,    0,
    0,  150,  173,    0,    0,    0, 2190,    0, 1795, 1812,
    0,    0,    0,    0, 1774,    0,25119, 7571,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1467,    0,
 2218,    0,    0,    0, 2212,    0,    0,    0,    0,    0,
    0,21094,21196,21325,21427,21556,21658,21787,21889,16513,
22018,22120,17607,17707,16911,17209,16811,18734,18863,    0,
    0,    0,17309,22249,16115,16413,15316,15624,15724,18174,
18074,18632,22351,    0,    0,    0,    0,    0,    0,    0,
22480,    0,    0,    0,    0,    0,    0,    0,    0, 1872,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2124,    0, 2634,    0,
 1920, 1920,    0,    0, 1991,    0,    0,    0, 8698,    0,
    0,  264,  332,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1993,    0,    0, 2023,    0,
 1378,   42,  181,    0,    0,  210,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,14500,22582,22711,    0,23864, 2430, 2948, 3613,
    0,    0,    0,    0,    0,    0,    0, 1787,    0,    0,
14808,    0,    0,    0,    0,    0,    0,    0,    0,  895,
    0, 2099, 2099, 2099,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   99,    0,    0,    0,    0,    0,    0,    0,
25616,    0,    0,    0,    0,    0,    0,    0,    0, 2216,
    0,    0, 2216,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1158,12070,    0,    0,    0,    0,    0,    0,
 2216,    0, 1884,    0,    0,    0,    0,    0, 1957,    0,
    0,    0,    0, 8926, 9018,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  596,    0, 1055, 1064,    0,    0,
    0,    0,    0, 2026, 1471,    0,    0,  225, 1531,  228,
 4940,    0,  255,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
14908,    0,    0,  511,    0,    0,    0,    0,    0,    0,
  529,  -16,    0,    0, 1787,    0,    0,   99, 1908,    0,
    0,    0,    0, 1787,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1156,
    0,22813,    0,    0,    0,    0,    0,    0,    0,    0,
 1090,    0,    0, 8926, 9018,    0, 2216,    0, 1187, 1187,
    0, 1787,    0,    0,    0,    0,    0,    0,    0,    0,
 1538,    0,    0,    0,    0,    0,    0,    0,    0, 2223,
    0,    0, 2228,15216,    0,    0,    0,    0,    0,    0,
    0, 2235, 2235, 2235,    0,  529,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2216,    0,    0,    0,    0,    0, 1943,    0,    0,
 2124, 1297, 1309,    0,    0, 2023,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1125,  257,  259,
 2239,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2135,    0,    0,    0,  569,    0,    0, 1787,    0,    0,
    0, 2049,    0,    0, 1787, 1787,    0, 1213,    0,    0,
 1622, 1710,    0,    0, 2216,    0, 1254,    0,    0,    0,
    0,    0,    0,    0,    0, 1036,    0,    0,    0,    0,
 1020,    0, 1787,    0,    0,    0,    0,    0, 1787,    0,
    0,    0,    0,    0,    0, 1036,  952,    0, 2049,    0,
    0,    0,    0,    0, 1787, 2023,    0,    0, 1218,    0,
 1020,    0,    0, 2049,    0,    0, 5244, 1787,    0,    0,
 1020,    0,    0,    0,    0,    0, 7103,    0,
};
static int yycindex[] = {                                  28812,
    0,    0,    0,    0, 2005,    0, 2245,28902,    0,    0,
    0,    0,    0, 2044, 8200, 2712, 2747, 2991,    0,    0,
    0,    0,    0,    0,    0, 2217,    0,    0,    0,    0,
    0,    0,    0, 5577,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
28932,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5945,    0,    0,    0,    0,    0,    0,29022,
    0, 2020,28139,    0, 2073,    0, 1047,  987,    0, 1855,
    0,  381, 2006,    0,    0,    0, 1209,25198,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,15049,    0,    0,
    0,    0,    0,    0,    0,  999,    0,    0,    0, 1964,
    0,    0,    0,    0,    0,    0, 2275,    0,    0,    0,
  -11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1283,    0,29056,29146,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  698,    0,    0,    0,
    0,29176,    0,    0,  207, 1656, 6988,    0, 2310,    0,
    0,    0,    0,    0,    0, 2302, 2271,    0,    0,29266,
    0,    0,    0,    0, 2111,    0,    0,    0, 1738,    0,
    0,    0,    0,    0,    0,    0, 1769,  811,    0,    0,
    0,    0, 1968,    0, 2244,    0,    0,    0,    0, 1846,
    0, 1899,    0,    0, 2086,    0,    0,29300,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8798, 1404,
    0,    0,    0, 2128,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2058,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2300, 2306,  421,    0,    0,    0,  414,    0,
    0, 1584, 1631,    0, 1646, 1684, 2358, 1719, 2361, 1743,
 1814,    0,    0,27749, 2359,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1184, 1918, 2312, 1999,
    0,    0,    0,    0,    0,   11,    0,    0,    0, 2115,
    0,    0,    0,    0,    0,    0, 3014,    0, 2159, 2166,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,29390,    0,    0,    0,    0,    0,20103,    0, 2367,
  787,    0,    0,    0,    0,  580,    0,    0, 6945,   59,
  233,  716, 2095,29420,    0,    0,    0, 2391,    0,    0,
    0,    0,    0,    0,  872,    0,    0,    0,    0,    0,
    0,  138,  862,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  611,
 2396,    0, 2399,    0,  627,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,29510,    0,  635,
  393,    0,  873,    0,12277,  155,  -12,    0,    0,    0,
 2118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,29544,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  216,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  327,    0,
    0,    0,    0, 3278,    0,    0,    0,29634,    0, 1261,
 2562,    0,    0,    0,    0,    0,  201,  429,    0, 5071,
    0, 2125,    0,    0, 2400,    0,    0,    0,    0,    0,
 2341, 2170,    0,    0, 3094,    0,    0,    0,    0,    0,
    0,    0, 1044,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  615,    0,    0,    0,    0,    0,
    0, 2422,    0, 2503,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2427, 2420,    0,    0,    0,
  451,    0,18982,19111, 9107,    0, 2428,    0,    0,    0,
    0, 2383,  664, 6489, 7382,    0,    0,    0,    0,    0,
 2384,    0,    0,    0,    0,    0, 2437,    0,    0,    0,
    0,    0,    0,    0, 2220, 2231, 2549,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  253,    0,
    0,  305, 1028,    0,    0,    0,    0, 2012, 2209,    0,
    0,  524,    0,    0,    0,    0, 2175,    0,    0,    0,
    0,    0,    0,    0,   44,    0, 2030, 2203,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  592,    0,    0,    0,    0,    0,
    0, 2104, 2221, 2309, 2331, 2339, 2417, 2579, 2585, 2706,
 2803, 2861, 2872, 2875, 3088, 3129, 3138, 3199, 3225,    0,
    0,    0, 3247,27895, 3345, 3352, 3418, 3434, 3643, 3646,
 3665, 3836, 3861,    0,    0,    0,    0,    0,    0,    0,
27929,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2814,
    0,    0,    0,    0,    0, 5159,    0,    0, 2464,    0,
    0,    0,    0,    0,    0,    0, 2389,    0, 2042,    0,
 2473, 2455, 2462,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,29664,    0,
  908,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3905, 3916, 3964,    0,26161,27987,28045,28134,
 2481, 2432,    0,    0,    0,    0,    0,    0,    0,    0,
 4051,    0,    0,    0,    0,    0,29754,29788,    0, 2483,
    0,    0,    0,    0,29878,29908,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  231,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6079,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2186,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2471,    0,    0,    0,  160,    0,
  183,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4239,    0,    0, 1115,    0,    0,    0,    0,    0,    0,
 1306, 2491,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4532,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2475,    0,    0,    0,    0,    0,    0,    0,    0, 2213,
    0,    0, 2214, 4547,    0,    0,    0,    0,    0,    0,
29998,    0,    0,    0,    0, 1358,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,30032,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1453,    0,    0,    0, 1364,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,30122,30152,30242,    0,15457,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,17115,    0,    0,    0,    0,
    0,    0,    0,    0,    0,30276,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4312,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5466,    0,
};
static int yygindex[] = {                                      0,
  636,   53, 2943,  223,    1, 2529,  800, -307,  -17,    0,
 2608,   14,    5,   95,    0, 3372,  -31,  409,  -10,  -74,
  -87,  853,    0,    0, 1576, -792,  739, 2219,   43, 1425,
  -69,   61,  129, -567,    0, -789,  671,    0,   10,    0,
 -580,    0,    0,    0,    0,    0,    0,    0, 2448,    0,
   27, 1348,    0,    0,    0,  982, 1210,    0, 1559, 3436,
 4299,   46,  -14,  864,    0, 1307,    0,    0,    0, 1932,
    0,    0,    0,    0,    0,    0,    0,    0, 1457,    0,
 2334,  663, 2013,    0,    0, 1269,    0,   -4,    6,    0,
    0,  -68,    0, -103,  -15,    0, -101,  -32,    0,  -79,
 1784,  565, 1642,  619, -134, 3067,    0,    0, 1514, -767,
  -13,    0,    0,  -90,  122, -125, -108, -422,    0,    0,
    0,    0,    0,    0,    0,    0, -818, -485,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -606,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1447,    0,
    0,    0,    0,
};
#define YYTABLESIZE 30622
static int yytable[] = {                                     835,
   78,  216,  409,  519,  286,  862,  367,  371,  176,  193,
  210,  448,  991,  450,  199,  207,  213,  183,  215,  209,
  219,  222,  436,  546,  454,  225,  109,  797,  792,  792,
  306, 1916,  792,  617,  526,  982,  176,  984,  226,  933,
  715,  509,  539,  373,  541, 1929,  447,  520, 1923,  796,
  182,  176,  913,    2,    1,  297,  326,  356,  362,  354,
  372,  388,  249,  176,  617,  387,  197,  929,  212,  214,
   78, 1518,  875,   78,  532,  533,  366,  538,  526,  792,
  176,  370,  451,  792, 2364,  158,  723, 2364,  913,  223,
 1033,  617,  409,  322,  415,  829,  436,  430,  209,  449,
  365,  804,  158,  388,  796,  388,  727,  387,   78,  387,
 1916,  231,  491,  542,  220,  440,  228,  913,  361, 1718,
  446,  617,  618, 1037,  408,    1,  435, 1127,  253, 1005,
  540,  655,  253,  426,  792,  979,  919,  390,  583,  804,
  585,    3,  371,  176,  176,  176,  440,  176,  427,  176,
  791,  537,  388,  232,  534,    7,  387,  443,  513,  511,
  830,  510,  649,  991,  494,  991,  991,  199,  674,  552,
  137,    1,  712,  286,  176, 1868,  711,  176,  388, 1865,
 1081,  560,  387,  233,  792,  176,  531, 1084,  176,  543,
  176,  565,  219,  249,  650,  524,  176, 1073, 1074,  616,
  980,  576,  199, 3456,  225,  176,  207,  617,  855,  242,
  209,  607,  582,  617,  584, 1914,  373,  226,  617,  550,
 2086,    1,   77,  362,  505,  860, 3468,  443,   78,  617,
  563,  176,  176,  176,  176,  509,    1,  519,  137,  562,
  512,  512,  638, 3464,  199,  512, 1065,  568, 1123,  675,
  790,  727,  385,  503,    1,    2,  617,  426,    1,    6,
  512, 2036,  991,  617, 1012,  991,    3, 1916,  499, 1916,
 3428,  497,  808,   23,  192,   24, 1935, 1077,  364,  509,
  234,  520,    1,  361,  249,  176,  220,  616,  557, 1920,
  176,  176,   77, 1724, 1157,   77,  197, 1018,  501,  679,
  500,  306,  498,  237,  533,  790,  682, 1145,    1,  985,
  809,    7, 1515, 1923,  519,  390,  792,  512,  714,  557,
  297,  176,  800,  803,  176,  249,  370,  176,  491,  446,
   77,   53,  537,  176, 1926,  451,  912,  176,  991,    2,
    2,    2,  542,  616,  386,  992,  557,  615,  539, 1042,
  541,  737,  849,  249,  389,  509,  249,  436,  520,  683,
 1715,  663, 1200,  616,  176, 2045,  443,  351,  366,  158,
  371,  236,  924,  446,  176,  366,  557,  800,  803,  688,
  537,  991,  176,  538,  707,  253,  386, 1950,  386,  643,
  986,  475,  690,  322,  661,  322,  389,  665,  389,  642,
  546,  925,  505,  615,  732,  519,  373,  725,   88,  728,
  443,  253,  207, 1004,  415,  526,  209,  356,  209,  542,
   23,  253,   24,  372,  700, 1118,  371,    3,    3,    3,
  385,  709,  448,  805,  450,  386,  540,  193,  176,  366,
  955,  381,  579,  326,  370,  389,  509,  512,  494,  520,
   77, 1032,  440,  526, 1121,  710, 1911,  537, 1862,  367,
 1175,  386,  557, 1126,  241,  713,  557,  447,  557,  666,
  813,  389, 2038,  557, 1179,  207,  207,  249,   88,  761,
  762,   88, 1132,  782,  557,  378, 2051, 3452,  352, 2045,
 2108,  207,    1,    2,   78,  779,  992,    6,  992,  992,
  373, 1154, 2033,  451,    3,    3,  850,  837,  505,  838,
 3460,  557,  192,  795, 1104,  985,   88,  851,  557,  521,
  449,  726,    1,  956,  803, 1071,  237,    6,  176,  176,
  560,  993,  816,  483, 1721,  207,  440,  503,  481,  209,
  617,  446,  491,  482,  852,   23, 1938,   24,  519, 1941,
 1944, 2038,  499, 1195, 1920,  497,  819, 1074,  237,  560,
  566, 1002, 1947, 2357,  143,  557,  483,  176,  227,   53,
  322,  481,  479,  176,  480,  491,  482,  688,  176, 1727,
  176,  176,  501,  228,  500,  814,  498,  840,  176,  974,
  690,  651,  520,  828,  236,  992, 1086, 1208,  992, 1926,
  815,  568,   56,  294, 1214, 1215, 2042,  475,  476,  371,
  353,  682,  679,   66,  903,  871,  512,  355,  145, 1680,
  985,  921,  700,  652,  578,  938,  236,  337,  939,  937,
  985, 2381, 1232,  227,  143,  579,   88,  143, 1237,  170,
  207,  176,  297,  803,  209,  373,  446,  542,  451,  929,
 1870, 2048, 2378,   64, 1245,  286, 2099, 1953,  578,  377,
 1956, 1959,  127,  422,  743, 1087, 1879, 1254,  985,  579,
  186,  992,  143, 1962, 1680,  790,  743,  819,  366,  143,
  366,  366, 2384,  370,  556,  537,  446,  176,  145,  578,
  966,  145,  176,   68,  374,  380,  420,    1,    2,  560,
  579, 1088,    6, 2126,  176,  890,  557,  746, 2038,  176,
 2038, 1153,  383,   44,  992,  731,   77,  192,   42,  746,
  170,  400,   41,   39,  934,   40,  145,  381,    1,  397,
 2042,  820,  127,    6,  436,  127,  970,  971,    1,    2,
   23,  819,   24,    6,  908, 2003,  700,  800,  803, 1156,
  512,   23,  460,   24,  578,  958,  578,    1,  192,  425,
  944,  997,  374,  374,  945,  579,  460,  579,    1,    2,
  127,   85,  426,    6,   53, 2048, 1736,  207,  207,  428,
  461,  948,  949,  176,  411,  556,  115,  893,  192,   85,
  953,  522,  143,    7,  461,  557,  380,  816,  795,   80,
  547,  335,  985,  363,  959,  728,  236,  177,   56,  141,
  207,  141, 1085,  141,  209,   53,  558,  793,  731,   66,
 1058,  475,  476,  998, 1000,  557,  578,  176,  381,  176,
 1671,  460,  363,    1,  176,  285, 1055,  579,    6,   78,
 1054,  213,  222,    1,   80,   53,  145,  317,    6,   86,
  177,  794,   90,  442,  475,  476,   23,  495,   24,  461,
 1091,  969,  334, 1677,    1,  996,   23,   86,   24,   80,
    7,  578,   80,  975, 1071,  177, 1022, 1023,  176,  390,
  429,    1,  579, 1201, 1028, 1029,    6,   78,   78,  798,
  127,   64,   64,  212, 1870,   78,   78,  337, 2093, 1467,
  337,  176,   88, 1464,   23, 1870,   24,   80,  936, 2096,
 1104, 1674, 1048,   56,  177, 1051,  224,  176, 1887,    3,
  700, 1071,   90,   56,   66,   90,   23,  548,   24, 1071,
 1893,   68,   68, 1063,   66,  621,  426,  665,  665,  665,
 1067, 1069,  525,  177,  177,  177,  177, 2126,  545,  224,
 1072, 3235, 1075,  621,  132,  553,  556,  603, 2126,  700,
   90,   56,  500, 1890,   25,  512,  512,  380,  228, 1078,
  512,  228,   66,  177,  645,  646,  390, 1730,  503,  176,
  556,  553,   34,   35,  177,  512,  556,  177,  460,  177,
  460,  380,  374,  461,  461,  570,  800,  380,  461,  381,
    7,    1,    2, 1059,  575,  176,    6,    7,  229,   48,
   49,  115,  685,  461,  235,    1,  461, 1733,  461,  176,
    6,  192,  115,  381,  675,  567,  682,   80,  675,  381,
  177,  177,  177,  177,  141,  176,  411,  578,   23,  557,
   24,   80,  512,  732,  176,   72, 1739,  572,  579, 1742,
 1745,  141,  819,  141,  115,    1,  985,  915,  143, 1147,
 1144,   77, 1748,  428, 1138,  801,  717, 1174, 1155,  718,
  461,  335,  176,  176,  442,  573,   66,  700,   53,  558,
   90,  671,  176,  196,  390,  211,  700,  916, 2066,  177,
  177, 1210,  141,  176, 1107,   56,  176,  453,  160,  802,
 1167, 2027,  141,  827,  826, 1110,   66,  164,  228,   77,
   77,   78,  145,  508, 1187,   80,  580,   77,   77,  518,
  177,  781,  523,  177,  700,   23,  177,   24,   23,  581,
   24, 1230,  334,  473, 2021,  587,  525, 1222, 1210, 1059,
 1059, 1077,  428, 1080,  176,  176,   78,  374,  819,  586,
   80,   80,   80, 1210, 2381, 1858,  127,  665,  665,  665,
    2, 1249,  591,  177,  198,  202, 1858,  177,  161,  206,
  210, 1256, 1193,  177,  177, 2378,  597, 1220,  176,  160,
  692,  177, 1461,  708,  213,  176,  176,  918,  164,  602,
  917, 1223, 1224, 1225,  995,  692,  460,  917,  692,  206,
  299,  220,   78,   78,   78, 2384,   78, 1151, 1152,  115,
  460,  453,  473,  176,  206,  220,  220,  185,  731,  176,
  700, 1467,   23,  733,   24, 1464,   78,  700,  700,  578,
  220,   66, 1227,   66,  621,  176,   78,  177,  177,  988,
  579,  220,  431,  432,  433,  220,  706,   88,  176,  161,
  846,  177, 1239,    1,    2,  700,  207,  636,    6,    7,
  324,  700, 1246,  719,  299,   23,  389,   24,  131,    1,
  669,  207,  336,  192,    6,  460,  131,  700,  775,  115,
  778,  672,  115,    2,  381,  368,  736,    6,    7, 2054,
  700,  557,   23,   80,   24,   88,   88,  205,  195,  428,
 2006,  428,  192,   88,   88, 1172, 1173,  675,  663,  666,
 1019,  160,  205,  679,   66,   66,  160,  115, 1058,  131,
  164,    2,    2,    2,  115,  164,  279,  177,  177, 2063,
   53,  558,  644,   77,  160,  177,  160,  653,  131,  418,
  476,  131,   65,  164,  369,  164,   90,  110,  196,   56,
 1241,  774,  474,  185,  185,  536,  185,  657, 2069,   53,
   66, 2072, 2075,  249,  249, 1251,  177,  249,   77,  473,
  669,  473,  832,  815, 2078, 1065,  131,  708, 1064,  177,
  177,  161,  249,  131,  249, 1109,  161,  177,  917,  713,
  988,  160,  988,  988,  185,  738,   80,  185,    2,    2,
  164,  423,  160,  143,  161, 1179,  161, 1182,  917,  300,
  917,  164,  131,  131,  249,  131,  739,  110,  723,  476,
  110,  299,  935,  299,   77,   77,   77,  740,   77,   80,
  518,  474,  460,  556,  460,  489, 1199,  115,  158,  917,
  177,  783,  555, 1158,  380,  507,  249,  506,   77,    1,
    2,  143,  143,  131,    6,  110,  131,  145,   77,  143,
  143,  161,  445, 1077,  171, 1080, 1164, 1455,  489,  192,
  806, 1229,  161,  300,  917,  323,  381,  177, 1458,  177,
  177,  784,  790,  279, 1070,  279,  285,  221,  752,  988,
  755,  390,  988,  774, 1161,  799,  131,   65,  812,   65,
  489,  127,  603,  177, 1461,  145,  145,  217,  708,  228,
  217,  857, 1233,  145,  145,  917,  834, 1988, 1991,   88,
  858,  518, 1994, 1997,  217,  217,   53,  218,  279,  292,
  641,  860,  445,  324,  447, 1234,  641, 2000,  917,  132,
  806,   25,  336, 1244,  809,  336,  917,  873,    2,  127,
  127,  878,    6,    7,   88, 2003,  885,  127,  127,  812,
  185,  185,  185,  549,  887,  988, 1247,  192,  115,  917,
  115,  544,  115,  892,  894,  110,  476,  368,  476,  620,
   65,   65,  177,  185,  681, 3493,  249, 3496,  474,  555,
  474,  185,  131,  292, 2009, 2012,  293,  483,  447,  431,
  432,  433,  481,  479,  895,  480,  491,  482,  988,  897,
   88,   88,   88,    1,   88,    3,  818,  684,  900,  131,
  131,  131,  612, 1194,   53,  249,  981,  249,  983,  556,
  300,  902,  300,  177,   88,  610,  131, 3550,   80, 3553,
  380,  144,  131, 3571,   88, 3574, 1200,  641,  681,  188,
  705,  249,  904,  920,  926,  249,  449,  489,  249,  489,
  293,  536,  960,  961,  962,  477,   23,  846,   24,  940,
 1215,  445,  381,  483, 1197,  143,  942,  177,  481,  479,
  946,  480,  491,  482, 1092, 1236,   80,   80,  505,  952,
  973,   90,  188, 1221,   80,   80,  271,  978, 1146,  517,
  177,  516,  829,  115, 1006,  158, 1252,  555, 1242,  917,
  143,  144,  692, 1008,  144,  445,  177,  144, 1009, 1010,
  449, 1218, 1052, 1257, 1016, 1011, 1149, 1152,  427,  145,
 1014, 1155, 3559,  380, 3562, 1015, 1239,  185,  185,   90,
   90, 1031,  427,  427,  477,  536, 1263,   90,   90,  144,
  292, 1257,  292,  475,  917,  447,  188,  447, 1281, 1035,
  271, 1044,  131,  228,  145,  381,  143,  143,  143, 1045,
  143, 1049,  292,  127, 1260,  658,  662,  667, 1083, 1050,
 1148, 1287, 1305, 1076,  963,  144,  144,  115,  188,  185,
  143,  380, 1082,  483,  485,  292,  131,  369,  481,  479,
  143,  480,  491,  482,  177, 1311,  701,  427,  127, 1284,
  115, 1090,  115, 1112,  115, 3565, 3568,  293,  177,  293,
  145,  145,  145,  381,  145,  115,  188,  360,  405,  188,
  360,  288,  475, 1308,  177,  366,  498,  692,  366,  293,
 1093,  110, 1096,  177,  145,  431,  432,  433,  705,  419,
  641,  115,  365, 1326,  145,  365,  131,  115, 1101,  449,
 1020,  115,  293, 1113,  127,  127,  127,  422,  127,  144,
  418, 1142, 1143,  463, 1114, 1125, 1332,  449, 1182,  449,
  470,  177, 1218,  445, 1129,  475,  476,  681,  127,  681,
  681, 1130,  177, 1131,  733,  177,  288, 1135,  127,  449,
  420,  477,  498,  477, 1329,  500, 1185, 1188,  501,  502,
   80, 1191,  407,  185,  822,  407,  419,  271, 1136,  271,
   23,  503,   24, 1137,  408, 1203,   44,  408,    2,    2,
    2,   42,  423,   45,  891,   41,   39,  418,   40, 1068,
 1224,  422,  505, 1191, 1192,   80,  555, 1139,  364,  463,
 1071,  364,  323, 1206, 1209,  422,  422, 1482, 1212, 1140,
  301,  475,  476,   90,  427,  188,  427,  420, 1227, 1230,
 1176,  500,  705, 1233,  501,  502,  241,  177, 1245,  241,
 1488, 1178, 1074,  409,  177,  177,  409,  503,  445,  475,
 1181,  475,  188,  188,  188, 1185,  241, 1253,   90,  423,
  471,   80,   80,   80,  701,   80, 1248, 1251, 1485,  188,
 1186, 1254,  177, 1269,  471,  144,  238, 1194,  177,  236,
  422, 1095, 1202,  188,  301,   80,  241, 1203,  445, 1204,
  289,  289, 1098, 1206,  177,   80,  289, 1293, 1506, 1207,
 1213, 1272, 1275,  431,  432,  433, 1278,  177,  115,  505,
  289,  297, 1104,  297,   90,   90,   90, 1216,   90,  636,
 1217, 1512, 1228, 1071, 1101, 1296, 1299, 1219,  289,  463,
 1302,  513,  466,  467,  468,  469,  470, 1231,   90,  471,
 1235,  475,  476,  477,  298, 1238,  298,  185,   90, 1509,
 1243, 1166,  404,  483,  485, 1074,  115,  115,  481,  479,
 1248,  480,  491,  482,  115,  115,  404,  131, 1314,  186,
  639,  686,  689,  158,  272,  297,  692,  625, 1189,    1,
  695,  698,  701,  704,  707,  710,  185,  713,  701, 1118,
  185,  716,  719,  722,  355,  144, 1317, 1320,  725,  728,
 1118, 1323,  654, 2399,  627,  622,  705,    2,  298,  731,
  484,  159,    3,    4,    5,  131,  131,   84,  431,  432,
  433,  622, 1209,  131,  131,  302, 2405,  625,  269,  188,
  144,  404, 1118,   23,  625,   24,  249,  422,  272,  422,
  486,  301, 1122,  301,  448,  705,  110,  737,  740,   29,
   30,   31,   32, 1125, 2402,   34,   35,  205, 1025, 1026,
 1027,  241,  241,  241,  241,  241,  241,  422,  241, 1240,
  421, 1242, 1470,  241,  241,  448,   37,   38,  512,  241,
  241,  188,   48,   49, 1250, 1128,  181,  454,   54,  302,
 1255,   57,  269,  377,  110,  110,  471, 1258,  471,  241,
 1473, 1476,  110,  110,  185, 1479,  456, 1077,  448, 1080,
  421, 1113,  227,  185,  287,  227,  158,  308,   72,   67,
 2420,  102, 1116,  303,  421,  421,  506,  241,  241,  227,
  227,  504,  297,  131,  297,   84,  555,  558,  561,  564,
  567,  570,  502, 2426,  105,  573,  576,  579,  582,  585,
  588,  185,  591, 1494,  297, 2346,  594,  597,  600,  603,
  132,  606,  701,  705,  609,  298, 2349,  298,    2,    2,
    2, 2423,  705, 2368,  612,  615,  618,  621,  624,  784,
  115, 1497, 1500,  627, 2371, 3224, 1503,  298,  404,  421,
  404,  660,  749,  787,  227,  272, 2349,  272, 2352,    1,
    2,  701,  630,  633,    6,  188,    1,    2, 2441, 1083,
  705,    6,  642,  645,  648,  115, 1074,  651,  191,  192,
 1086,  815,  530,  181,  535,  181,  192,  132, 2352,  463,
 2462, 2447,  466,  467,  468,  469,  470,  471, 2483,  131,
 1131,  475,  476,  477,  132, 1167,  302,  185,  302,  269,
 1170,  269,  554, 2468,  185,  185, 1173, 1265, 2387, 2444,
 1290, 2489, 1452,  181, 1491,  448,  530,  448,  564,  217,
 1437,  115,  115,  115,  131,  115,   53, 1521, 1168, 1169,
 1170, 2465,  185,   53, 1524, 1751, 2390, 2393,  185, 2486,
 1856, 2396,  608,  331,  332,  115,  609, 1874, 1876,  608,
  331,  332, 3431,  609,  185,  115,  705, 3434, 1932,  592,
  593,  594,  595,  705,  705, 2084, 2504,  185,  110,  701,
  598, 2105,  548, 2086, 1131, 3437, 2101, 3440,  701, 2105,
  131,  131,  131,  548,  131, 2124, 2322, 2325, 2328, 2510,
  144,  705,  245,  248,  251,  254,  421,  705,  421, 2331,
  483,  485, 2355,  110,  131,  481,  479, 2375,  480,  491,
  482,  257, 2362,  705,  131, 2105,  701, 2507,  611,  564,
  333, 3221, 3227, 3230,  786, 2408,  705,  787,  788,  188,
 3233, 3398, 3443, 1077, 3401, 1080, 3425, 1113,  144,  144,
  789, 3449, 2105, 3446,  303, 3520,  144,  144, 1116,  640,
 3523, 3526, 3556, 2411, 2414,  535,  419,  484, 2417,  110,
  110,  110,  548,  110,  227,  548,  468,  419,  188,  468,
 1089,  811,  444, 1102,  422,  421,  877,  418,  596,  181,
  181,  181, 1171,  110,  468,  422,  468,  486,  418,  823,
  483,  957,  287,  110, 1141,  481,  479, 1190,  480,  491,
  482,    0,  181,  535,    0,  245,  245,  420,  245,  693,
  699, 2018,  701, 2429,    0,    0,  468,   82,  420,  701,
  701,    0,  163,    0,  693,    0,  194,  693, 2525, 2027,
 2024,  201, 2015,    0, 2546, 2450,  217, 1058,  245,  423,
    0, 2432, 2435, 2471,    0,    0, 2438,  701,    0,    0,
  423, 2531,    0,  701,    0, 1150,    0, 2552,  418,    0,
  299,    0, 2021, 2453, 2456,    0,  640,  640, 2459,  701,
  245, 2474, 2477,    0,  329,    0, 2480,    0,    0, 2528,
  535,    0,  701,    0,    0, 2549,  188,   82, 1149, 1077,
   82, 1080,    0, 1455, 2030,  188,  548,  548,  548,  548,
  548,  548,    0,    0, 1458,  548,  548,  548,  548,  548,
  548, 1077,  548, 1080,  777, 1113,  548,  548,  548,    0,
  423, 2492,    0,  548,  548,   82, 1116,  228,  228,    0,
    0,  228,  441,  188,    0,  548,  548,  548,  548,    0,
  224,  548,  548,  548,    0,    0,  228,    0,  228, 2495,
 2498,    0,    0,    0, 2501, 2567,  181,  181,  224,    0,
    0,  224,  144,  441,  640,    0,  229,  229,  548,  548,
  229,    0,  548,  548,  548,    0,  463,  548, 2573,  466,
  467,  468,  469,  470,  551,  229,    0,  229,  475,  476,
  477,  224, 1077,    0, 1080,  821, 1113,  144,  778,    0,
    0,    0,  244,  244,  548,  244, 2570, 1116,  699,  836,
  228,    0,  569,    0,  571, 2334,  843, 2337, 2340, 2343,
    0,    0,    0,  224,    0,  853,    0,    1,    2,  188,
    0,    0,    6,  483,  485,  244,  188,  188,  481,  479,
    0,  480,  491,  482,    0,   82,    0,  192,    0,  229,
    0,    0, 2588,  144,  144,  144,    0,  144,  303,    0,
  600,  551,    0,    0,  188,    0,  463,  244,    0,  640,
  188,  468,  469,  470,    0, 2594,    0,  144,  475,  476,
  477,    0, 3202, 2513, 3202,    0,  188,  144,    0, 2534,
  484,    0,    0,    0,    0,    0,    0,    0,    0,  188,
  512,  512,    0, 2591,   53,  512,  640,   56,  535,  640,
 2609, 2516, 2519,    0,    0,  905, 2522, 2537, 2540,    0,
  512, 2630, 2543,    0, 2651,    0,    0,  632,    0,    1,
    2,    0,  699, 2615,    6,    0,    0,    0,   10,   11,
   12,   13,  202,  168, 2636,  203, 3202, 2657,    0,  192,
   21,   22,   76,    0,    0,    0,  204,   26,  647,  648,
    0, 2612,    0,  654,  656,    0,  198,   28,  198,  198,
  244,  244, 2633,    0,  244, 2654,  205,  512,  198,  202,
    1,    2,  676,  206,  210,    6,    0,    0,  244,  244,
  549,  244,    0,    0,  686,    0,  689,    0,  213,    0,
  192,  549,    0,  321,    0,   52,   53,   54,    0,    0,
 2555,  951,  716,  223,  223,    0,  217,    0,  223,  227,
    0,  244,   76,    0,    0,   76,  483,  205,   76,    0,
    0,  481,  479,  223,  480,  491,  482,    0, 2558, 2561,
    0,    0,    0, 2564,    0,    0,  414,    0,    0,    0,
    0,    0,  224,  244,  194,  220,    0,   53,    0,    0,
   76,    0,  994,    0,    0,    0,    0,  439,    0,  441,
    0,    0,    0,    1,    2,    0,  146,    0,    6,    0,
  549,    0,  516,  549,  190, 3202,    0,    0,    0,    0,
  223,    0,    0,  192,    0,  198,  529,  529,  439,    0,
    0,    0,    0, 3202,    0, 3202,  699, 2576,    0,  463,
    0,   82,  466,  467,  468,  469,  470,    0,    0,  198,
  205,  475,  476,  477,    0, 3202,    0,  327,    0,  905,
    0,    0,    0,  559,    0, 2579, 2582, 2672,    0,  198,
 2585,  693,    0, 1682,  228,  699,  146,  198,    0,  146,
   53,    0,  375,  441, 3202,    0,    0, 3202, 3202,    0,
 2678,    0,    0,    0, 2090, 2597,    0,  817,    0,    0,
 3202,    0,  460,  460,    0,    0, 2618,  460, 2693, 2639,
   76,    0,    0,    0,  146,  825,    0, 2714, 2675,    0,
    0,  452,  460, 2600, 2603,    0,  198,    0, 2606,    0,
    0, 2699,    0,    0, 2621, 2624,    0, 2642, 2645, 2627,
 2720,    0, 2648,    0,  549,  549,  549,  549,  549,  549,
    0,  190,  452,  549,  549,  549,  549,  549,  549, 2696,
  549,    0,    0,  843,  549,  549,  549,    0, 2717,  632,
    0,  549,  549,    0,    0,    0,    0, 1110, 2735,  460,
    0,    0,  876,  549,  549,  549,  549,  230,  233,  549,
  549,  549,  236,  699,  886,    0,  693,    0,    0,    0,
    0, 2741,  699,  321, 2756,    0,  321,  239,    0,  321,
  132,  806,    0,  498,    0,  809,  549,  549,    0,  198,
  549,  549,  549,    0,    0,  549, 2777, 2762,    0, 2738,
  812,   23,  463,   24,  146,  466,  467,  468,  469,  470,
  699,    0,    0,    0,  475,  476,  477,    0,    0, 2783,
  678, 1159,  549,  505, 1160, 2759,  529,  439,    0,    0,
    0,    0,  922,  286,  242,    0,  286,    0,    0,  931,
  932,    0,    0,    0,    0,    0,    0, 2780,    0,    0,
  286,  286,  500,    0,  943,  501,  502,  818,  689,    0,
 1682, 1682,    0,  198,    0, 1686, 1682,    0,  503, 1682,
 1682, 1682, 1682, 1682, 1682,    0, 1682,    0,    0,    0,
 1682, 1682, 1682,  286,    0,    0,    0, 1682, 1682,    0,
  321,  439, 2660,    0, 2912,    0,    0,  327, 1682,    0,
  327, 2933,    0,  327,  439,    0,  699, 1682,    0,  726,
    0,    0,    0,  699,  699,  286,    0, 2918,    0,    0,
 2663, 2666,    0,    0, 2939, 2669,  302,  302,  190,    0,
    0,    0,  972, 2681, 1701, 1682, 1682, 1704, 1708,    0,
    0,  699, 2702,    0,  680, 2915,   76,  699,  987,    0,
 1712,  375, 2936,  302,  358,    0,   82,    0,  999, 1001,
 1003, 2684, 2687,  699,    0,    0, 2690, 2954,    0,    0,
 2705, 2708,  230,    0,    0, 2711,  699,    0,  230,    0,
    0,  529,  559, 2975,  163,    0,    0,  810,  439,  632,
 2960,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  198,  198,    0, 2723,   82,   82, 2981,    0,    0,    0,
    0,    0,   82,   82,  327,  375,    0,    0, 2957,    0,
    0,    1,    2,    0, 1034,  393,    6,    0,  452, 2744,
    0, 2726, 2729,    0, 2978,    0, 2732,    0,    0,    0,
    0,  192,    0,    0, 1965, 1968, 1047,  972,    0, 1971,
  972, 2765,  931, 1053, 1056, 1057,    0, 2747, 2750,  198,
    0,  230, 2753,    0, 1974,    0,    0,    0,  972,  198,
  146,    0,  286,    0,  286,    0,    0,  230,    0, 2768,
 2771,    0,    0,  230, 2774,    0,  230, 1079, 1080,    0,
    0,  218,  810,  321,  286,    0,    0,    0,   53,  987,
    0,  987,  987,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  452,    0,    0,    0,    0,    0,  302,  302,
  286, 1977,  393,    0,    0,    0,    1,    2,    0,    0,
  678,    6,  678,  678,    0,   10,   11,   12,   13,  202,
  168,    0,  203,    0,  198,    0,  192,   21,   22, 2900,
 1119,  559,    0,  204,   26,  552, 2921,    0,  393,    0,
  393,    0, 1128,    0,   28,    0,  552,    0,    0,    0,
    0, 1133, 1134,  205,  930,  230,    0, 2903, 2906,    0,
    0,    0, 2909,  302, 2924, 2927,    0,    0,    0, 2930,
  302,    0, 2996,    0,  972, 3017,    0,  302,  987,    0,
  302,  987,   52,   53,  413,  489,    0,    0,    0,    0,
    0,    1,    2,    0, 3038, 3002,    6,  327, 3023,  489,
    0,    0, 2942,    0,    0,    0,    0,    0,   82,    0,
  393,  192,    0,  660,    0,    0,    0, 3044, 2963,  302,
    0,    0,    0, 2999, 1183,  552, 3020,    0,  552,  972,
 2945, 2948,  489,    0,  680, 2951,  680,  680,  687,    0,
    0,  198,  393,   82,  302, 3041, 2966, 2969,    0,    0,
 1198, 2972,    0,  198,  987,    0,    0,  483,  485,    0,
    0,  302,  481,  479,  489,  480,  491,  482,   53,    1,
    2,   76,    0,  198,    6,    0,    0,    0,    0,    0,
  302,  487,    0,    0,  302,    0,    0,    0,    0,  192,
    0,  930,  972,    0,    0,    0,    0,  987,    0,   82,
   82,   82,    0,   82,    0,    0,    0,  704,    0,    0,
    0,    0,    0,    0,  484,    0,  901,    0,  393,   76,
   76,    0,    0,   82,    0,   44,    0,   76,   76,    0,
  307,    0,   45,   82,   41,   39,    0,   40,    0,    0,
    0,    0,    0,    0,  486,    0,   53,    0,    0,  302,
    0,  393,    0,  308,    0,    0,    0,    0,    0,  552,
  552,  552,  552,  552,  552, 3059,    0,    0,  552,  552,
  552,  552,  552,  552,  230,  552,    0,    0,    0,  552,
  552,  552,    0,  309,    0,    0,  552,  552, 3065,    0,
 3080,    0,    0,    0,    0,  146,    0,    0,  552,  552,
  552,  552,    0,    0,  552,  552,  552,  489,  489,  489,
  489,  489,  489, 3086,  489,  238, 3062,    0,  236,  489,
  489,  489,    0,  489,    0,  489,  489, 2984,    0,    0,
 3005,  552,  552,    0, 3251,  552,  552,  552,    0,  230,
  552, 3083,    0,  146,  146, 3272,    0,    0,    0, 3026,
    0,  146,  146,    0,    0, 2987, 2990, 3257, 3008, 3011,
 2993,    0,    0, 3014,  198,  230,    0,  552, 3278,    0,
  393,    0,    0,    0,  489,    0,    0, 3029, 3032,    0,
    0,    0, 3035,    0,    0, 3254,    0,    0,    0,    0,
    0,  302,  302, 3293,    0,    0, 3275,    0,    0,    0,
    0,    0,    0,    0,    0,  704,    0,  393,    0,  393,
    0,    0,    0,    0,    0,    0, 3299,    0,    0,    0,
    0,  660,    0,    0,    0,  455,  456,  457,  458,  459,
  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
  470,  471,  472,   76, 3296,  475,  476,  477,    0,    1,
    2,    3,    4,    5,    6,    0,    0,  411,   10,   11,
   12,   13,  202,  168,    0,  203,    0,    0,    0,  192,
   21,   22,   23,    0,   24,    0,   25,   26,   76,    0,
 3416,    0,    0,    0,    0,    0,    0,   28,   29,   30,
   31,   32,    0,    0,   34,   35,  205,    0,    0,    0,
    0,    0,    0, 3422,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,   38,  393,    0,    0,
 3047,   48,   49,    0,    0,   52,   53,   54,    0,  704,
   57, 3419,    0,    0,   76,   76,   76,    0,   76,    0,
    0,    0,    0,    0,    0, 3068,    0,    0, 3050, 3053,
    0,  127,    0, 3056,    0,  127,  127,   72,   76,  127,
  127,  127,  127,  127,  127,  127,    0,  146,   76,    0,
    0,    0,    0, 3071, 3074,    0,  127,  127, 3077,  127,
    0,  127,    0,    0,    0,    0,    0,    0,    0, 3239,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3260,    0,  146,    0,    0,    0,    0,    0,    0,  127,
    0,  127,  127,    0,    0,    0,    0, 3242, 3245,    0,
    0,    0, 3248,    0,    0,    0,    0,    0, 3263, 3266,
    0,    0,  967, 3269,    0,    0,  393,  393,    0,    0,
    0,  127,  127,  127,  127,    0,    0,    0, 3281,    0,
    0,    0,    0,  660,  660,  660,  990,    0,  146,  146,
  146,    0,  146,    0,  490,    0,    0,    0, 3484,    0,
    0,    0,    0,    0,    1,    2, 3284, 3287,  490,    6,
    7, 3290,  146,   10,   11,   12,   13,  202,  168,    0,
  203, 3490,  146,    0,  192,   21,   22,    0,    0,    0,
    0,  204,   26,  704,  230,    0,    0,    0,    0,    0,
    0,  490,  410,    0,    0,    0,  302,  302,    0, 3487,
    0,  205,  240,    0,    0,  292,  293,    0,  295,  296,
  298,  300,  301,  304,  310, 3404,  318,  320, 1038,    0,
    0, 3582,  704,  490,    0,    0,    0,    0,    0,  412,
   52,   53,  413,    0,    0,    0,    0,    0,    0,    0,
  304,  360, 3582, 3407, 3410,    0,    0,    0, 3413,    0,
    0,    0,    0,    0,    0,  127,  127,  127,  127,  127,
  127,  127,    0,    0,  127,  127,  127,  127,  127,  127,
    0,  127, 1116,    0,    0,  127,  127,  127,  127,    0,
  127,    0,  127,  127,    0,    0,    0,  990,    0,  990,
  990,    0,    0,  127,  127,  127,  127,  127,    0,  302,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,    0,  127,  127,    0,    0,    0,
  704,    0,    0,    0,    0,    0,  127,    0,    0,  704,
    0,    0,    0,  660,  660,  660,    0, 1116, 1175,  338,
  339,  340,    0,  127,  389,    0,  490,  490,  490,  490,
  490,  490,    0,  490,    0,    0,    0,    0,  490,  490,
  490,    0,  490,    0,  490,  490,  990,  704,    0,  990,
    0,  590,    0,    0,    0,  490,    0,    0,    0,  389,
    0,    0,    0, 3472,  300,  310,  304,    0,    0,    0,
  599,    0, 1175,    0,    0,  230,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,    0,    0,    0,    0,
    0, 3475, 3478,  490,    0,    0, 3481,    0, 3582, 3582,
    0, 3511,  230, 3582, 3582,    0,  967, 3582, 3582, 3582,
 3582, 3582, 3582,    0, 3582,    0, 3541,    0, 3582, 3582,
 3582,    0,  990,    0, 3517, 3582, 3582,    0,    0,    0,
  304,    0,    0,    0,    0,  298, 3582,  622,  633, 3547,
    0,    0,    0,  704,  637, 3582,  230,  310,    0,    0,
  704,  704, 3514,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  990,    0, 3544,    0,    0,
    0,    0, 3582, 3582, 3582, 3582, 3582,    0,  704,  659,
  664,  668,    0,  670,  704,    0,  304,    0, 3582,    0,
    0,    0,    0,  230,    0,  230,  389,  389,    0,    0,
  704,    0,    0,    0,    0,    0,    0,    0,  230,  697,
    0,  304,    0,  704,  230,    0,    0,    0,    0,    0,
    0,  230,  389,    0,  697,    0,    0,  697,  304,    0,
    0,    0,    0,  721,    0,    0,    0,  389,    0,    0,
    0,    0,    0,    0,    0,  603,  729,  304,  734,  603,
  735,  304,  603,    0,  603,  603,    0,    0,    0,    0,
    0,    0,    0,    0,  389,  389,  603,  603,    0,  603,
    0,  603,  389,  389,  389,  389,  389,    0,  389,  389,
    0,    0,    0,  742,  743,  744,  745,  746,  747,  748,
  749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
  759,  603,  603,  110,  171,  763,  764,  765,  766,  767,
  768,  769,  770,  771,  772,  773,  304,  776,    0,    0,
  780,  781,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  603,  603,    0,    0,  110,    0,    0,    0,
  110,  110,    0,  110,  110,  110,  110,  110,  110,  110,
  110,    0,    0,    0,    0,    0, 3499,    0,    0,    0,
    0,  110,  110,    0,  110,    0,  110,    0,    0,    0,
    0, 3529,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  818,    0,    0, 3502, 3505,    0,    0,    0, 3508,
    0,    0,    0,    0,  110,    0,  110,  110,    0, 3532,
 3535,    0,  544,    0, 3538,    0,  544,  544,    0,    0,
    0,  544,  544,  544,  544,  544,  544,    0,    0,  848,
    0,    0,    0,    0,    0,  854,  110,  110,  110,  110,
  544,    0,  544,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  863,  864,  865,    0,
  633,    0,  292,  293,  765,  868,  869,  870,  304,  872,
    0,    0,  544,  544,    0,    0,    0,  881,    0,    0,
    1,    2,    0,    0,    0,    6,    0,    0,    0,   10,
   11,   12,   13,  202,  168,    0,  203,    0,  889,    0,
  192,   21,   22,  544,    0,  544,    0,  169,   26,    0,
  865,    0,    0,    0,    0,    0,    0,  115,   28,  115,
    0,  115,    0,  603,  603,  603,  603,  603,  603,  603,
  603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
  603,    0,    0,  603,  603,  603,  603,    0,    0,    0,
    0,    0,    0,    0,    0,  603,   52,   53,    0,    0,
    0,    0,    0,    0,    0,    0,  603,    0,    0,    0,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,    0,  110,  110,  110,  110,
  110,  110,  110,    0,    0,    0,    0,  110,  110,  110,
  110,  110,  110,    0,    0,    0,    0,    0,  110,  110,
  110,  110,  110,  110,    0,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
    0,  110,    0,    0,    0,    0,  110,    0,    0,  110,
    0, 2066,  110,  110,  110,  110,  110,  110,  110,    0,
    0,  544,  544,    0,  544,  544,  544,  544,  544,  544,
  544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
  544,  544,    0,    0,  544,  544,  544,  544,  544,  544,
  633, 1017,    0,    0,    0,    0,    0,    0, 1021,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1024,
  664,  664,  664, 2081,    0, 1030,  115,  115,   36,    0,
    0,  115,    0,    0,  544,  115,  115,  115,  115,  115,
  115,  697,  115, 1039, 1041,    0,  115,  115,  115,  115,
    0,  115,    0,  115,  115,    0,    0,    0,    0,    0,
    0,   36,    0,    0,  115,    0,   36,    0,   36,    0,
   36,   36,    0,   36,    0,    0,    0,    0, 1062,    0,
    0,    0,    0,  304,  304,    0,    0,   36,    0,    0,
  115,    0,    0,    0,    0,    0,  115,    0,    0,    0,
  115,    0,  115,  115,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  283,    0,    0,  283,    0,   36,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1100,  283,  283,    0, 1103, 1104, 1105, 1106, 1107, 1108,
    0,    0,    0,    0,    0,  105,    0,    0,    0,    0,
    0,   36,    0,   36,   36,    0,    0,    0,    0,    0,
    0,    0, 2054,    0,  283,    0,  697,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  105,    0,
 2057,    0, 2060,  105,    0,  105,  304,  105,  105,  105,
  105,    0,    0,    0,    0,    0,  283,    0,    0,    0,
    0,    0, 2063,    0,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1158,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1161,
    0, 2069,    0,    0, 2072, 2075,  105,    0,    0,    0,
  664,  664,  664,    0,    0, 3205, 3205, 2078,    0,    0,
 3205,    0,    0,    0, 3205, 3205, 3205, 3205, 3205, 3205,
    0, 3205,    0, 1188,    0, 3205, 3205, 3205,  105,    0,
  105,  105, 3205, 3205, 3209, 3212, 3215, 1196, 1197,    0,
    0,    0,    0, 3205,    0,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
 1205,   36,   36,   36,   36,   36,   36,   36,   36,    0,
   36,    0,   36,   36,   36,   36,   36,   36,    0,    0,
    0, 3205, 3205,   36,   36,   36,   36,   36,   36, 3218,
   36,   36,   36,    0,    0, 3585,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,   36,  283,    0,  283, 3585,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,  283,   36,    0,    0,    0,
    0,   36,    0,    0,   36,    0,    0,   36,   36,   36,
   36,   36,   36,   36,    0,    0,    0,    0,    0,    0,
    0,  283,  105,  105,    0,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,    0,  105,  105,
  105,  105,  105,  105,  105,  105,    0,  105,    0,  105,
  105,  105,  105,  105,  105,    0,    0,    0,    0,    0,
  105,  105,  105,  105,  105,  105,  335,  105,  105,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  105,  105,
    0,    0,    0,    0,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  107,  105,    0,    0,    0,  338,  105,    0,
    0,  105,    0,    0,  105,  105,  105,  105,  105,  105,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  107,    0,    0,    0,  353,
  107,    0,  107,    0,  107,  107,  107,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  107, 3585, 3585,    0,    0,    0, 3585, 3585,    0,
    0, 3585, 3585, 3585, 3585, 3585, 3585,    0, 3585,    0,
    0,    0, 3585, 3585, 3585,    0,    0,    0,    0, 3585,
 3585,    7,    0,  107,   10,   11,   12,   13,  202,  168,
 3585,  203,    0,    0,    0,    0,   21,   22,    0, 3585,
    0,  106,  169,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,  107,    0,  107,  107,    0,
    0,    0,    0,    0,    0,    0, 3585, 3585, 3585, 3585,
 3585,    0,    0,    0,  106,    0,    0,    0,    0,  106,
    0,  106, 3585,  106,  106,  106,  106,    0,    0,    0,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
  106,    0,    0,  260,  263,  266,  269,  272,  275,    0,
    0,    0,  278,  281,  284,  287,  290,  293,    0,  296,
    0,    0,    0,  299,  302,  305,    0,    0,    0,    0,
    0,  308,  106,    0,    0,    0,    0,    0,    0,    0,
    0,  311,  314,  317,  320,  323,    0,    0,    0,    0,
  326,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  106,    0,  106,  106,    0,  329,
  332,    0,    0,    0,    0,    0,    0,    0,    0,  341,
  344,  347,    0,    0,  350,    0,    0,    0,    0,  107,
  107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
  107,  107,  107,  107,    0,  107,  107,  107,  107,  107,
  107,  107,  107,    0,  107,    0,  107,  107,  107,  107,
  107,  107,    0,    0,    0,    0,    0,  107,  107,  107,
  107,  107,  107,    0,  107,  107,  107,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  107,  107,    0,    0,    0,
    0,  107,  107,  107,  107,  107,  107,  107,  107,  107,
  107,  107,  107,  107,  107,  107,  107,  107,  107,    0,
  107,    0,    0,    0,    0,  107,    0,    0,  107,    0,
  110,  107,  107,  107,  107,  107,  107,  107,  106,  106,
    0,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,    0,  106,  106,  106,  106,  106,  106,
  106,  106,    0,  106,    0,  106,  106,  106,  106,  106,
  106,    0,    0,    0,    0,    0,  106,  106,  106,  106,
  106,  106,    0,  106,  106,  106,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,    0,    0,    0,  106,  106,    0,    0,    0,    0,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  108,  106,
    0,    0,    0,    0,  106,    0,    0,  106,    0,    0,
  106,  106,  106,  106,  106,  106,  106,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  108,    0,    0,    0,    0,  108,    0,  108,    0,
  108,  108,  108,  108,    0,    0,    0,    0,    0,    1,
    2,    0,    0,    0,    6,    0,    0,  108,   10,   11,
   12,   13,  202,  168,    0,  330,  331,  332,    0,   20,
   21,   22,    0,    0,    0,    0,  169,   26,    0,    0,
    0,  492,  495,    0,    0,    0,  498,   28,    0,  108,
  501,  504,  507,  510,  513,  516,    0,  519,  522,  525,
    0,  528,  531,  534,  110,  110,  110,   18,  537,  540,
    0,    0,    0,    0,    0,  110,  110,  110,    0,  543,
    0,  108,    0,  108,  108,   52,   53,  110,  110,  110,
  110,    0,    0,    0,    0,    0,  333,    0,    0,    0,
   18,  110,    0,    0,    0,   18,    0,   18,    0,   18,
   18,    0,   18,    0,    0,    0,    0,  546,  549,    0,
    0,    0,    0,    0,    0,    0,   18,    0,  552,    0,
    0,    0,  110,  110,    0,    0,    0,  110,  110,    0,
  110,  110,  110,  110,  110,  110,  110,  110,    0,  110,
    0,    0,    0,    0,  110,    0,    0,    0,   18,    0,
  110,  110,  110,  110,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3205, 3205,    0,    0,    0,
 3205,    0,    0,    0, 3205, 3205, 3205, 3205, 3205, 3205,
   18, 3205,   18,   18,    0, 3205, 3205, 3205,    0,    0,
    0,    0, 3205, 3205, 3209, 3212, 3215,    0,    0,    0,
    0,    0,    0, 3205,    0,  108,  108,    0,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
    0,  108,  108,  108,  108,  108,  108,  108,  108,    0,
  108,    0,  108,  108,  108,  108,  108,  108,    0,  113,
    0, 3205, 3205,  108,  108,  108,  108,  108,  108, 3218,
  108,  108,  108,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  108,  108,    0,    0,    0,    0,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,    0,  108,    0,    0,    0,
    0,  108,    0,    0,  108,    0,    0,  108,  108,  108,
  108,  108,  108,  108,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,    0,
   18,   18,   18,   18,   18,   18,   18,   18,    0,   18,
    0,   18,   18,   18,   18,   18,   18,    0,    0,    0,
    0,    0,   18,   18,   18,   18,   18,   18, 2205,   18,
   18,   18,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   18,   18,    0,    0,    0,    0,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   42,   18,    0,    0,    0, 2208,
   18,    0,    0,    0,    0,    0,   18,   18,   18,   18,
   18,   18,   18,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
    0, 2223,   42,  113,  113,  113,   42,   42,    0,   42,
    0,    0,    0,    0,  113,  113,  113,    0,    0,    0,
    0,    0,    0,   42,    0,    0,  113,  113,  113,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  113,    0,    0,    0,    0,    0,    0,  242,  242,    0,
    0,    0,  242,  242,    0,   42,  242,  242,  242,  242,
  242,  242,    0,  242,    0,    0,    0,  242,  242,  242,
    0,  113,  113,   16,    0,  242,  113,  113,    0,  113,
  113,  113,  113,  113,  113,  113,  113,   42,  113,   42,
   42,    0,    0,  113,  242,    0,    0,    0,    0,  113,
  113,  113,  113,    0,    0,    0,   16,    0,    0,    0,
    0,   16,    0,   16,    0,   16,   16,    0,   16,    0,
    0,    0,  242,  242,  242,  242,    0,    0,    0,    0,
    0,    0,   16,    0,    0, 2130, 2133, 2136, 2139, 2142,
 2145,    0,    0,    0, 2148, 2151, 2154, 2157, 2160, 2163,
    0, 2166,    0,    0,    0, 2169, 2172, 2175,    0,    0,
    0,    0,    0, 2178,   16,    0,    0,    0,    0,    0,
    0,    0,    0, 2181, 2184, 2187, 2190, 2193,    0,    0,
    0,    0, 2196,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   16,   16,
    0, 2199, 2202,    0,    0,    0,    0,    0,    0,    0,
    0, 2211, 2214, 2217,    0,    0, 2220,    0,    0,    0,
    0,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,    0,   42,   42,   42,
   42,   42,   42,   42,   42,    0,   42,    0,   42,   42,
   42,   42,   42,   42,    0,    0,    0,    0,    0,   42,
   42,   42,   42,   42,   42,    0,   42,   42,   42,    0,
    0,    0,    0,  115,    0,  115,    0,  115,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   42,   42,    0,
    0,    0,    0,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,    0,   42,    0,    0,    0,    0,   42,    0,    0,
   42,    0,    0,   42,   42,   42,   42,   42,   42,   42,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,    0,   16,   16,   16,   16,
   16,   16,   16,    0,    0,    0,    0,   16,   16,   16,
   16,   16,   16,    0,    0,    0,    0,    0,   16,   16,
   16,   16,   16,   16, 1693,   16,   16,   16,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1697, 1697,    0, 1690,   16,   16,    0,    0,
    0,    0,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   88,   16,    0,    0,    0, 1697,   16,    0,    0,   16,
    0,    0,   16,   16,   16,   16,   16,   16,   16,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   88,    0,    0,    0, 1697,   88,    0,
   88,    0,   88,   88,   88,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  115,  115,    0,    0,    0,  115,  115,    0,
    0,  115,  115,  115,  115,  115,  115,    0,  115,    0,
    0,   88,  115,  115,  115,  115,    0,  115,    0,    0,
  115,    0,    0,    0,    0,    0,    0,   40,    0,    0,
  115,    0,    0,  281,    0,    0,  281,    0,    0,  115,
    0,    0,    0,   88,    0,   88,   88,    0,    0,    0,
  281,  281,    0,    0,    0,    0,  115,    0,    0,    0,
   40,    0,    0,    0,  127,    0,  115,  115,  115,  115,
  115,  127,    0,  127,  127,    0,    0,    0,    0,    0,
    0,    0,    0,  281,    0,    0,    0,    0,  127,    0,
  127, 1682, 1682,    0,    0,    0, 1686, 1682,    0,    0,
 1682, 1682, 1682, 1682, 1682, 1682,    0, 1682,    0,    0,
    0, 1682, 1682, 1682,    0,  281,    0,    0, 1682, 1682,
    0,  127,    0,    0,    0,    0,    0,    0,    0, 1682,
    0,    0,    0,    0,  686,  689,    0,    0, 1682,  692,
    0,    0,    0,  695,  698,  701,  704,  707,  710,    0,
  713,  127,    0,   40,  716,  719,  722, 1077,    0, 1080,
    0,  725,  728,    0,    0, 1701, 1682, 1682, 1704, 1708,
    0,    0,  731,    0,    0,    0,    0,    0,   88,    0,
    0, 1712,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,    0,   88,   88,   88,   88,   88,   88,   88,
   88,    0,   88,    0,   88,   88,   88,   88,   88,   88,
  737,  740,    0,    0,    0,   88,   88,   88,   88,   88,
   88,    0,   88,   88,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   88,   88,    0,    0,    0,    0,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,    0,   88,    0,
    0,    0,  281,   88,  281,    0,   88,    0,    0,   88,
   88,   88,   88,   88,   88,   88,   40,   40,   40,    0,
    0,   40,   40,    0,  281,    0,    0,    0,    0,    0,
    0,   40,   40,   40,    0,    0,    0,    0,    0,    0,
    0, 2301,    0,   40,   40,   40,   40,    0,    0,    0,
  281,    0,    0,   40,   40,   40,   40,   40,    0,   40,
   40,    0,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
    0,    0,  127,  127,  127,  127,   40,   40,    0,    0,
    0,    0, 2304,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,    0,   40,    0,    0,    0,    0,
   40,    0,    0,   40,    0,    0,   40,   40,   40,   40,
   40,   40,   40,  138, 2319,    0,    0,  138,  138,    0,
  138,  138,  138,  138,  138,  138,  138,  138,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  138,  138,
    0,  138,    0,  138,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    2,    0,    0,
    0,    6,    0,    0,    0,   10,   11,   12,   13,  202,
  168,  138,  203,  138,  138,    0,  192,   21,   22,    0,
    0,    0,    0,  169,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,  138,  138,  138,  138,    0,    0,    0,
    0,    0,    0,  139,    0,    0,    0,  139,  139,    0,
  139,  139,  139,  139,  139,  139,  139,  139,    0,    0,
    0,    0,   52,   53,    0,    0,    0,    0,  139,  139,
    0,  139,    0,  139,    0,    0,    0,    0, 2226, 2229,
 2232, 2235, 2238, 2241,    0,    0,    0, 2244, 2247, 2250,
 2253, 2256, 2259,    0, 2262,    0,    0,    0, 2265, 2268,
 2271,  139,    0,  139,  139,    0, 2274,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2277, 2280, 2283, 2286,
 2289,    0,    0,    0,    0, 2292,    0,    0,    0,    0,
    0,    0,    0,  139,  139,  139,  139,    0,    0,    0,
    0,    0,    0,    0, 2295, 2298,    0,    0,    0,    0,
    0,    0,    0,    0, 2307, 2310, 2313,    0,    0, 2316,
    0,    0,    0,    0,    0,    0,    0,  138,  138,  138,
  138,  138,  138,  138,    0,    0,  138,  138,  138,  138,
  138,  138,    0,  138,    0,    0,    0,  138,  138,  138,
  138,    0,  138,    0,  138,  138,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  138,  138,  138,  138,
    0,    0,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,    0,  138,  138,    0,
    0,    0,    0,    0,    0,  388,    0,    0,  138,  606,
    0,    0,    0,    0,    0,    0,    0,  139,  139,  139,
  139,  139,  139,  139,    0,  138,  139,  139,  139,  139,
  139,  139,    0,  139,    0,    0,    0,  139,  139,  139,
  139,    0,  139,    0,  139,  139,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  139,  139,  139,  139,
    0,    0,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,    0,  139,  139,    0,
    0,    0,  137,    0,    0,    0,  137,  137,  139,  137,
  137,  137,  137,  137,  137,  137,  137,    0,    0,    0,
    0,    0,    0,    0,    0,  139,    0,  137,  137,    0,
  137,    0,  137,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  489,  489,    0,    0,    0,
  489,  489,    0,    0,  489,  489,  489,  489,  489,  489,
  137,  489,  137,  137,    0,  489,  489,  489,    0,    0,
    0,    0,  489,  489,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  137,  137,  137,  137,    0,    0,    0,    0,
    0,    0,  143,    0,    0,    0,  143,  143,    0,  143,
  143,  143,  143,  143,  143,  143,  143,    0,    0,    0,
    0,  489,  489,    0,    1,    2,    0,  143,  143,    6,
  143,    0,  143,   10,   11,   12,   13,  202,  168,    0,
  203,    0,    0,    0,  192,   21,   22,   23,    0,   24,
    0,  384,   26,    0,    0,    0,    0,    0,    0,    0,
  143,    0,  143,  143,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  483,  485,    0,
    0, 1111,  481,  479,    0,  480,  491,  482,  386,    0,
    0,    0,  143,  143,  143,  143,    0,    0,  389,    0,
   52,   53,    0,  492,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  137,  137,  137,  137,
  137,  137,  137,    0,  484,  137,  137,  137,  137,  137,
  137,    0,  137,    0,    0,    0,  137,  137,  137,  137,
    0,  137,    0,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  486,  137,  137,  137,  137,    0,
    0,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,    0,  137,  137,  137,
  137,  137,  137,  137,  137,    0,  137,  137,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  137,    0,    0,
    0,    0,    0,    0,    0,    0,  143,  143,  143,  143,
  143,  143,  143,    0,  137,  143,  143,  143,  143,  143,
  143,    0,  143,    0,    0,    0,  143,  143,  143,  143,
    0,  143,    0,    0,  143,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  143,  143,  143,  143,    0,
    0,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,    0,  143,  143,  143,
  143,  143,  143,  143,  143,    0,  143,  143,    0,    0,
    0,  152,    0,    0,    0,  152,  152,  143,  152,  152,
  152,  152,  152,  152,  152,  152,    0,    0,    0,    0,
    0,    0,    0,    0,  143,  454,  152,  152,    0,  152,
    0,  152,    0,    0,    0,  455,  456,  457,  458,  459,
  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  152,
    0,  152,  152,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  152,  152,  152,  152,    0,    0,    0,    0,    0,
    0,  144,    0,    0,    0,  144,  144,    0,  144,  144,
  144,  144,  144,  144,  144,  144,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  144,  144,    0,  144,
    0,  144,    0,    0,    0,    0,  135,  138,    0,    0,
    0,  141,    0,    0,    0,  144,  147,  150,  153,  156,
  159,    0,  162,    0,    0,    0,  165,  168,  171,  144,
    0,  144,  144,  174,  177,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  180,    0,  483,  485,    0,    0,
    0,  481,  479,  183,  480,  491,  482,    0,    0,    0,
    0,  144,  144,  144,  144,    0,    0,    0,    0,    0,
    0,    0,  492,    0,    0,    0,    0,    0,    0,    0,
    0,  186,  189,  192,  195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  152,  152,  152,  152,  152,
  152,  152,    0,  484,  152,  152,  152,  152,  152,  152,
    0,  152,    0,    0,    0,  152,  152,  152,  152,    0,
  152,    0,    0,  152,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  486,  152,  152,  152,  152,    0,    0,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,    0,  152,  152,  152,  152,
  152,  152,  152,  152,    0,  152,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
    0,    0,    0,    0,    0,  144,  144,  144,  144,  144,
  144,  144,    0,  152,  144,  144,  144,  144,  144,  144,
    0,  144,    0,    0,    0,  144,  144,  144,  144,    0,
  144,    0,    0,  144,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  144,  144,  144,  144,    0,    0,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,    0,  144,  144,  144,  144,
  144,  144,  144,  144,    0,  144,  144,    0,    0,    0,
  117,    0,    0,    0,  117,  117,  144,  117,  117,  117,
  117,  117,  117,  117,  117,    0,    0,    0,    0,    0,
    0,    0,    0,  144,  454,  117,  117,    0,  117,    0,
  117,    0,    0,    0,  455,  456,  457,  458,  459,  460,
  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  117,    0,
  117,  117,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  117,  117,  117,  117,    0,    0,    0,    0,    0,    0,
  675,    0,    0,    0,  675,  675,    0,  675,  675,  675,
  675,  675,  675,  675,  675,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  675,  675,    0,  675,    0,
  675,    0,    0,    0,    0,    1,    2,    0,    0,    0,
    6,    0,    0,    0,   10,   11,   12,   13,  202,  168,
    0,  203,    0,    0,    0,  192,   21,   22,  675,    0,
  675,  675,  204,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,  205,    0,    0,    0,    0,    0,    0,    0,
 1142,  675,  675,  675,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   52,   53,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  117,  117,  117,  117,  117,  117,
  117,    0,    0,  117,  117,  117,  117,  117,  117,    0,
  117,    0,    0,    0,  117,  117,  117,  117,    0,  117,
    0,    0,  117,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  117,  117,  117,  117,    0,    0,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,    0,  117,  117,  117,  117,  117,
  117,  117,  117,    0,  117,  117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
    0,    0,    0,    0,  675,  675,  675,  675,  675,  675,
    0,    0,  117,  675,  675,  675,  675,  675,  675,    0,
  675,    0,    0,    0,  675,  675,  675,  675,    0,  675,
    0, 1134,  675,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  672,  675,  675,  675,  675,    0,    0,  675,
  675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
  675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
  675,  675,  675,  675, 1138,  675,  675,  675,    0,    0,
  675,  675,  675,    0,  675,  675,    0,    0,    0, 2116,
    0,    0,    0, 2116, 2116,  675, 2116, 2116, 2116, 2116,
 2120, 2116, 2116, 2116,    0,    0,    0,    0,    0,    0,
    0,    0,  675,    0, 2116, 2116,    0, 2116,    0, 2116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  478,  478,    0,    0,    0,  478,    0,    0,
    0,  478,  478,  478,  478,  478,  478, 2116,  478, 2116,
 2116,    0,  478,  478,  478,    0,    0,    0,    0,  478,
  478,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  478,    0,    0,    0,    0,    0,    0,    0,    0, 2116,
 2116, 2116, 2116,    0,    0,    0,    0,    0,    0,  529,
    0,    0,    0,  529,  529,    0,  529,  529,  529,  529,
  529,  529,  529,  529,    0,    0,    0,    0,  478,  478,
    0,    0,    0,    0,  529,  529,    0,  529,    0,  529,
    0,    0,    0,    0,  482,  482,    0,    0,    0,  482,
    0,    0,    0,  482,  482,  482,  482,  482,  482,    0,
  482,    0,    0,    0,  482,  482,  482,  529,    0,  529,
  529,  482,  482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  529,
  529,  529,  529,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  482,  482,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2116, 2116, 2116, 2116, 2116, 2116,    0,
    0,    0, 2116, 2116, 2116, 2116, 2116, 2116,    0, 2116,
    0,    0,    0, 2116, 2116, 2116, 2116,    0, 2116,    0,
 2116, 2116,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2116, 2116, 2116, 2116, 2116,    0,    0, 2116, 2116,
 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
 2116, 2116, 2116, 2116, 2116, 2116, 2116,    0,    0, 2116,
 2116, 2116,    0, 2116, 2116,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  529,  529,  529,  529,  529,    0,
    0, 2116,  529,  529,  529,  529,  529,  529,    0,  529,
    0,    0,    0,  529,  529,  529,  529,    0,  529,    0,
  529,  529,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  529,  529,  529,  529,  529,    0,    0,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,    0,    0,  529,
  529,  529,    0,  529,  529,    0,    0,    0,  527,    0,
    0,    0,  527,  527,  529,  527,  527,  527,  527,  527,
  527,  527,  527,    0,    0,    0,    0,    0,    0,    0,
    0,  529,    0,  527,  527,    0,  527,    0,  527,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  527,    0,  527,  527,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  527,  527,
  527,  527,    0,    0,    0,    0,    0,    0,  307,    0,
    0,    0,  307,  307,    0,  307,  307,  307,  307,  307,
  307,  307,  307,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  307,  307,    0,  307,    0,  307,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  307,    0,  307,  307,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  307,  307,
  307,  307,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  527,  527,    0,  527,  527,  527,    0,    0,
    0,  527,  527,  527,  527,  527,  527,    0,  527,    0,
    0,    0,  527,  527,  527,  527,    0,  527,    0,  527,
  527,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  527,  527,  527,  527,  527,    0,    0,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,    0,    0,  527,  527,
  527,    0,  527,  527,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  527,    0,    0,    0,    0,    0,    0,
    0,  809,  307,  307,  307,  307,  307,  307,    0,    0,
  527,  307,  307,  307,  307,  307,  307,    0,  307,    0,
    0,    0,  307,  307,  307,  307,    0,  307,    0,  307,
  307,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  307,  307,  307,  307,  307,    0,    0,  307,  307,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
  307,  307,    0,  307,  307,  307,    0,    0,  307,  307,
  307,    0,  307,  307,    0,    0,    0,  324,    0,    0,
    0,  324,  324,  307,  324,  324,  324,  324,  324,  324,
  324,  324,    0,    0,    0,    0,    0,    0,    0,    0,
  307,    0,  324,  324,    0,  324,    0,  324,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  324,    0,  324,  324,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  324,  324,  324,
  324,    0,    0,    0,    0,    0,    0,  351,    0,    0,
    0,  351,  351,    0,  351,  351,  351,  351,  351,  351,
  351,  351,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  351,  351,    0,  351,    0,  351,    1,    2,
    0,    0,    0,    6,    7,    0,    0,   10,   11,   12,
   13,  202,  168,    0,  203,    0,    0,    0,  192,   21,
   22,    0,    0,    0,    0,  204,   26,  351,  351,    0,
    0,    0,    0,    0,    0,    0,  410,    0,    0,    0,
    0,    0,    0,    0,    0,  205,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  351,  351,  351,
  351,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  412,   52,   53,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  324,  324,  324,  324,  324,  324,    0,    0,    0,
  324,  324,  324,  324,  324,  324,    0,  324,  288,  288,
    0,  324,  324,  324,  324,    0,  324,    0,  324,  324,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  324,
  324,  324,  324,  324,    0,    0,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,    0,  324,  324,    0,    0,  324,  324,  324,
    0,  324,  324,  288,    0,    0,    0,    0,    0,    0,
    0,    0,  324,    0,    0,    0,    0,    0,    0,    0,
    0,  351,  351,  351,  351,  351,  351,    0,    0,  324,
  351,  351,  351,  351,  351,  351,    0,  351,    0,    0,
    0,  351,  351,  351,  351,    0,  351,    0,  351,  351,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  351,
  351,  351,  351,  351,    0,    0,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,    0,    0,  351,  351,  351,
    0,  351,  351,    0,    0,    0,  353,    0,    0,    0,
  353,  353,  351,  353,  353,  353,  353,  353,  353,  353,
  353,    0,    0,    0,    0,    0,    0,    0,    0,  351,
    0,  353,  353,    0,  353,    0,  353,  289,  289,    0,
    0,    0,    0,  289,    0,    0,  289,  289,  289,  289,
  289,  289,    0,  289,    0,    0,    0,  289,  289,  289,
    0,    0,    0,    0,  289,  289,  353,  353,    0,    0,
    0,    0,    0,    0,    0,  289,    0,    0,    0,    0,
    0,    0,    0,    0,  289,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  353,  353,  353,  353,
    0,    0,    0,    0,    0,    0,  542,    0,    0,    0,
  542,  542,  289,  289,  542,  542,  542,  542,  542,  542,
  542,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  542,  542,    0,  542,    0,  542,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  542,    0,  542,  542,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  542,  542,  542,  542,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  353,  353,  353,  353,  353,  353,    0,    0,    0,  353,
  353,  353,  353,  353,  353,    0,  353,    0,    0,    0,
  353,  353,  353,  353,    0,  353,    0,  353,  353,    0,
    0,    0,    0,  388,    0,    0,    0,  387,  353,  353,
  353,  353,  353,    0,    0,  353,  353,  353,  353,  353,
  353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  353,  353,    0,    0,  353,  353,  353,    0,
  353,  353,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  353,    0,    0,    0,    0,    0,    0,    0,    0,
  542,  542,  542,  542,  542,  542,    0,    0,  353,  542,
  542,  542,  542,  542,  542,    0,  542,    0,    0,    0,
  542,  542,  542,  542,    0,  542,    0,  542,  542,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  542,  542,
  542,  542,  542,    0,    0,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,    0,    0,  542,  542,  542,    0,
  542,  542,    0,    0,    0,  623,    0,    0,    0,  623,
  623,  542,  623,  623,  623,  623,    0,  623,  623,  623,
    0,    0,    0,    0,    0,    0,    0,    0,  542,    0,
  623,  623,    0,  623,    0,  623,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  623,    0,  623,  623,    0,    0,    0,
    0,    0,    1,    2,    0,    0,    0,    6,    0,    0,
    0,   10,   11,   12,   13,  202,  168,    0,  203,    0,
    0,    0,  192,   21,   22,  623,  623,  623,  623,  169,
   26,    0,    0,    0,    0,  250,    0,    0,    0,  250,
   28,    0,  250,  250,    0,  250,  250,  250,  250,  250,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  250,  250,    0,  250,    0,  250,  386,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  389,    0,   52,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  250,    0,  250,  250,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  250,  250,  250,  250,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  623,
  623,  623,  623,  623,  623,    0,    0,    0,  623,  623,
  623,  623,  623,  623,    0,  623,    0,    0,    0,  623,
  623,  623,  623,    0,  623,    0,  623,  623,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  623,  623,  623,
  623,  623,    0,    0,  623,  623,  623,  623,  623,  623,
  623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
  623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
  623,  623,  623,    0,    0,  623,  623,  623,    0,  623,
  623,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  623,    0,    0,    0,    0,    0,    0,    0,    0,  250,
  250,  250,  250,  250,  250,  250,    0,  623,  250,  250,
  250,  250,  250,  250,    0,  250,    0,    0,    0,  250,
  250,  250,  250,    0,  250,    0,  250,  250,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,  250,  250,
  250,  250,    0,    0,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,    0,  250,  250,  250,  250,  250,  250,
  250,  250,  250,    0,  250,  250,  250,  250,    0,  250,
  250,    0,    0,    0,  135,    0,    0,    0,  135,  135,
  250,  135,  135,  135,  135,  135,  135,  135,  135,    0,
    0,    0,    0,    0,    0,    0,    0,  250,    0,  135,
  135,    0,  135,    0,  135,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  135,    0,  135,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  135,  135,  135,  135,    0,    0,
    0,    0,    0,    0,  308,    0,    0,    0,  308,  308,
    0,  308,  308,  308,  308,  308,  308,  308,  308,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  308,
  308,    0,  308,    0,  308,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  308,    0,  308,  308,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  308,  308,  308,  308,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  135,  135,
  135,  135,  135,  135,  135,    0,    0,    0,    0,    0,
    0,  135,  135,    0,  135,    0,    0,    0,  135,  135,
  135,  135,    0,  135,    0,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  135,  135,  135,  135,
  135,    0,    0,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,    0,  135,  135,
    0,    0,    0,    0,  171,    0,    0,    0,    0,  135,
    0,    0,    0,    0,    0,    0,    0,    0,  308,  308,
  308,  308,  308,  308,    0,    0,  135,  308,  308,  308,
  308,  308,  308,    0,  308,    0,    0,    0,  308,  308,
  308,  308,    0,  308,    0,    0,  308,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  308,  308,  308,
  308,    0,    0,  308,  308,  308,  308,  308,  308,  308,
  308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
  308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
  308,  308,    0,    0,  308,  308,  308,    0,  308,  308,
    0,    0,    0,  137,    0,    0,    0,  137,  137,  308,
  137,  137,  137,  137,  137,  137,  137,  137,    0,    0,
    0,    0,    0,    0,    0,    0,  308,    0,  137,  137,
    0,  137,    0,  137,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  137,    0,  137,  137,    0,    0,    0,    0,    0,
    1,    2,    0,    0,    0,    6,    7,  166,    0,   10,
   11,   12,   13,  244,  168,    0,   16,   17,   18,    0,
   20,   21,   22,  137,  137,  137,  137,  169,   26,    0,
    0,    0,  170,  249,    0,    0,    0,  249,   28,    0,
  249,  249,    0,  249,  249,  249,  249,  249,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  249,  249,
    0,  249,    0,  249,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,  528,   52,   53,    0,    0,
    0,    0,   58,   59,   60,   61,   62,  173,   64,   65,
    0,  249,    0,  249,  249,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  249,  249,  249,  249,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  137,  137,  137,
  137,  137,  137,    0,    0,    0,  137,  137,  137,  137,
  137,  137,    0,  137,    0,    0,    0,  137,  137,  137,
  137,    0,  137,    0,    0,  137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  137,  137,  137,  137,
    0,    0,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,    0,  137,  137,
  137,    0,    0,  137,  137,  137,    0,  137,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  137,    0,
    0,    0,    0,    0,    0,    0,    0,  249,  249,  249,
  249,  249,  249,  249,    0,  137,  249,  249,  249,  249,
  249,  249,    0,  249,    0,    0,    0,  249,  249,  249,
    0,    0,    0,    0,  249,  249,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  249,  249,  249,  249,  249,
    0,    0,  249,  249,  249,  249,  249,  249,  249,  249,
  249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
  249,    0,  249,  249,  249,  249,  249,  249,  249,  249,
  249,    0,  249,  249,  249,  249,    0,  249,  249,    0,
    0,    0,  355,    0,    0,    0,  355,  355,  249,  355,
  355,    0,  355,  355,  355,  355,  355,    0,    0,    0,
    0,    0,    0,    0,    0,  249,    0,  355,  355,    0,
  355,    0,  355,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  355,    0,  355,  355,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  355,  355,  355,  355,    0,    0,    0,    0,
    0,    0,  137,    0,    0,    0,  137,  137,    0,    0,
  137,  137,  137,  137,  137,  137,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  137,  137,    0,
  137,    0,  137,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  137,    0,  137,  137,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  137,  137,  137,  137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  355,  355,  355,  355,
  355,  355,    0,    0,    0,  355,  355,  355,  355,  355,
  355,    0,  355,    0,    0,    0,  355,  355,  355,  355,
    0,  355,    0,    0,  355,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  355,  355,  355,  355,    0,
    0,  355,  355,  355,  355,  355,  355,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
    0,    0,  355,  355,  355,    0,  355,  355,    0,    0,
    0,    0,    0,    0, 1905,    0, 1895,  355, 1902,    0,
    0,    0,    0,    0,    0,    0,  137,  137,  137,  137,
  137,  137,    0,    0,  355,  137,  137,  137,  137,  137,
  137,    0,  137,    0,    0,    0,  137,  137,  137,  137,
    0,  137,    0,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  137,  137,  137,  137,    0,
    0,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,    0,  137,  137,  137,
    0,  249,  137,  137,  137,  249,  137,  137,    0,  249,
    0,  249,  249,  249,  249,  249,    0,  137,    0,    0,
    0,    0,    0,    0,    0,    0,  249,  249,    0,  249,
    0,  249,    0,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  249,
    0,  249,  249,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  249,  249,  249,  249,    0,    0,    0,    0,    0,
    0,   44,    0,    0,    0,  483,  629,    0,  630,    0,
  628,  626,  619,  627,  491,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  487,
    0,  492,    0, 1895, 1895,    0,    0,    0, 1895, 1895,
    0,    0, 1895, 1895, 1895, 1895, 1895, 1895,    0, 1895,
    0,    0,    0, 1895, 1895, 1895,    0,    0,    0,  631,
 1895, 1895,  484,    0,    0,    0,    0,    0,    0,    0,
    0, 1895,    0,    0,    0,    0,    0,    0,    0,    0,
 1895,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  238,  486,    0,  236,    0,    0, 1899,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1908, 1895, 1895,
 1895, 1895,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  249,  249,  249,  249,  249,
  249,    0,    0,    0,  249,  249,  249,  249,  249,  249,
    0,  249,    0,    0,    0,  249,  249,  249,    0,    0,
    0,    0,    0,  249,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  249,  249,  249,  249,    0,    0,
  249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
  249,  249,  249,  249,  249,  249,  249,  249,  249,    0,
  249,  249,  249,  249,  249,  249,  249,  249,  249,    0,
    0,  249,  249,  249,    0,  249,  249,    0,    0,    0,
    0,  137,    0,    0,    0,  137,  249,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    2,    3,    4,    5,
    6,    0,    0,  249,   10,   11,   12,   13,  202,  168,
    0,  203,    0,    0,    0,  192,   21,   22,    0,    0,
    0,    0,   25,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  623,   29,   30,   31,   32,    0,    0,
   34,   35,  205,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  624,  625,  475,  476,  477,  478,   48,   49,    0,
  543,   52,   53,   54,  543,  543,   57,    0,  543,  543,
  543,  543,  543,    0,  543,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  543,  543,    0,  543,    0,
    0,    0,    0,   72,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  543,  543,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  543,  543,  543,  543,    0,    0,    0,    0,    0,    0,
  545,    0,    0,    0,  545,  545,    0,    0,  545,  545,
  545,  545,  545,    0,  545,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  545,  545,    0,  545,    0,
  137,  137,    0,    0,    0,  137,  137,    0,    0,  137,
  137,  137,  137,  137,  137,    0,  137,    0,    0,    0,
  137,  137,  137,  137,    0,  137,    0,    0,  137,    0,
  545,  545,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  137,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  545,  545,  545,  545,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  137,  137,  137,  137,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  543,  543,  543,  543,  543,  543,
    0,    0,    0,  543,  543,  543,  543,  543,  543,    0,
  543,    0,    0,    0,  543,  543,  543,  543,    0,  543,
    0,  543,  543,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  543,  543,  543,  543,    0,    0,  543,
  543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
  543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
    0,    0,    0,  543,  543,    0,  543,  543,    0,    0,
  543,  543,  543,    0,  543,  543,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  543,    0,    0,    0,  388,
    0,    0,    0,  387,  545,  545,  545,  545,  545,  545,
    0,    0,  543,  545,  545,  545,  545,  545,  545,    0,
  545,    0,    0,    0,  545,  545,  545,  545,    0,  545,
    0,  545,  545,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  545,  545,  545,  545,    0,    0,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
    0,    0,    0,  545,  545,    0,  545,  545,    0,    0,
  545,  545,  545,    0,  545,  545,    0,    0,  537,    0,
    0,    0,  537,  537,    0,  545,  537,  537,  537,  537,
  537,    0,  537,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  545,  537,  537,    0,  537,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  537,  537,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  537,  537,
  537,  537,    0,    0,    0,    0,    0,    0,  540,    0,
    0,    0,  540,  540,    0,    0,  540,  540,  540,  540,
  540,    0,  540,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  540,  540,    0,  540,    0,    1,    2,
    0,    0,    0,    6,    7,    0,    0,   10,   11,   12,
   13,  202,  168,    0,  203,    0,    0,    0,  192,   21,
   22,   23,    0,   24,    0,  384,   26,    0,  540,  540,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  540,  540,
  540,  540,  386,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  389,    0,   52,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  537,  537,  537,  537,  537,  537,    0,    0,
    0,  537,  537,  537,  537,  537,  537,    0,  537,    0,
    0,    0,  537,  537,  537,  537,    0,  537,    0,  537,
  537,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  537,  537,  537,  537,    0,    0,  537,  537,  537,
  537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,  537,  537,  537,  537,  537,    0,    0,
    0,  537,  537,    0,  537,  537,    0,    0,  537,  537,
  537,    0,  537,  537,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  537,    0,    0,    0,  760,  617,    0,
    0,    0,  540,  540,  540,  540,  540,  540,    0,    0,
  537,  540,  540,  540,  540,  540,  540,    0,  540,    0,
    0,    0,  540,  540,  540,  540,    0,  540,    0,  540,
  540,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  540,  540,  540,  540,    0,    0,  540,  540,  540,
  540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
  540,  540,  540,  540,  540,  540,  540,  540,    0,    0,
    0,  540,  540,    0,  540,  540,    0,    0,  540,  540,
  540,    0,  540,  540,    0,    0,  541,    0,    0,    0,
  541,  541,    0,  540,  541,  541,  541,  541,  541,    0,
  541,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  540,  541,  541,    0,  541,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    2,
    0,    0,    0,    6,    0,    0,    0,   10,   11,   12,
   13,  202,  168,    0,  203,    0,  541,  541,  192,   21,
   22,    0,    0,    0,    0,  204,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
    0,    0,    0,    0,    0,  205,  541,  541,  541,  541,
    0,    0,    0,    0,    0,    0,  538,    0,    0,    0,
  538,  538,    0,    0,  538,  538,  538,  538,  538,    0,
  538,    0,    0,    0,   52,   53,   54,    0,    0,    0,
    0,  538,  538,    0,  538,    1,    2,    0,    0,    0,
    6,    7,    0,    0,   10,   11,   12,   13,  202,  168,
    0,  203,    0,    0,    0,  192,   21,   22,    0,    0,
    0,    0,  204,   26,    0,    0,  538,  538,    0,    0,
    0,    0,    0,  410,    0,    0,    0,    0,    0,    0,
    0,    0,  205,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  538,  538,  538,  538,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  412,   52,   53,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  541,  541,  541,  541,  541,  541,    0,    0,    0,  541,
  541,  541,  541,  541,  541,    0,  541,    0,    0,    0,
  541,  541,  541,  541,    0,  541,    0,  541,  541,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  541,
  541,  541,  541,    0,    0,  541,  541,  541,  541,  541,
  541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
  541,  541,  541,  541,  541,  541,    0,    0,    0,  541,
  541,    0,  541,  541,    0,    0,  541,  541,  541,    0,
  541,  541,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  541,    0,    0,    0,    0,  239,    0,    0,    0,
  538,  538,  538,  538,  538,  538,    0,    0,  541,  538,
  538,  538,  538,  538,  538,    0,  538,    0,    0,    0,
  538,  538,  538,  538,    0,  538,    0,  538,  538,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  538,
  538,  538,  538,    0,    0,  538,  538,  538,  538,  538,
  538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
  538,  538,  538,  538,  538,  538,    0,    0,    0,  538,
  538,    0,  538,  538,    0,    0,  538,  538,  538,    0,
  538,  538,    0,    0,  539,    0,    0,    0,  539,  539,
    0,  538,  539,  539,  539,  539,  539,    0,  539,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  538,  539,
  539,    0,  539,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  539,  539,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  539,  539,  539,  539,    0,    0,
    0,    0,    0,    0,  597,    0,    0,    0,  597,  597,
    0,    0,  597,  597,  597,  597,  597,    0,  597,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  597,
  597,    0,  597,  239,  239,    0,    0,    0,  239,  239,
    0,    0,  239,  239,  239,  239,  239,  239,    0,  239,
    0,    0,    0,  239,  239,  239,    0,    0,    0,    0,
  239,  239,    0,    0,  597,  597,    0,    0,    0,    0,
    0,  239,    0,    0,    0,    0,    0,    0,    0,    0,
  239,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  597,  597,  597,  597,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  239,  239,
  239,  239,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  539,  539,
  539,  539,  539,  539,    0,    0,    0,  539,  539,  539,
  539,  539,  539,    0,  539,    0,    0,    0,  539,  539,
  539,  539,    0,  539,    0,  539,  539,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  539,  539,  539,
  539,    0,    0,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,  539,    0,    0,    0,  539,  539,    0,
  539,  539,    0,    0,  539,  539,  539,    0,  539,  539,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  539,
    0,    0,    0,    0,  237,    0,    0,    0,  597,  597,
  597,  597,  597,  597,    0,    0,  539,  597,  597,  597,
  597,  597,  597,    0,  597,    0,    0,    0,  597,  597,
  597,  597,    0,  597,    0,  597,  597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  597,  597,  597,
  597,    0,    0,  597,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,    0,    0,    0,  597,  597,    0,
  597,  597,    0,    0,  597,  597,  597,    0,  597,  597,
    0,    0,  600,    0,    0,    0,  600,  600,    0,  597,
  600,  600,  600,  600,  600,    0,  600,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  597,  600,  600,    0,
  600,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,  600,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,  600,  600,  600,    0,    0,    0,    0,
    0,    0,  590,    0,    0,    0,  590,  590,    0,    0,
  590,  590,  590,  590,  590,    0,  590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  590,  590,    0,
  590,  237,  237,    0,    0,    0,  237,  237,    0,    0,
  237,  237,  237,  237,  237,  237,    0,  237,    0,    0,
    0,  237,  237,  237,    0,    0,    0,    0,  237,  237,
    0,    0,  590,  590,    0,    0,    0,    0,    0,  237,
    0,    0,    0,    0,    0,    0,    0,    0,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  590,  590,  590,  590,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  237,  237,  237,  237,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  600,  600,  600,  600,
  600,  600,    0,    0,    0,  600,  600,  600,  600,  600,
  600,    0,  600,    0,    0,    0,  600,  600,  600,  600,
    0,  600,    0,  600,  600,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  600,  600,  600,  600,    0,
    0,  600,  600,  600,  600,  600,  600,  600,  600,  600,
  600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
  600,  600,    0,    0,    0,  600,  600,    0,  600,  600,
    0,  171,  600,  600,  600,    0,  600,  600,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  600,    0,    0,
    0,    0,    0,    0,    0,    0,  590,  590,  590,  590,
  590,  590,    0,    0,  600,  590,  590,  590,  590,  590,
  590,    0,  590,    0,    0,    0,  590,  590,  590,  590,
    0,  590,    0,  590,  590,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  590,  590,  590,  590,    0,
    0,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,    0,    0,    0,  590,  590,    0,  590,  590,
    0,    0,  590,  590,  590,    0,  590,  590,    0,    0,
  601,    0,    0,    0,  601,  601,    0,  590,  601,  601,
  601,  601,  601,    0,  601,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  590,  601,  601,    0,  601,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    2,    0,
  601,  601,    6,    7,  166,    0,   10,   11,   12,   13,
  244,  168,    0,   16,   17,   18,    0,   20,   21,   22,
   23,    0,   24,    0,  169,   26,    0,    0,    0,  170,
  601,  601,  601,  601,    0,   28,    0,    0,    0,    0,
  598,    0,    0,    0,  598,  598,    0,    0,  598,  598,
  598,  598,  598,    0,  598,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  598,  598,    0,  598,    0,
    0,   50,  528,   52,   53,    0,    0,    0,    0,   58,
   59,   60,   61,   62,  173,   64,   65,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  598,  598,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  598,  598,  598,  598,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  601,  601,  601,  601,  601,  601,
    0,    0,    0,  601,  601,  601,  601,  601,  601,    0,
  601,    0,    0,    0,  601,  601,  601,  601,    0,  601,
    0,  601,  601,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  601,  601,  601,  601,    0,    0,  601,
  601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
  601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
    0,    0,    0,  601,  601,    0,  601,  601,    0,   63,
  601,  601,  601,    0,  601,  601,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  601,    0,    0,    0,    0,
    0,    0,    0,    0,  598,  598,  598,  598,  598,  598,
    0,    0,  601,  598,  598,  598,  598,  598,  598,    0,
  598,    0,    0,    0,  598,  598,  598,  598,    0,  598,
    0,  598,  598,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  598,  598,  598,  598,    0,    0,  598,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
    0,    0,    0,  598,  598,    0,  598,  598,    0,    0,
  598,  598,  598,    0,  598,  598,    0,    0,  599,    0,
    0,    0,  599,  599,    0,  598,  599,  599,  599,  599,
  599,    0,  599,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  598,  599,  599,    0,  599,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,  599,  599,
    6,    9,   12,    0,   15,   18,   21,   24,   27,   30,
    0,   33,   36,   39,    0,   42,   45,   48,  769,    0,
  772,    0,   51,   54,    0,    0,    0,   57,  599,  599,
  599,  599,    0,   60,    0,    0,    0,    0,  549,    0,
    0,    0,  549,  549,    0,    0,  549,  549,  549,  549,
  549,    0,  549,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  549,  549,    0,  549,    0,    0,   66,
   69,   72,   75,    0,    0,    0,    0,   78,   81,   84,
   87,   90,   93,   96,   99,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  549,  549,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  549,  549,
  549,  549,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  599,  599,  599,  599,  599,  599,    0,    0,
    0,  599,  599,  599,  599,  599,  599,    0,  599,    0,
    0,    0,  599,  599,  599,  599,    0,  599,    0,  599,
  599,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  599,  599,  599,  599,    0,    0,  599,  599,  599,
  599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
  599,  599,  599,  599,  599,  599,  599,  599,    0,    0,
    0,  599,  599,    0,  599,  599,    0,   63,  599,  599,
  599,    0,  599,  599,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  599,    0,    0,    0,    0,    0,    0,
    0,    0,  549,  549,  549,  549,  549,  549,    0,    0,
  599,  549,  549,  549,  549,  549,  549,    0,  549,    0,
    0,    0,  549,  549,  549,  549,    0,  549,    0,  549,
  549,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  549,  549,  549,  549,    0,    0,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,    0,    0,
    0,    0,  549,    0,  549,  549,    0,    0,  549,  549,
  549,    0,  549,  549,    0,    0,  550,    0,    0,    0,
  550,  550,    0,  549,  550,  550,  550,  550,  550,    0,
  550,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  549,  550,  550,    0,  550,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,  550,  550,    6,    9,
   12,    0,   15,   18,   21,   24,   27,   30,    0,   33,
   36,   39,    0,   42,   45,   48, 3577,    0, 3580,    0,
   51,   54,    0,    0,    0,   57,  550,  550,  550,  550,
    0,   60,    0,    0,    0,    0,  551,    0,    0,    0,
  551,  551,    0,    0,  551,  551,  551,  551,  551,    0,
  551,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  551,  551,    0,  551,    0,    0,   66,   69,   72,
   75,    0,    0,    0,    0,   78,   81,   84,   87,   90,
   93,   96,   99,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  551,  551,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  551,  551,  551,  551,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  550,  550,  550,  550,  550,  550,    0,    0,    0,  550,
  550,  550,  550,  550,  550,    0,  550,    0,    0,    0,
  550,  550,  550,  550,    0,  550,    0,  550,  550,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  550,
  550,  550,  550,    0,    0,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,    0,    0,    0,    0,
  550,    0,  550,  550,    0,    0,  550,  550,  550,    0,
  550,  550,    0,    0,    0,    0,  518,  518,    0,    0,
    0,  550,    0,    0,    0,    0,    0,    0,    0,    0,
  551,  551,  551,  551,  551,  551,    0,    0,  550,  551,
  551,  551,  551,  551,  551,    0,  551,    0,    0,    0,
  551,  551,  551,  551,    0,  551,    0,  551,  551,    0,
    0,    0,    0,    0,    0,    0,  518,    0,    0,  551,
  551,  551,  551,    0,    0,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,  551,    0,    0,  518,    0,
  551,  518,  551,  551,    0,    0,  551,  551,  551,    0,
  551,  551,    0,  610,    0,    0,    0,  610,  610,    0,
    0,  551,  610,  610,  610,  610,  610,  610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  551,    0,
    0,  610,    0,  610,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  610,    0,  610,  610,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  547,    0,    0,
    0,    0,  547,  610,  610,  547,  610,  547,  547,  547,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  547,  547,    0,  547,    0,    0,    0,    0,
    0,    0,  518,  518,    0,    0,    0,  518,  518,  518,
    0,  518,  518,  518,  518,  518,  518,    0,  518,  518,
  518,    0,  518,  518,  518,    0,    0,  547,  547,  518,
  518,    0,    0,    0,  518,    0,    0,    0,    0,    0,
  518,    0,    0,    0,    0,    0,    0,    0,    0,  518,
    0,    0,    0,    0,    0,    0,    0,  547,  547,  547,
  547,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  518,  518,  518,  518,
  518,    0,    0,    0,  518,  518,  518,  518,  518,  518,
  518,  518,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  610,  610,  610,
  610,  610,  610,    0,    0,    0,  610,  610,  610,  610,
  610,  610,    0,  610,    0,    0,    0,  610,  610,  610,
    0,    0,    0,  114,    0,  610,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  610,  610,  610,  610,
    0,    0,  610,  610,  610,  610,  610,  610,  610,  610,
  610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
  610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
  610,    0,    0,  610,  610,  610,    0,    0,  610,    0,
    0,  547,  547,  547,  547,  547,  547,    0,    0,    0,
  547,  547,  547,  547,  547,  547,    0,  547,    0,    0,
    0,  547,  547,  547,  547,  610,  547,    0,  547,  547,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  547,  547,  547,  547,    0,    0,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,  547,    0,    0,    0,
    0,  547,    0,  547,  547,  548,    0,  547,  547,  547,
  548,  547,  547,  548,    0,  548,  548,  548,    0,    0,
    0,    0,  547,    0,    0,    0,    0,    0,    0,    0,
  548,  548,    0,  548,    0,    0,    0,    0,    0,  547,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  548,  548,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  114,  114,  114,
    0,    0,    0,    0,    0,    0,    0,    0,  114,  114,
  114,    0,    0,    0,    0,  548,  548,  548,  548,    0,
  114,  114,  114,  114,    0,  567,    0,    0,    0,    0,
  567,    0,    0,  567,  114,    0,  567,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  567,  567,    0,  567,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,  114,    0,    0,    0,
  114,  114,    0,  114,  114,  114,  114,  114,  114,  114,
  114,    0,  114,    0,    0,  567,  567,  114,    0,    0,
    0,    0,    0,  114,  114,  114,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  567,  567,  567,  567,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  289,  289,    0,
    0,  289,    0,    0,    0,    0,    0,    0,    0,  548,
  548,  548,  548,  548,  548,    0,  289,    0,  548,  548,
  548,  548,  548,  548,    0,  548,    0,    0,    0,  548,
  548,  548,  548,    0,  548,    0,  548,  548,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  548,  548,
  548,  548,    0,    0,  548,  548,  548,  548,  548,  548,
  548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
  548,  548,  548,  548,  548,    0,    0,    0,    0,  548,
  289,  548,  548,    0,    0,  548,  548,  548,    0,  548,
  548,    0,    0,    0,    0,  115,    0,  115,    0,  115,
  548,    0,    0,    0,    0,    0,    0,    0,    0,  567,
  567,  567,  567,  567,  567,    0,    0,  548,  567,  567,
  567,  567,  567,  567,    0,  567,    0,    0,    0,  567,
  567,  567,  567,    0,  567,    0,  567,  567,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  567,  567,
  567,  567,    0,    0,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,    0,    0,    0,    0,  567,
  159,  567,  567,  575,    0,  567,  567,  567,  575,  567,
  567,  575,    0,    0,  575,    0,    0,    0,    0,    0,
  567,    0,    0,    0,    0,    0,    0,    0,  575,  575,
    0,  575,    0,    0,  289,  289,    0,  567,    0,    0,
  289,    0,    0,  289,  289,  289,  289,  289,  289,    0,
  289,    0,    0,    0,  289,  289,  289,  289,    0,  289,
    0,  289,  289,  575,  575,    0,    0,    0,    0,    0,
    0,    0,  289,    0,    0,    0,    0,    0,    0,  289,
    0,  289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  575,  575,  575,  575,    0,    0,    0,
    0,    0,    0,  573,    0,  289,    0,    0,  573,  289,
  289,  573,    0,    0,  573,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  573,  573,
    0,  573,    0,    0,  115,  115,    0,    0,    0,  115,
  115,    0,    0,  115,  115,  115,  115,  115,  115,    0,
  115,    0,    0,    0,  115,  115,  115,  115,    0,  115,
    0,  115,  115,  573,  573,    0,    0,    0,    0,    0,
    0,    0,  115,    0,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  573,  573,  573,  573,    0,  115,    0,
    0,    0,    0,    0,  115,    0,    0,    0,  115,  115,
  115,  115,  115,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  575,  575,  575,
  575,  575,  575,    0,    0,    0,  575,  575,  575,  575,
  575,  575,    0,  575,    0,    0,  491,  575,  575,  575,
  575,    0,  575,    0,  575,  575,    0,    0,    0,    0,
  491,    0,    0,    0,    0,    0,  575,  575,  575,  575,
    0,    0,  575,  575,  575,  575,  575,  575,  575,  575,
  575,  575,  575,    0,  575,  575,  575,  575,  575,  575,
  575,  575,  575,  491,    0,    0,    0,  575,    0,  575,
  575,    0,    0,  575,  575,  575,    0,  575,  575,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,    0,    0,  491,    0,  573,  573,  573,
  573,  573,  573,    0,    0,  575,  573,  573,  573,  573,
  573,  573,    0,  573,    0,    0,    0,  573,  573,  573,
  573,    0,  573,    0,  573,  573,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,  573,  573,  573,  573,
    0,    0,  573,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,    0,  573,  573,  573,  573,  573,  573,
    0,  573,  573,    0,    0,    0,    0,  573,    0,  573,
  573,  574,    0,  573,  573,  573,  574,  573,  573,  574,
    0,    0,  574,    0,    0,    0,    0,    0,  573,    0,
    0,    0,    0,    0,    0,    0,  574,  574,    0,  574,
    0,    0,    0,    0,    0,  573,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  574,  574,    0,    0,  491,    0,    0,  491,  491,
  491,  491,  491,  491,    0,  491,    0,    0,    0,    0,
  491,  491,  491,    0,  491,    0,  491,  491,    0,    0,
    0,  574,  574,  574,  574,    0,    0,  491,    0,    0,
    0,  556,    0,    0,    0,    0,  556,    0,    0,  556,
    0,    0,  556,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  556,  556,    0,  556,
    0,    0,    3,    0,    0,  491,    6,    9,   12,    0,
   15,   18,   21,   24,   27,   30,    0,   33,   36,   39,
    0,   42,   45,   48, 3577,    0, 3580,    0,   51,   54,
    0,  556,  556,   57,    0,    0,    0,    0,    0,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  556,  556,  556,  556,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,   69,   72,   75,    0,
    0,    0,    0,   78,   81,   84,   87,   90,   93,   96,
   99,    0,    0,    0,    0,  574,  574,  574,  574,  574,
  574,    0,    0,    0,  574,  574,  574,  574,  574,  574,
    0,  574,    0,    0,    0,  574,  574,  574,  574,    0,
  574,    0,  574,  574,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  574,  574,  574,  574,    0,    0,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,    0,  574,  574,  574,  574,  574,  574,    0,  574,
  574,    0,    0,    0,    0,  574,    0,  574,  574,    0,
    0,  574,  574,  574,    0,  574,  574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
    0,    0,    0,    0,    0,  556,  556,  556,  556,  556,
  556,    0,    0,  574,  556,  556,  556,  556,  556,  556,
    0,  556,    0,    0,    0,  556,  556,  556,  556,    0,
  556,    0,  556,  556,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  556,  556,  556,  556,    0,    0,
  556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
  556,    0,  556,  556,  556,  556,  556,  556,    0,  556,
  556,    0,    0,    0,    0,  556,    0,  556,  556,  571,
    0,  556,  556,  556,  571,  556,  556,  571,    0,    0,
  571,    0,    0,    0,    0,    0,  556,    0,    0,    0,
    0,    0,    0,    0,  571,  571,    0,  571,    0,    0,
    0,    0,    0,  556,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  571,
  571,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  571,
  571,  571,  571,    0,    0,    0,    0,    0,    0,  572,
    0,    0,    0,    0,  572,    0,    0,  572,    0,    0,
  572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  572,  572,    0,  572,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  572,
  572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  572,
  572,  572,  572,    0,    0,    0,    0,    0,    0,   44,
    0,    0,    0,    0,   42,    0,   45,    0,   41,   39,
    0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  571,  571,  571,  571,  571,  571,    0,
    0,    0,  571,  571,  571,  571,  571,  571,    0,  571,
    0,    0,    0,  571,  571,  571,  571,    0,  571,    0,
  571,  571,    0,    0,    0,    0,    0,   46,    0,    0,
    0,    0,  571,  571,  571,  571,    0,    0,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,    0,
  571,  571,  571,  571,    0,    0,    0,  571,  571,  238,
    0,    0,  236,    0,    0,  571,  571,    0,    0,  571,
  571,  571,    0,  571,  571,    0,    0,  514,  514,    0,
    0,    0,    0,    0,  571,    0,    0,    0,    0,    0,
    0,    0,    0,  572,  572,  572,  572,  572,  572,    0,
    0,  571,  572,  572,  572,  572,  572,  572,    0,  572,
    0,    0,    0,  572,  572,  572,  572,    0,  572,    0,
  572,  572,    0,    0,    0,    0,    0,  514,    0,    0,
    0,    0,  572,  572,  572,  572,    0,    0,  572,  572,
  572,  572,  572,  572,  572,  572,  572,  572,  572,    0,
  572,  572,  572,  572,    0,    0,    0,  572,  572,  514,
    0,    0,  514,    0,    0,  572,  572,    0,    0,  572,
  572,  572,    0,  572,  572,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  572,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    2,    3,    4,    5,    6,    7,
  166,  572,   10,   11,   12,   13,  244,  168,    0,   16,
   17,   18,    0,   20,   21,   22,   23,    0,   24,    0,
   25,   26,    0,    0,    0,  170,    0,    0,    0,    0,
    0,   28,   29,   30,   31,   32,  552,    0,   34,   35,
  205,  552,    0,    0,  552,    0,    0,  552,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
   38,  552,  552,    0,  552,   48,   49,   50,  172,   52,
   53,   54,    0,    0,   57,   58,   59,   60,   61,   62,
  173,   64,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  514,  514,    0,  552,  552,  514,    0,
  514,   72,  514,  514,  514,  514,  514,  514,    0,  514,
  514,  514,    0,  514,  514,  514,    0,    0,    0,    0,
  514,  514,    0,    0,    0,  514,  552,  552,  552,  552,
    0,  514,    0,    0,    0,    0,  554,    0,    0,    0,
  514,    0,    0,    0,  554,    0,    0,  554,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  554,  554,    0,  554,    0,    0,  514,  514,  514,
  514,  514,    0,    0,    0,  514,  514,  514,  514,  514,
  514,  514,  514,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  554,  554,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  554,  554,  554,  554,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,   42,    0,   45,    0,   41,   39,    0,   40,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  552,  552,  552,  552,  552,  552,    0,    0,    0,  552,
  552,  552,  552,  552,  552,    0,  552,    0,    0,    0,
  552,  552,  552,  552,    0,  552,    0,  552,  552,    0,
    0,    0,    0,    0,   46,    0,    0,    0,    0,  552,
  552,  552,  552,    0,    0,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,    0,  552,  552,    0,
    0,    0,    0,    0,  552,  552,  238,    0,    0,  236,
    0,    0,  552,  552,    0,    0,  552,  552,  552,    0,
  552,  552,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  552,    0,    0,    0,    0,    0,    0,    0,    0,
  554,  554,  554,  554,  554,  554,    0,    0,  552,  554,
  554,  554,  554,  554,  554,    0,  554,    0,    0,    0,
  554,  554,  554,  554,    0,  554,    0,  554,  554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  554,
  554,  554,  554,    0,    0,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,    0,  554,  554,    0,
    0,    0,    0,    0,  554,  554,    0,    0,    0,    0,
    0,    0,  554,  554,    0,    0,  554,  554,  554,    0,
  554,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    2,    3,    4,    5,    6,    7,  166,  554,   10,
   11,   12,   13,  244,  168,    0,   16,   17,   18,    0,
   20,   21,   22,    0,    0,    0,    0,   25,   26,    0,
    0,    0,  170,    0,    0,    0,    0,    0,   28,   29,
   30,   31,   32,   44,    0,   34,   35,  205,   42,    0,
   45,    0,   41,   39,    0,   40,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,   38,    0,    0,
    0,    0,   48,   49,   50,  172,   52,   53,   54,    0,
    0,   57,   58,   59,   60,   61,   62,  173,   64,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   46,    0,    0,    0,    0,    0,    0,   72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  238,  553,    0,  236,    0,    0,    0,
    0,    0,  553,    0,    0,  553,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  553,
  553,    0,  553,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  553,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  553,  553,  553,  553,    0,    0,
    0,    0,    0,    0,    0,    0,  576,    0,    0,    0,
    0,    0,    0,    0,  576,    0,    0,  576,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  576,  576,    0,  576,    0,    0,    1,    2,    3,
    4,    5,    6,    7,  166,    0,   10,   11,   12,   13,
  244,  168,    0,   16,   17,   18,    0,   20,   21,   22,
    0,    0,    0,    0,   25,   26,  576,    0,    0,  170,
    0,    0,    0,    0,    0,   28,   29,   30,   31,   32,
    0,    0,   34,   35,  205,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  576,    0,  576,  576,
    0,    0,    0,   37,   38,    0,    0,    0,    0,   48,
   49,   50,  528,   52,   53,   54,    0,    0,   57,   58,
   59,   60,   61,   62,  173,   64,   65,    0,  553,  553,
  553,  553,  553,  553,    0,  577,    0,  553,  553,  553,
  553,  553,  553,  577,  553,   72,  577,    0,  553,  553,
  553,  553,    0,  553,    0,  553,  553,    0,    0,    0,
  577,  577,    0,  577,    0,    0,    0,  553,  553,  553,
  553,    0,    0,  553,  553,  553,  553,  553,  553,  553,
  553,  553,  553,  553,    0,  553,  553,    0,    0,    0,
    0,    0,  553,  553,    0,  577,    0,    0,    0,    0,
  553,  553,    0,    0,  553,  553,  553,    0,  553,  553,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  553,
    0,    0,    0,    0,    0,  577,    0,  577,  577,    0,
  576,  576,  576,  576,  576,  576,  553,    0,    0,  576,
  576,  576,  576,  576,  576,    0,  576,    0,    0,    0,
  576,  576,  576,  576, 2110,  576,    0,  576,  576, 2110,
    0, 2110,    0, 2110, 2110,    0, 2110,    0,    0,  576,
  576,  576,  576,    0,    0,  576,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,    0,  576,  576,    0,
    0,    0,    0,    0,  576,  576,    0,    0,    0,    0,
    0,    0,  576,  576,    0,    0,  576,  576,  576,    0,
  576,  576, 2110,    0,    0,    0,    0,    0,    0,    0,
    0,  576,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  576,    0,
    0,    0,    0,    0, 2110,    0, 2110, 2110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  577,
  577,  577,  577,  577,  577,    0,    0,    0,  577,  577,
  577,  577,  577,  577,    0,  577,    0,    0,    0,  577,
  577,  577,  577, 2113,  577,    0,  577,  577, 2113,    0,
 2113,    0, 2113, 2113,    0, 2113,    0,    0,  577,  577,
  577,  577,    0,    0,  577,  577,  577,  577,  577,  577,
  577,  577,  577,  577,  577,    0,  577,  577,    0,    0,
    0,    0,    0,    0,  577,    0,    0,    0,    0,    0,
    0,  577,  577,    0,    0,  577,  577,  577,    0,  577,
  577, 2113,    0,    0,    0,    0,    0,    0,    0,    0,
  577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  577,    0,    0,
    0,    0,    0, 2113,    0, 2113, 2113,    0, 2110, 2110,
 2110, 2110, 2110, 2110,    0,    0,    0, 2110, 2110, 2110,
 2110, 2110, 2110,    0, 2110,    0,    0,    0, 2110, 2110,
 2110, 2110,   44, 2110,    0, 2110, 2110,  307,    0,   45,
    0,   41,   39,    0,   40,    0, 2110, 2110, 2110, 2110,
 2110,    0,    0, 2110, 2110, 2110,    0,    0,    0,    0,
  308,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2110, 2110,    0,    0,    0,    0,
 2110, 2110,    0,    0, 2110, 2110, 2110,    0,    0, 2110,
  237,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2110, 2110, 2110,    0,    0,    0,
    0,    0,  238,    0,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2113, 2113, 2113,
 2113, 2113, 2113,    0,    0,    0, 2113, 2113, 2113, 2113,
 2113, 2113,    0, 2113,    0,    0,    0, 2113, 2113, 2113,
 2113,   44, 2113,    0, 2113, 2113,   42,    0,   45,    0,
   41,   39,    0,   40,    0, 2113, 2113, 2113, 2113, 2113,
    0,    0, 2113, 2113, 2113,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2113, 2113,    0,    0,    0,    0, 2113,
 2113,    0,    0, 2113, 2113, 2113,    0,    0, 2113,  237,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2113, 2113, 2113,    0,    0,    0,    0,
    0,  238,    0,  357,  236,    0,    1,    2,    3,    4,
    5,    6,    0,    0,    0,   10,   11,   12,   13,  202,
  168,    0,  203,    0,    0,    0,  192,   21,   22,   23,
   44,   24,    0,   25,   26,   42,    0,   45,  730,   41,
   39,    0,   40,    0,   28,   29,   30,   31,   32,    0,
    0,   34,   35,  205,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,   38,    0,    0,    0,    0,   48,   49,
    0,    0,   52,   53,   54,    0,    0,   57,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
  238,    0,    0,  236,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    2,    3,    4,    5,
    6,    0,    0,    0,   10,   11,   12,   13,  202,  168,
    0,  203,    0,    0,    0,  192,   21,   22,   23,   44,
   24,    0,   25,   26,   42,    0,   45, 1066,   41,   39,
    0,   40,    0,   28,   29,   30,   31,   32,    0,    0,
   34,   35,  205,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,   38,    0,    0,    0,    0,   48,   49,    0,
    0,   52,   53,   54,    0,    0,   57,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,    0,    0,    0,    0,    0,  238,
    0,    0,  236,    0,    1,    2,    3,    4,    5,    6,
    0,    0,    0,   10,   11,   12,   13,  202,  168,    0,
  203,    0,    0,    0,  192,   21,   22,   23,   44,   24,
    0,   25,   26,   42,    0,   45,    0,   41,   39,    0,
   40,    0,   28,   29,   30,   31,   32,    0,    0,   34,
   35,  205,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,   38,    0,    0,    0,    0,   48,   49,    0,    0,
   52,   53,   54,    0,    0,   57,  237,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,    0,    0,    0,    0,    0,  238,    0,
 1068,  236,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    2,    3,    4,    5,    6,    0,
    0,    0,   10,   11,   12,   13,  202,  168,    0,  203,
    0,    0,    0,  192,   21,   22,   23,   44,   24,    0,
   25,   26,   42,    0,   45,    0,   41,   39,    0,   40,
    0,   28,   29,   30,   31,   32,    0,    0,   34,   35,
  205,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
   38,    0,    0,    0,    0,   48,   49,    0,    0,   52,
   53,   54,    0,    0,   57,  237,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,    0,    0,    0,    0,    0,  238,    0,    0,
  236,    0,    1,    2,    3,    4,    5,    6,    0,    0,
    0,   10,   11,   12,   13,  202,  168,    0,  203,    0,
    0,    0,  192,   21,   22,   23,   44,   24,    0,   25,
   26,   42,    0,   45,    0,   41,   39,    0,   40,    0,
   28,   29,   30,   31,   32,    0,    0,   34,   35,  205,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,   38,
    0,    0,    0,    0,   48,   49,    0,    0,   52,   53,
   54,    0,    0,   57,  237,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,    0,    0,    0,    0,    0,  238,    0,    0,  236,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    2,    3,    4,    5,    6,    0,    0,    0,
   10,   11,   12,   13,  202,  168,    0,  203,    0,    0,
    0,  192,   21,   22,  613, 1638,  614,    0,   25,   26,
 1632,    0, 1641,    0, 1629, 1623,    0, 1626,    0,   28,
   29,   30,   31,   32,    0,    0,   34,   35,  205,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,   38,    0,
    0,    0,    0,   48,   49,    0,    0,   52,   53,   54,
    0,    0,   57, 1644,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
    0,    0,    0,    0,    0, 1668,    0,    0, 1635,    0,
    1,    2,    3,    4,    5,    6,    0,    0,    0,   10,
   11,   12,   13,  202,  168,    0,  203,    0,    0,    0,
  192,   21,   22,   23,   44,   24,    0,   25,   26,   42,
    0,   45,  720,   41,   39,    0,   40,    0,   28,   29,
   30,   31,   32,    0,    0,   34,   35,  205,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,   38,    0,    0,
    0,    0,   48,   49,    0,    0,   52,   53,   54,    0,
    0,   57,  237,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,    0,
    0,    0,    0,    0,  238,    0,    0,  236,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1533,
 1536, 1539, 1542, 1545, 1548,    0,    0,    0, 1551, 1554,
 1557, 1560, 1563, 1566,    0, 1569,    0,    0,    0, 1572,
 1575, 1578, 1581,   44, 1584,    0, 1587, 1590,   42,    0,
   45,    0,   41,   39,    0,   40,    0, 1593, 1596, 1599,
 1602, 1605,    0,    0, 1608, 1611, 1614,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1617, 1620,    0,    0,    0,
    0, 1647, 1650,    0,    0, 1653, 1656, 1659,    0,    0,
 1662,  237,    0,  733,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1665,    0,    0,
    0,    0,    0,  238,    0,    0,  236,    0,    1,    2,
    3,    4,    5,    6,    0,    0,    0,   10,   11,   12,
   13,  202,  168,    0,  203,    0,    0,    0,  192,   21,
   22,    0,   44,    0,    0,   25,   26,   42,    0,   45,
    0,   41,   39,    0,   40,    0,   28,   29,   30,   31,
   32,    0,    0,   34,   35,  205,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,   38,    0,    0,    0,    0,
   48,   49,    0,    0,   52,   53,   54,    0,    0,   57,
  237,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
    0,    0,  238,    0,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    2,    3,
    4,    5,    6,    0,    0,    0,   10,   11,   12,   13,
  202,  168,    0,  203,    0,    0,    0,  192,   21,   22,
    0,   44,    0,    0,   25,   26,   42,    0,   45,    0,
   41,   39,    0,   40,    0,   28,   29,   30,   31,   32,
    0,    0,   34,   35,  205,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,   38,    0,    0,    0,    0,   48,
   49,    0,    0,   52,   53,   54,    0,    0,   57,  237,
    0,  775,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
    0,  238,    0,    0,  236,    0,    1,    2,    3,    4,
    5,    6,    0,    0,    0,   10,   11,   12,   13,  202,
  168,    0,  203,    0,    0,    0,  192,   21,   22,    0,
   44,    0,    0,   25,   26,   42,    0,   45,    0,   41,
   39,    0,   40,    0,   28,   29,   30,   31,   32,    0,
    0,   34,   35,  205,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,   38,    0,    0,    0,  601,   48,   49,
    0,    0,   52,   53,   54,    0,    0,   57,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
  238,    0,  899,  236,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    2,    3,    4,    5,
    6,    0,    0,    0,   10,   11,   12,   13,  202,  168,
    0,  203,    0,    0,    0,  192,   21,   22,    0,   44,
    0,    0,   25,   26,   42,    0,   45,    0,   41,   39,
    0,   40,    0,   28,   29,   30,   31,   32,    0,    0,
   34,   35,  205,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,   38,    0,    0,    0,    0,   48,   49,    0,
    0,   52,   53,   54,    0,    0,   57,  237,    0, 1040,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,    0,    0,    0,    0,    0,  238,
    0,    0,  236,    0,    1,    2,    3,    4,    5,    6,
    0,    0,    0,   10,   11,   12,   13,  202,  168,    0,
  203,    0,    0,    0,  192,   21,   22,  604,    0,    0,
    0,   25,   26,    0,    0,  604,    0,    0,  604,    0,
    0,    0,   28,   29,   30,   31,   32,    0,    0,   34,
   35,  205,  604,  604,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,   38,    0,    0,    0,    0,   48,   49,    0,    0,
   52,   53,   54,    0,    0,   57,    0,  604,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,    0,    0,    0,    0,  604,    0,  604,
  604,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    2,    3,    4,    5,    6,    0,
    0,    0,   10,   11,   12,   13,  202,  168,    0,  203,
    0,    0,    0,  192,   21,   22,  559,    0,    0,    0,
   25,   26,    0,    0,  559,    0,    0,  559,    0,    0,
    0,   28,   29,   30,   31,   32,    0,    0,   34,   35,
  205,  559,  559,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
   38,    0,    0,    0,    0,   48,   49,    0,    0,   52,
   53,   54,    0,    0,   57,    0,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,    0,    0,    0,    0,  559,    0,  559,  559,
    0,  604,  604,  604,  604,  604,  604,    0,  560,    0,
  604,  604,  604,  604,  604,  604,  560,  604,    0,  560,
    0,  604,  604,  604,  604,    0,  604,    0,  604,  604,
    0,    0,    0,  560,  560,    0,    0,    0,    0,    0,
  604,  604,  604,  604,    0,    0,  604,  604,  604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  560,    0,
    0,    0,    0,  604,  604,    0,    0,  604,  604,  604,
    0,  604,  604,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  604,    0,    0,    0,    0,    0,  560,    0,
  560,  560,    0,    0,    0,    0,    0,    0,    0,  604,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  559,  559,  559,  559,  559,  559,    0,  561,    0,  559,
  559,  559,  559,  559,  559,  561,  559,    0,  561,    0,
  559,  559,  559,  559,    0,  559,    0,  559,  559,    0,
    0,    0,  561,  561,    0,    0,    0,    0,    0,  559,
  559,  559,  559,    0,    0,  559,  559,  559,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  561,    0,    0,
    0,    0,  559,  559,    0,    0,  559,  559,  559,    0,
  559,  559,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  559,    0,    0,    0,    0,    0,  561,    0,  561,
  561,    0,  560,  560,  560,  560,  560,  560,  559,  562,
    0,  560,  560,  560,  560,  560,  560,  562,  560,    0,
  562,    0,  560,  560,  560,  560,    0,  560,    0,  560,
  560,    0,    0,    0,  562,  562,    0,    0,    0,    0,
    0,  560,  560,  560,  560,    0,    0,  560,  560,  560,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  562,
    0,    0,    0,    0,  560,  560,    0,    0,  560,  560,
  560,    0,  560,  560,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  560,    0,    0,    0,    0,    0,  562,
    0,  562,  562,    0,    0,    0,    0,    0,    0,    0,
  560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  561,  561,  561,  561,  561,  561,    0,  563,    0,
  561,  561,  561,  561,  561,  561,  563,  561,    0,  563,
    0,  561,  561,  561,  561,    0,  561,    0,  561,  561,
    0,    0,    0,  563,  563,    0,    0,    0,    0,    0,
  561,  561,  561,  561,    0,    0,  561,  561,  561,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  563,    0,
    0,    0,    0,  561,  561,    0,    0,  561,  561,  561,
    0,  561,  561,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  561,    0,    0,    0,    0,    0,  563,    0,
  563,  563,    0,  562,  562,  562,  562,  562,  562,  561,
  564,    0,  562,  562,  562,  562,  562,  562,  564,  562,
    0,  564,    0,  562,  562,  562,  562,    0,  562,    0,
  562,  562,    0,    0,    0,  564,  564,    0,    0,    0,
    0,    0,  562,  562,  562,  562,    0,    0,  562,  562,
  562,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  564,    0,    0,    0,    0,  562,  562,    0,    0,  562,
  562,  562,    0,  562,  562,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  562,    0,    0,    0,    0,    0,
  564,    0,  564,  564,    0,    0,    0,    0,    0,    0,
    0,  562,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  563,  563,  563,  563,  563,  563,    0,  565,
    0,  563,  563,  563,  563,  563,  563,  565,  563,    0,
  565,    0,  563,  563,  563,  563,    0,  563,    0,  563,
  563,    0,    0,    0,  565,  565,    0,    0,    0,    0,
    0,  563,  563,  563,  563,    0,    0,  563,  563,  563,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  565,
    0,    0,    0,    0,  563,  563,    0,    0,  563,  563,
  563,    0,  563,  563,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  563,    0,    0,    0,    0,    0,  565,
    0,  565,  565,    0,  564,  564,  564,  564,  564,  564,
  563,  566,    0,  564,  564,  564,  564,  564,  564,  566,
  564,    0,  566,    0,  564,  564,  564,  564,    0,  564,
    0,  564,  564,    0,    0,    0,  566,  566,    0,    0,
    0,    0,    0,  564,  564,  564,  564,    0,    0,  564,
  564,  564,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  566,    0,    0,    0,    0,  564,  564,    0,    0,
  564,  564,  564,    0,  564,  564,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  564,    0,    0,    0,    0,
    0,  566,    0,  566,  566,    0,    0,    0,    0,    0,
    0,    0,  564,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  565,  565,  565,  565,  565,  565,    0,
  569,    0,  565,  565,  565,  565,  565,  565,  569,  565,
    0,  569,    0,  565,  565,  565,  565,    0,  565,    0,
  565,  565,    0,    0,    0,  569,  569,    0,    0,    0,
    0,    0,  565,  565,  565,  565,    0,    0,  565,  565,
  565,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  569,    0,    0,    0,    0,  565,  565,    0,    0,  565,
  565,  565,    0,  565,  565,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  565,    0,    0,    0,    0,    0,
  569,    0,  569,  569,    0,  566,  566,  566,  566,  566,
  566,  565,  570,    0,  566,  566,  566,  566,  566,  566,
  570,  566,    0,  570,    0,  566,  566,  566,  566,    0,
  566,    0,  566,  566,    0,    0,    0,  570,  570,    0,
    0,    0,    0,    0,  566,  566,  566,  566,    0,    0,
  566,  566,  566,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  570,    0,    0,    0,    0,  566,  566,    0,
    0,  566,  566,  566,    0,  566,  566,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  566,    0,    0,    0,
    0,    0,  570,    0,  570,  570,    0,    0,    0,    0,
    0,    0,    0,  566,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  569,  569,  569,  569,  569,  569,
    0,  557,    0,  569,  569,  569,  569,  569,  569,  557,
  569,    0,  557,    0,  569,  569,  569,  569,    0,  569,
    0,  569,  569,    0,    0,    0,  557,  557,    0,    0,
    0,    0,    0,  569,  569,  569,  569,    0,    0,  569,
  569,  569,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  557,    0,    0,    0,    0,  569,  569,    0,    0,
  569,  569,  569,    0,  569,  569,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  569,    0,    0,    0,    0,
    0,  557,    0,  557,  557,    0,  570,  570,  570,  570,
  570,  570,  569,  555,    0,  570,  570,  570,  570,  570,
  570,  555,  570,    0,  555,    0,  570,  570,  570,  570,
    0,  570,    0,  570,  570,    0,    0,    0,  555,  555,
    0,    0,    0,    0,    0,  570,  570,  570,  570,    0,
    0,  570,  570,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  555,    0,    0,    0,    0,  570,  570,
    0,    0,  570,  570,  570,    0,  570,  570,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  570,    0,    0,
    0,    0,    0,  555,    0,  555,  555,    0,    0,    0,
    0,    0,    0,    0,  570,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  557,  557,  557,  557,  557,
  557,    0,  568,    0,  557,  557,  557,  557,  557,  557,
  568,  557,    0,  568,    0,  557,  557,  557,  557,    0,
  557,    0,  557,  557,    0,    0,    0,  568,  568,    0,
    0,    0,    0,    0,  557,  557,  557,  557,    0,    0,
  557,  557,  557,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  568,    0,    0,    0,    0,  557,  557,    0,
    0,  557,  557,  557,    0,  557,  557,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  557,    0,    0,    0,
    0,    0,  568,    0,  568,  568,    0,  555,  555,  555,
  555,  555,  555,  557,  619,    0,  555,  555,  555,  555,
  555,  555,  619,  555,    0,  619,    0,  555,  555,  555,
  555,    0,  555,    0,  555,  555,    0,    0,    0,  619,
  619,    0,    0,    0,    0,    0,  555,  555,  555,  555,
    0,    0,  555,  555,  555,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  619,    0,    0,    0,    0,  555,
  555,    0,    0,  555,  555,  555,    0,  555,  555,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  555,    0,
    0,    0,    0,    0,  619,    0,  619,  619,    0,    0,
    0,    0,    0,    0,    0,  555,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  568,  568,  568,  568,
  568,  568,    0,  620,    0,  568,  568,  568,  568,  568,
  568,  620,  568,    0,  620,    0,  568,  568,  568,  568,
    0,  568,    0,  568,  568,    0,    0,    0,  620,  620,
    0,    0,    0,    0,    0,  568,  568,  568,  568,    0,
    0,  568,  568,  568,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  620,    0,    0,    0,    0,  568,  568,
    0,    0,  568,  568,  568,    0,  568,  568,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  568,    0,    0,
    0,    0,    0,  620,    0,  620,  620,    0,  619,  619,
  619,  619,  619,  619,  568,  558,    0,  619,  619,  619,
  619,  619,  619,  558,  619,    0,  558,    0,  619,  619,
  619,  619,    0,  619,    0,  619,  619,    0,    0,    0,
  558,  558,    0,    0,    0,    0,    0,  619,  619,  619,
  619,    0,    0,  619,  619,  619,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  558,    0,    0,    0,    0,
  619,  619,    0,    0,  619,  619,  619,    0,  619,  619,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
    0,    0,    0,    0,    0,  558,    0,  558,  558,    0,
    0,    0,    0,    0,    0,   44,  619,    0,    0,    0,
   42,    0,   45,    0,   41,   39,    0,   40,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  620,  620,  620,
  620,  620,  620,    0,    0,    0,  620,  620,  620,  620,
  620,  620,    0,  620,    0,    0,    0,  620,  620,  620,
  620,    0,  620,    0,  620,  620,    0,    0,    0,    0,
    0,    0,    0,  237,    0,    0,  620,  620,  620,  620,
    0,    0,  620,  620,  620,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  238,    0,    0,  236,  620,
  620,    0,    0,  620,  620,  620,    0,  620,  620,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  620,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  558,
  558,  558,  558,  558,  558,  620,    0,    0,  558,  558,
  558,  558,  558,  558,    0,  558,    0,    0,    0,  558,
  558,  558,  558,    0,  558,    0,  558,  558,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  558,  558,
  558,  558,    0,    0,  558,  558,  558,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   44,    0,
    0,    0,    0,   42,    0,  316,    0,   41,   39,    0,
   40,  558,  558,    0,    0,  558,  558,  558,    0,  558,
  558,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  558,    0,    0,    0,    0,    0,    0,    0,    0,    1,
    2,    3,    4,    5,    6,    0,    0,  558,   10,   11,
   12,   13,  202,  168,    0,  203,  237,    0,    0,  192,
   21,   22,    0,    0,    0,    0,   25,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,   29,   30,
   31,   32,    0,    0,   34,   35,  205,   44,  238,    0,
    0,  236,   42,    0,   45,    0,   41,   39,    0,   40,
    0,    0,    0,    0,    0,   37,   38,    0,    0,    0,
    0,   48,   49,    0,    0,   52,   53,   54,    0,    0,
   57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  319,    0,   72,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  238,    0,    0,
  236,    0,    0,    0,    0,    0,    0,   44,    0,    0,
    0,    0,   42,    0,   45,    0,   41,   39,    0,   40,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    1,    2,    3,    4,    5,    6,    0,    0,
    0,   10,   11,   12,   13,  202,  168,    0,  203,    0,
    0,    0,  192,   21,   22,  237,    0,    0,    0,   25,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,   29,   30,   31,   32,    0,    0,   34,   35,  205,
    0,    0,    0,    0,    0,    0,  622,  238,    0,    0,
  236,    0,    0,    0,  622,    0,    0,    0,   37,   38,
    0,    0,    0,    0,   48,   49,    0,    0,   52,   53,
   54,  622,  622,   57,    0,    0,    0,    0,    0,    0,
    0,    1,    2,    3,    4,    5,    6,    0,    0,    0,
   10,   11,   12,   13,  202,  168,    0,  203,    0,    0,
   72,  192,   21,   22,    0,    0,  622,    0,   25,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
   29,   30,   31,   32,    0,    0,   34,   35,  205,    0,
    0,    0,    0,    0,    0,    0,  622,    0,  622,  622,
    0,    0,    0,    0,    0,    0,    0,   37,   38,    0,
    0,    0,    0,   48,   49,    0,    0,   52,   53,   54,
    0,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    2,    3,    4,  867,    6,    0,    0,   72,
   10,   11,   12,   13,  202,  168,    0,  203,    0,    0,
    0,  192,   21,   22,    0,    0,   44,    0,   25,   26,
    0,   42,    0,   45,    0,   41,   39,    0,   40,   28,
   29,   30,   31,   32,    0,    0,   34,   35,  205,    0,
    0,    0,   47,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,   38,    0,
    0,    0,    0,   48,   49,    0,    0,   52,   53,   54,
    0,    0,   57,    0,    0,    0,    0,    0,    0,    0,
  622,  622,  622,  622,  622,  622,    0,    0,    0,  622,
  622,  622,  622,  622,  622,    0,  622,    0,    0,   72,
  622,  622,  622,  622,    0,  622,   73,  622,  622,   43,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  622,
  622,  622,  622,    0,    0,  622,  622,  622,    0,    0,
    0,    0,    0,    0,  546,    0,    0,    0,  546,  546,
    0,    0,    0,  546,  546,  546,  546,  546,  546,    0,
    0,    0,  622,  622,    0,    0,  622,  622,  622,    0,
  622,  622,  546,    0,  546,    0,    0,    0,    0,    0,
    0,  622,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  622,    0,
    0,    0,    0,    0,  546,  546,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,   42,    0,   45,    0,   41,   39,    0,   40,    0,
    0,    0,    0,    0,    0,  546,    0,  546,    0,    0,
    0,    0,   47,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    4,    5,    0,    0,    0,    9,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
    0,    0,    0,   23,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
   30,   31,   32,   33,    0,   34,   35,   36,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,   43,
    0,    0,    0,    0,    0,    0,   37,   38,    0,    0,
    0,    0,   48,   49,    0,    0,    0,    0,   54,   55,
   56,   57,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   67,    0,    0,    0,
    0,    0,   68,   69,   70,   71,  529,    0,   72,    0,
    0,    0,    0,    0,    0,    0,    0,  529,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  546,  546,    0,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,    0,    0,  546,  546,  546,  546,
  546,  546,    3,    4,    5,    0,  529,    0,    9,  529,
    0,    0,    0,    0,    0,    0,  278,    0,    0,   19,
  273,  275,    0,  281,    0,  271,  269,  280,  270,    0,
  272,    0,    0,    0,    0,    0,  546,    0,    0,   29,
   30,   31,   32,   33,  279,   34,   35,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,   38,    0,    0,
    0,    0,   48,   49,  282,    0,    0,  274,   54,   55,
   56,   57,    0,    0,    0,    0,    0,    0,    0,    0,
  605,   66,    0,    0,  605,    0,   67,  605,    0,  605,
  605,    0,   68,   69,   70,   71,    0,  276,   72,  277,
    0,  605,  605,    0,  605,    0,  605,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  529,  529,  529,  529,  529,  605,  605,    0,  529,
  529,  529,  529,  529,  529,    0,  529,    0,    0,    0,
  529,  529,  529,    0,    0,    0,    0,  529,  529,    0,
    0,    0,    0,    0,    0,    0,    0,  605,  605,  529,
  529,  529,  529,    0,    0,  529,  529,  529,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  529,  529,    0,    0,  529,  529,  529,    0,
    0,  529,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    2,  243,    0,    0,    6,    7,  166,  529,   10,
   11,   12,   13,  244,  168,    0,   16,   17,   18,    0,
   20,   21,   22,    0,    0,    0,    0,  169,   26,    0,
    0,    0,  170,    0,    0,    0,    0,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  245,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  283,  284,   50,  172,   52,   53,    0,    0,
    0,    0,   58,   59,   60,   61,   62,  173,   64,   65,
    0,    0,    0,  605,    0,  605,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  605,  605,
  605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
  605,  605,  605,  605,  605,  605,    0,    0,  605,  605,
  605,  605,  278,    0,    0,    0,  273,  275,    0,  281,
  605,  271,  269,  280,  270,    0,  272,    0,    0,    0,
    0,  605,    0,    0,    0,    0,    0,    0,    0,    0,
  279,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  574,    0,    0,  274,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  115,  115,    0,  115,    0,  115,  115,  115,  115,  115,
  115,    0,    0,  276,    0,  277,    0,    0,    0,    0,
    0,    0,  115,    0,  115,    0,  115,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  115,    0,    0,  115,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  115,  115,  115,    0,
    0,    0,    0,    0,    0,  115,  115,    0,  115,    0,
  115,  115,  115,  115,  115,  115,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,    0,  115,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    2,  243,  115,
    0,    6,  115,    0,    0,   10,   11,   12,   13,  202,
  168,    0,  203,    0,    0,    0,  192,   21,   22,    0,
    0,    0,    0,  169,   26,    0,    0,    0,    0,    0,
    0,  115,  115,  115,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  245,  246,  247,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  283,  284,
  115,  115,   52,   53,    0,  115,  115,    0,    0,  115,
  115,  115,  115,  115,  115,    0,  115,    0,    0,    0,
  115,  115,  115,  115,    0,  115,    0,    0,  115,    0,
    0,    0,    0,  171,    0,    0,    0,    0,  115,    0,
    0,    0,    0,    0,    0,    0,    0,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,    0,    0,  115,  115,  115,  115,  115,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  115,  115,    0,    0,    0,
  115,  115,    0,    0,  115,  115,  115,  115,  115,  115,
    0,  115,    0,    0,    0,  115,  115,  115,  115,    0,
  115,    0,    0,  115,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  115,    0,    0,    0,    0,    0,    0,
    0,    0,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,    0,  115,    0,  531,  115,
  115,  115,  115,  115,  531,  531,  531,  531,  531,  514,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  531,    0,  531,    0,  531,    0,    0,    0,    0,    1,
    2,    0,    0,    0,    6,    7,  166,    0,   10,   11,
   12,   13,  244,   15,  514,   16,   17,   18,    0,   20,
   21,   22,  531,    0,    0,  531,  169,   26,    0,    0,
    0,  170,    0,    0,    0,    0,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,  364,    0,  115,    0,
  115,  115,  115,    0,  115,  531,  531,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  115,
    0,  115,    0,   50,  438,   52,   53,    0,    0,    0,
    0,   58,   59,   60,   61,   62,  173,   64,   65,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  148,    0,  148,
  148,  148,    0,  148,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  514,  514,    0,  148,    0,
  148,    0,  514,    0,  514,  514,  514,  514,  514,  514,
    0,  514,  514,  514,    0,  514,  514,  514,    0,    0,
    0,    0,  514,  514,    0,    0,    0,  514,    0,    0,
  148,    0,    0,  514,    0,    0,    0,    0,  137,  137,
    0,    0,  514,  137,  137,    0,    0,  137,  137,  137,
  137,  137,  137,    0,  137,    0,    0,    0,  137,  137,
  137,  137,  148,  137,    0,    0,  137,    0,    0,  514,
  514,  514,  514,    0,    0,    0,    0,  514,  514,  514,
  514,  514,  514,  514,  514,  137,  531,  531,  531,  531,
  531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,    0,  531,  531,  531,  531,  531,    0,  531,
    0,    0,  137,  137,  137,  137,  137,  115,  115,    0,
    0,    0,  115,  115,    0,    0,  115,  115,  115,  115,
  115,  115,    0,  115,    0,    0,    0,  115,  115,  115,
  115,    0,  115,    0,  115,  115,  137,    0,  137,  137,
  137,    0,  137,    0,    0,  115,    0,    0,    0,    0,
    0,    0,  115,    0,  115,    0,    0,  137,    0,  137,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,    0,    0,    0,  115,  115,    0,
    0,  115,  115,  115,  115,  115,  148,  148,    0,  137,
    0,  148,  148,    0,    0,  148,  148,  148,  148,  148,
  148,    0,  148,    0,    0,    0,  148,  148,  148,  148,
    0,  148,    0,    0,  148,  757,    0,  761,    0,  757,
  757,  137,  757,    0,    0,    0,    0,    0,    0,    0,
    0,  148,    0,  148,    0,    0,  765,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  148,    0,    0,    0,    0,    0,  148,  148,    0,    0,
  148,  148,  148,  148,  148,    0,    0,    0,  757,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  757,    0,  757,  239,  239,    0,    0,  239,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  239,    0,  239,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  239,  137,  137,    0,    0,    0,
  137,  137,    0,    0,  137,  137,  137,  137,  137,  137,
    0,  137,    0,    0,    0,  137,  137,  137,  137,    0,
  137,    0,  138,  137,    0,    0,  239,  237,  237,    0,
    0,  237,    0,    0,    0,    0,    0,    0,    0,    0,
  137,    0,  137,    0,    0,    0,  237,    0,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
    0,    0,    0,    0,    0,    0,  137,    0,    0,  137,
  137,  137,  137,  137,  757,  757,    0,    0,  237,  757,
  757,    0,    0,  757,  757,  757,  757,  757,  757,    0,
  757,    0,    0,    0,  757,  757,  757,  757,    0,  757,
    0,  757,  757,    0,    0,    0,    0,  240,  240,    0,
  237,  240,  757,    0,    0,    0,    0,    0,    0,    0,
    0,  757,    0,    0,    0,    0,  240,    0,  240,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  757,  757,    0,    0,    0,    0,    0,    0,  757,  757,
  757,  757,  757,    0,    0,    0,    0,    0,  240,    0,
  239,  239,    0,    0,    0,  239,  239,    0,    0,  239,
  239,  239,  239,  239,  239,    0,  239,    0,    0,    0,
  239,  239,  239,  239,    0,  239,    0,  239,  239,    0,
  240,  238,  238,    0,    0,  238,    0,    0,  239,    0,
    0,    0,    0,    0,    0,  239,    0,  239,    0,    0,
  238,    0,  238,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  239,    0,    0,    0,  239,  239,  239,  239,    0,
    0,    0,  238,    0,  237,  237,    0,    0,    0,  237,
  237,    0,    0,  237,  237,  237,  237,  237,  237,    0,
  237,    0,    0,    0,  237,  237,  237,  237,    0,  237,
    0,  237,  237,    0,  238,  243,  243,    0,    0,  243,
    0,    0,  237,    0,    0,    0,    0,    0,    0,  237,
    0,  237,    0,    0,  243,    0,  243,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  237,    0,    0,    0,  237,
  237,  237,  237,    0,  240,  240,  243,    0,    0,  240,
  240,    0,    0,  240,  240,  240,  240,  240,  240,    0,
  240,    0,    0,    0,  240,  240,  240,  240,    0,  240,
    0,  240,  240,    0,    0,  249,  249,    0,  243,  249,
    0,    0,  240,    0,    0,    0,    0,    0,    0,  240,
    0,  240,    0,    0,  249,    0,  249,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  240,    0,    0,    0,  240,
  240,  240,  240,    0,    0,    0,  249,    0,  238,  238,
    0,    0,    0,  238,  238,    0,    0,  238,  238,  238,
  238,  238,  238,    0,  238,    0,    0,    0,  238,  238,
  238,  238,    0,  238,    0,  238,  238,    0,  249,  241,
    0,    0,  241,    0,    0,    0,  238,    0,    0,    0,
    0,    0,    0,  238,    0,  238,    0,  241,    0,  241,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  238,
    0,    0,    0,  238,  238,  238,  238,    0,    0,    0,
    0,    0,  243,  243,    0,    0,    0,  243,  243,    0,
    0,  243,  243,  243,  243,  243,  243,    0,  243,    0,
    0,    0,  243,  243,  243,  243,    0,  243,    0,  243,
  243,  241,    0,  287,  287,    0,    0,  287,    0,    0,
  243,    0,    0,    0,    0,    0,    0,  243,    0,  243,
    0,  287,  287,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  243,    0,    0,    0,  243,  243,  243,
  243,    0,  249,  249,  287,    0,    0,  249,  249,    0,
    0,  249,  249,  249,  249,  249,  249,    0,  249,    0,
    0,    0,  249,  249,  249,    0,    0,    0,    0,    0,
  249,    0,    0,    0,    0,    0,  287,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  249,    0,  249,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  249,    0,    0,    0,  249,  249,  249,
  249,    0,    0,    0,    0,  241,  241,    0,    0,    0,
  241,  241,    0,    0,  241,  241,  241,  241,  241,  241,
    0,  241,    0,    0,    0,  241,  241,  241,  241,    0,
  241,    0,  241,  241,    0,  115,  115,    0,    0,    0,
  115,  115,  115,  115,  115,  115,    0,    0,    0,    0,
  241,    0,  241,    0,    0,    0,    0,  115,    0,  115,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  241,    0,    0,    0,
  241,  241,  241,  241,    0,    0,    0,    0,    0,  115,
  287,  287,  115,    0,    0,  287,  287,    0,    0,  287,
  287,  287,  287,  287,  287,    0,  287,    0,    0,    0,
  287,  287,  287,  287,    0,  287,    0,  287,  287,    0,
    0,  115,  115,  115,  115,  115,    0,  115,  287,  115,
  115,    0,  115,  115,  115,  287,    0,  287,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  115,    0,
  115,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  287,    0,    0,    0,  287,  287, 3301, 3301,    0,
 3301,    0, 3301, 3301,    0, 3301, 3301, 3301,  115,    0,
  115,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3301,    0, 3301,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  115,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3301,    0, 3301, 3301,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  483,  485,    0,  488,    0,  481,  479,    0,  480,  491,
  482,    0,    0,    0, 3301,    0,    0,    0,    0,    0,
    0,    0,  490,    0,  487,    0,  492,    0,    0,    0,
    0,    0,    0,    0,    0,  483,  485,    0,  488,  847,
  481,  479,  115,  480,  491,  482,    0,    0,    0,    0,
    0,    0,    0,  115,  489,    0,    0,  484,    0,  487,
    0,  492,    0,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  486,    0,  489,
    0,    0,  484,    0,  483,  485,    0,  488,  856,  481,
  479,    0,  480,  491,  482,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  487,    0,
  492,    0,  486,    0,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  115,    0,    0,    0,    0,  102,  489,    0,
    0,  484,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,    0,    0,    0,    0,
    0,  486,    0,    0,    0, 3301,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3301, 3301, 3301, 3301, 3301,
 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301,
 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  483,  485,    0,  488,    0,  481,  479,    0,  480,  491,
  482,    0,    0,    0,    0,    0,    0,    0,  454,    0,
    0,    0,    0,    0,  487,    0,  492,    0,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478,    0,  454,  489,    0,  874,  484,    0,    0,
    0,    0,    0,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  486,    0,    0,
    0,    0,  483,  485,    0,  488,    0,  481,  479,  619,
  480,  491,  482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  454,    0,    0,    0,  487,    0,  492,    0,
    0,    0,  455,  456,  457,  458,  459,  460,  461,  462,
  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  489,  483,  485,  484,
  488,  888,  481,  479,    0,  480,  491,  482,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  487,    0,  492,    0,    0,    0,    0,    0,  486,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  489,    0,    0,  484,  483,  485,    0,  488,  896,
  481,  479,    0,  480,  491,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  487,
    0,  492,    0,    0,  486,    0,    0,    0,    0,  483,
  485,    0,  488,  898,  481,  479,    0,  480,  491,  482,
    0,    0,    0,    0,    0,    0,    0,    0,  454,  489,
    0,    0,  484,  487,    0,  492,    0,    0,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  486,  489,    0,    0,  484,  483,  485,    0,
  488,  928,  481,  479,    0,  480,  491,  482,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  487,    0,  492,    0,    0,  486,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  454,  489,    0,    0,  484,    0,    0,    0,    0,    0,
  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  486,  483,  485,    0,  488,    0,
  481,  479,    0,  480,  491,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  454,    0,    0,    0,  487,
    0,  492,    0,    0,    0,  455,  456,  457,  458,  459,
  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  489,
    0,  941,  484,    0,  483,  485,    0,  488,    0,  481,
  479,    0,  480,  491,  482,    0,    0,    0,    0,    0,
    0,    0,    0,  454,    0,    0,    0,    0,  487,    0,
  492,    0,  486,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  454,  489,    0,
  947,  484,    0,    0,    0,    0,    0,  455,  456,  457,
  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
  478,  486,    0,    0,    0,  483,  485,    0,  488,    0,
  481,  479,    0,  480,  491,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  454,  950,    0,    0,  487,
    0,  492,    0,    0,    0,  455,  456,  457,  458,  459,
  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
  470,  471,  472,  473,  474,  475,  476,  477,  478,  489,
  483,  485,  484,  488,    0,  481,  479,    0,  480,  491,
  482,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  487,    0,  492,    0,    0,    0,
    0,    0,  486,    0,  483,  485,    0,  488, 1007,  481,
  479,    0,  480,  491,  482,    0,    0,    0,    0,    0,
    0,    0,    0,  454,  489,    0,  866,  484,  487,    0,
  492,    0,    0,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  486,  489,    0,
    0,  484,  483,  485,    0,  488, 1013,  481,  479,    0,
  480,  491,  482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  454,    0,    0,    0,  487,    0,  492,    0,
    0,  486,  455,  456,  457,  458,  459,  460,  461,  462,
  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  489,    0,    0,  484,
  483,  485,    0,  488, 1115,  481,  479,    0,  480,  491,
  482,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  487,    0,  492,    0,    0,  486,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  454,  489,    0,    0,  484,    0,    0,
    0,    0,    0,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  486,    0,  483,
  485,    0,  488,    0,  481,  479,    0,  480,  491,  482,
    0,    0,    0,    0,    0,    0,    0,    0,  454,    0,
    0,    0,    0,  487,    0,  492,    0,    0,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  454,  489,    0, 1124,  484,    0,    0,    0,
    0,    0,  455,  456,  457,  458,  459,  460,  461,  462,
  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
  473,  474,  475,  476,  477,  478,  486,    0,    0,    0,
  483,  485,    0,  488, 1162,  481,  479,    0,  480,  491,
  482,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  454,    0,    0,    0,  487,    0,  492,    0,    0,    0,
  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
  475,  476,  477,  478,  489,    0,    0,  484,  483,  485,
    0,  488, 1163,  481,  479,    0,  480,  491,  482,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  454,    0,
    0,    0,  487,    0,  492,    0,    0,  486,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  489,    0,    0,  484,  483,  485,    0,  488,
 1164,  481,  479,    0,  480,  491,  482,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  487,    0,  492,    0,    0,  486,    0,    0,    0,    0,
  483,  485,    0,  488, 1165,  481,  479,    0,  480,  491,
  482,    0,    0,    0,    0,    0,    0,  454,    0,    0,
  489,    0,    0,  484,  487,    0,  492,  455,  456,  457,
  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
  478,    0,    0,  486,  489,  483,  485,  484,  488,    0,
  481,  479,    0,  480,  491,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  487,
    0,  492,    0,    0,    0,    0,    0,  486,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  454,  489,
    0, 1221,  484,    0,    0,    0,    0,    0,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478,  486,    0,    0,    0,  483,  485,    0,  488,
    0,  481,  479,    0,  480,  491,  482,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  454, 1226,    0,    0,
  487,    0,  492,    0,    0,    0,  455,  456,  457,  458,
  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
  469,  470,  471,  472,  473,  474,  475,  476,  477,  478,
  489,    0,    0,  484,    0, 1422, 1428,    0, 1440,    0,
 1416, 1410, 1437, 1413, 1446, 1419,    0,    0,    0,    0,
    0,    0,    0,    0,  454,    0,    0,    0,    0, 1434,
    0, 1449,    0,  486,  455,  456,  457,  458,  459,  460,
  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
  471,  472,  473,  474,  475,  476,  477,  478,  454, 1443,
    0,    0, 1425,    0,    0,    0,    0,    0,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  478, 1431,  483,  485,    0,  488,    0,  481,  479,
    0,  480,  491,  482,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  454,    0,    0,    0,  487,    0,  492,
    0,    0,    0,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,  473,  474,  475,  476,  477,  478,  489,    0,    0,
  484, 2873, 2879,    0, 2888,    0, 2867, 2861,    0, 2864,
 2894, 2870,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2885,    0, 2897,    0,    0,
  486,    0,    0,    0,    0, 3176, 3182,    0, 3191,    0,
 3170, 3164,    0, 3167, 3197, 3173,    0,    0,    0,    0,
    0,    0,    0,    0,  454, 2891,    0,    0, 2876, 3188,
    0, 3200,    0,    0,  455,  456,  457,  458,  459,  460,
  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
  471,  472,  473,  474,  475,  476,  477,  478, 2882, 3194,
    0,    0, 3179, 3308, 3308,    0, 3324,    0, 3308, 3308,
    0, 3308,    0, 3308,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1335,    0,    0,    0, 3308,    0, 3332,
    0,    0, 3185, 1338, 1341, 1344, 1347, 1350, 1353, 1356,
 1359, 1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386,
 1389, 1392, 1395, 1398, 1401, 1404, 1407, 3328,    0, 3308,
 3308, 3339, 3339,    0, 3355,    0, 3339, 3339,    0, 3339,
    0, 3339,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3339,    0, 3363,    0,    0,
 3308,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  454,    0,    0,    0, 3359,    0, 3339, 3339,    0,
    0,  455,  456,  457,  458,  459,  460,  461,  462,  463,
  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
  474,  475,  476,  477,  478,    0,    0,    0, 3339,    0,
 3370, 3370,    0, 3386,    0, 3370, 3370,    0, 3370,    0,
 3370,    0,    0,    0,    0,    0,    0,    0,    0, 2786,
    0,    0,    0,    0, 3370,    0, 3394,    0,    0, 2789,
 2792, 2795, 2798, 2801, 2804, 2807, 2810, 2813, 2816, 2819,
 2822, 2825, 2828, 2831, 2834, 2837, 2840, 2843, 2846, 2849,
 2852, 2855, 2858, 3089, 3390,    0, 3370, 3370,    0,   63,
    0,    0,    0, 3092, 3095, 3098, 3101, 3104, 3107, 3110,
 3113, 3116, 3119, 3122, 3125, 3128, 3131, 3134, 3137, 3140,
 3143, 3146, 3149, 3152, 3155, 3158, 3161, 3370,    0,    0,
    0,  483,  485,  657,  488,    0,  481,  479,    0,  480,
  491,  482,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3305,    0,    0,    0,  487,    0,  492,    0,    0,
    0, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308,
 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3308, 3312,
 3316,    0, 3308, 3308, 3320,  489,    0,    0,  484,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3336,
    0,    0,    0,    0,    0,    0,    0,    0,  486, 3339,
 3339, 3339, 3339, 3339, 3339, 3339, 3339, 3339, 3339, 3339,
 3339, 3339, 3339, 3339, 3339, 3339, 3339, 3343, 3347,    0,
 3339, 3339, 3351,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  171,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    0,    0,
    6,    9,   12,    0,   15,   18,   21,   24,   27,   30,
    0,   33,   36,   39,    0,   42,   45,   48,    0,    0,
    0,  365,   51,   54,    0,    0,    0,   57, 3367,    0,
    0,    0,    0,   60,    0,    0,    0,    0, 3370, 3370,
 3370, 3370, 3370, 3370, 3370, 3370, 3370, 3370, 3370, 3370,
 3370, 3370, 3370, 3370, 3370, 3370, 3374, 3378,    0, 3370,
 3370, 3382,    0,    0,    0,    0,    0,    0,    0,   66,
   69,   72,   75,    0,    0,    0,  171,   78,   81,   84,
   87,   90,   93,   96,   99,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  365,    0,    0,    0,    0,    0,    0,    0,  454,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  455,
  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
  476,  477,    1,    2,    0,    0,    0,    6,    7,  166,
  437,   10,   11,   12,   13,  244,   15,  171,   16,   17,
   18,    0,   20,   21,   22,    0,    0,    0,    0,  169,
   26,    0,    0,    0,  170,    0,    0,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,  365,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   50,  438,   52,   53,
    0,    0,    0,    0,   58,   59,   60,   61,   62,   63,
   64,   65,    1,    2,    0,    0,    0,    6,    7,  166,
    0,   10,   11,   12,   13,  244,   15,  262,   16,   17,
   18,    0,   20,   21,   22,    0,    0,    0,    0,  169,
   26,    0,    0,    0,  170,    0,    0,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,  262,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   50,   51,   52,   53,
    0,    0,    0,    0,   58,   59,   60,   61,   62,  173,
   64,   65,    0,    1,    2,    0,    0,    0,    6,    7,
  166,    0,   10,   11,   12,   13,  244,   15,  171,   16,
   17,   18,    0,   20,   21,   22,    0,    0,    0,    0,
  169,   26,    0,    0,    0,  170,    0,    0,    0,    0,
    0,   28,    0,    0,    0,    0,    0,    0,  171,    0,
  364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   50,  438,   52,
   53,    0,    0,    0,    0,   58,   59,   60,   61,   62,
  173,   64,   65,  262,  262,    0,    0,    0,  262,  262,
  262,    0,  262,  262,  262,  262,  262,  262,    0,  262,
  262,  262,    0,  262,  262,  262,    0,    0,    0,    0,
  262,  262,    0,    0,    0,  262,    0,    0,    0,    0,
    0,  262,    0,    0,    0,    0,    0,    0,  171,    0,
  262,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  262,  262,
  262,    0,   63,    0,    0,  262,  262,  262,  262,  262,
  262,  262,  262,    0,    1,    2,    0,    0,    0,    6,
    7,  166,    0,   10,   11,   12,   13,  244,  168,    0,
   16,   17,   18,    0,   20,   21,   22,    0,    0,    0,
    0,  169,   26,    0,    1,    2,  170,    0,    0,    6,
    7,  166,   28,   10,   11,   12,   13,  244,   15,    0,
   16,   17,   18,    0,   20,   21,   22,    0,    0,    0,
    0,  169,   26,    0,    0,    0,  170,    0,    0,    0,
    0,    0,   28,    0,    0,    0,    0,    0,   50,  172,
   52,   53,  123,    0,    0,    0,   58,   59,   60,   61,
   62,  173,   64,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,  438,
   52,   53,  440,    0,    0,    0,   58,   59,   60,   61,
   62,  173,   64,   65,    1,    2,    0,    0,    0,    6,
    7,  166,    0,   10,   11,   12,   13,  244,  168,    0,
  841,   17,   18,    0,   20,  842,   22,    0,    0,    0,
    0,  169,   26,    0,    0,    0,  170,    0,    0,    3,
    0,    0,   28,    6,    9,   12,    0,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    0,
   57,    0,    0,    0,    0,    0,   60,    0,   50,  172,
   52,   53,   63,    0,    0,    0,   58,   59,   60,   61,
   62,  173,   64,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,   69,   72,   75,  905,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    3,
    0,    0,    0,    6,    9,  108,    0,   15,   18,   21,
   24,  111,  114,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,  117,   54,    0,  356,  360,
  120,    0,    0,  364,  368,  372,   60,  376,  380,  384,
  388,  392,  396,    0,  400,  404,  408,    0,  412,  416,
  420,    0,    0,    0,    0,  424,  428,    0,    0,    0,
  432,    0,    0,    0,    0,    0,  436,    0,    0,    0,
    0,    0,   66,  126,   72,   75, 1020,    0,    0,    0,
   78,   81,   84,   87,   90,  129,   96,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  444,  448,  452,  456, 1061,    0,    0,    0,
  460,  464,  468,  472,  476,  480,  484,  488,    0,    3,
    0,    0,    0,    6,    9,   12,    0,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    0,
   57,    0,  821,  825,    0,    0,   60,  829,  833,  837,
    0,  841,  845,  849,  853,  857,  861,    0,  865,  869,
  873,    0,  877,  881,  885,    0,    0,    0,    0,  889,
  893,    0,    0,    0,  897,    0,    0,    0,    0,    0,
  901,    0,   66,   69,   72,   75, 1020,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  909,  913,  917,  921,
   63,    0,    0,    0,  925,  929,  933,  937,  941,  945,
  949,  953,  957,  960,    0,    0,    0,  963,  966,  969,
    0,  972,  975,  978,  981,  984,  987,    0,  990,  993,
  996,    0,  999, 1002, 1005,    0,    0,    0,    0, 1008,
 1011,    0, 1061, 1061, 1014,    0,    0, 1061, 1061, 1061,
 1017, 1061, 1061, 1061, 1061, 1061, 1061,    0, 1061, 1061,
 1061,    0, 1061, 1061, 1061,    0,    0,    0,    0, 1061,
 1061,    0,    0,    0, 1061,    0,    0,    0,    0,    0,
 1061,    0,    0,    0,    0,    0, 1023, 1026, 1029, 1032,
   63,    0,    0,    0, 1035, 1038, 1041, 1044, 1047, 1050,
 1053, 1056,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1061, 1061, 1061, 1061,
 1817,    0,    0,    0, 1061, 1061, 1061, 1061, 1061, 1061,
 1061, 1061,  957,  960,    0,    0,    0,  963,  966,  969,
    0,  972,  975,  978,  981,  984, 1089,    0,  990,  993,
  996,    0,  999, 1002, 1005,    0,    0,    0,    0, 1008,
 1011,    0,    0,    0, 1014,    0,    0,    3,    0,    0,
 1017,    6,    9,   12,    0,   15,   18,   21,   24,   27,
   30,    0,   33,   36,   39,    0,   42,   45,   48,    0,
    0,    0,    0,   51,   54,    0,    0,    0,   57,    0,
    0,    0,    0,    0,   60,    0, 1023, 1092, 1029, 1032,
  440,    0,    0,    0, 1035, 1038, 1041, 1044, 1047, 1050,
 1053, 1056,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,   69,   72,   75,   63,    0,    0,    0,   78,   81,
   84,   87,   90,   93,   96,   99,    0,    3,    0,    0,
    0,    6,    9,  108,    0,   15,   18,   21,   24, 1527,
  114,    0,   33,   36,   39,    0,   42,   45,   48,    0,
    0,    0,    0,   51,   54,    0, 1754, 1757,  120,    0,
    0, 1760, 1763, 1766,   60, 1769, 1772, 1775, 1778, 1781,
 1784,    0, 1787, 1790, 1793,    0, 1796, 1799, 1802,    0,
    0,    0,    0, 1805, 1808,    0,    0,    0, 1811,    0,
    0,    0,    0,    0, 1814,    0,    0,    0,    0,    0,
   66, 1530,   72,   75,  440,    0,    0,    0,   78,   81,
   84,   87,   90,  129,   96,   99,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1820, 1823, 1826, 1829,   63,    0,    0,    0, 1832, 1835,
 1838, 1841, 1844, 1847, 1850, 1853,  356,  360,    0,    0,
    0,  364,  368,  372,    0,  376,  380,  384,  388,  392,
  396,    0,  400,  404,  408,    0,  412,  416,  420,    0,
    0,    0,    0,  424,  428,    0,    0,    0,  432,    0,
    0,    3,    0,    0,  436,    6,    9,   12,    0,   15,
   18,   21,   24,   27,   30,    0,   33,   36,   39,    0,
   42,   45,   48,    0,    0,    0,    0,   51,   54,    0,
    0,    0,   57,    0,    0,    0,    0,    0,   60,    0,
  444, 1883,  452,  456,   63,    0,    0,    0,  460,  464,
  468,  472,  476,  480,  484,  488,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,   69,   72,   75,   63,    0,
    0,    0,   78,   81,   84,   87,   90,   93,   96,   99,
  356,  360,    0,    0,    0,  364,  368,  372,    0,  376,
  380,  384,  388,  392, 1980,    0,  400,  404,  408,    0,
  412,  416,  420,    0,    0,    0,    0,  424,  428,    0,
    0,    3,  432,    0,    0,    6,    9,   12,  436,   15,
   18,   21,   24,   27,   30,    0,   33,   36,   39,    0,
   42,   45,   48,    0,    0,    0,    0,   51,   54,    0,
    0,    0,   57,    0,    0,    0,    0,    0,   60,    0,
    0,    0,    0,    0,  444, 1984,  452,  456,   63,    0,
    0,    0,  460,  464,  468,  472,  476,  480,  484,  488,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,   69,   72,   75,   63,    0,
    0,    0,   78,   81,   84,   87,   90,   93,   96,   99,
    0,    3,    0,    0,    0,    6,    9,   12,    0,   15,
   18,   21,   24,   27,   30,    0,   33,   36,   39,    0,
   42,   45,   48,    0,    0,    0,    0,   51,   54,    0,
    0,    0,   57,    0,    0,    3,    0,    0,   60,    6,
    9,   12,    0,   15,   18,   21,   24,   27,   30,    0,
   33,   36,   39,    0,   42,   45,   48,    0,    0,    0,
    0,   51,   54,    0,    0,    0,   57,    0,    0,    0,
    0,    0,   60,    0,   66,   69,   72,   75,   63,    0,
    0,    0,   78,   81,   84,   87,   90,   93,   96,   99,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   69,
   72,   75,   63,    0,    0,    0,   78,   81,   84,   87,
   90,   93,   96,   99,    0,    3,    0,    0,    0,    6,
    9,   12,    0,   15,   18,   21,   24,   27,   30,    0,
   33,   36,   39,    0,   42,   45,   48,    0,    0,    0,
    0,   51,   54,    0,    0,    3,   57,    0,    0,    6,
    9,   12,   60,   15,   18,   21,   24,   27,   30,    0,
   33,   36,   39,    0,   42,   45,   48,    0,    0,    0,
    0,   51,   54,    0,    0,    0,   57,    0,    0,    0,
    0,    0,   60,    0,    0,    0,    0,    0,   66,   69,
   72,   75,   63,    0,    0,    0,   78,   81,   84,   87,
   90,   93,   96,   99,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   69,
   72,   75,   63,    0,    0,    0,   78,   81,   84,   87,
   90,   93,   96,   99,    0,    3,    0,    0,    0,    6,
    9,   12,    0,   15,   18,   21,   24,   27,   30,    0,
   33,   36,   39,    0,   42,   45,   48,    0,    0,    0,
    0,   51,   54,    0,    0,    0,   57,    0,    0,    3,
    0,    0,   60,    6,    9,   12,    0,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    0,
   57,    0,    0,    0,    0,    0,   60,    0,   66,   69,
   72,   75,   63,    0,    0,    0,   78,   81,   84,   87,
   90,   93,   96,   99,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,   69,   72,   75,   63,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    3,
    0,    0,    0,    6,    9,   12,    0,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    3,
   57,    0,    0,    6,    9,   12,   60,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    0,
   57,    0,    0,    0,    0,    0,   60,    0,    0,    0,
    0,    0,   66,   69,   72,   75,    0,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,   69,   72,   75,    0,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    3,
    0,    0,    0,    6,    9,   12,    0,   15,   18,   21,
   24,   27,   30,    0,   33,   36,   39,    0,   42,   45,
   48,    0,    0,    0,    0,   51,   54,    0,    0,    0,
   57,    0,    0,    3,    0,    0,   60,    6,    9,   12,
    0,   15,   18,   21,   24,   27,   30,    0,   33,   36,
   39,    0,   42,   45,   48,    0,    0,    0,    0,   51,
   54,    0,    0,    0,   57,    0,    0,    0,    0,    0,
   60,    0,   66,   69,   72,   75,    0,    0,    0,    0,
   78,   81,   84,   87,   90,   93,   96,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,   69,   72,   75,
    0,    0,    0,    0,   78,   81,   84,   87,   90,   93,
   96,   99,
};
static int yycheck[] = {                                     580,
    0,   19,   90,  138,   36,  612,   76,   76,    8,    9,
   15,  115,  831,  115,   14,   15,   16,    8,   18,   15,
   20,   21,  110,  149,   41,   25,    0,  513,   40,   41,
   45,   44,   44,   40,  143,  828,   36,  830,   25,   42,
  126,  132,  146,   76,  146,   58,  115,  138,   61,   61,
    8,   51,   44,    0,  257,   42,   51,   72,   73,   70,
   76,   38,   41,   63,   40,   42,   14,   42,   16,   17,
   70,   61,   93,   73,  144,  145,   76,  146,  187,   91,
   80,   76,  115,   40,   41,   44,   38,   44,   44,   40,
  126,   40,  180,   51,   94,   58,  184,  108,   94,  115,
  126,  524,   61,   38,   61,   38,  414,   42,  108,   42,
  123,  327,   46,  146,   20,  115,  123,   44,   73,   61,
  115,   40,   41,  913,   59,  257,   59,  126,   38,   44,
  146,  263,   42,   44,   91,   58,  704,  126,  213,  562,
  215,    0,   44,  143,  144,  145,  146,  147,   59,  149,
  330,  146,   38,  327,  145,  263,   42,  115,   58,   59,
  123,   61,  259,  982,   44,  984,  985,  167,   44,  169,
  263,  257,   38,  205,  174,   38,   42,  177,   38,   42,
  973,  181,   42,  327,  364,  185,  144,  980,  188,  147,
  190,  191,  192,   44,  291,  143,  196,  965,  966,   93,
  123,  206,  202,   44,  204,  205,  206,   40,   41,   40,
  206,   40,  212,   40,  214,   61,   44,  204,   40,  167,
   61,  257,    0,  238,   44,  333,   44,  185,  228,   40,
  188,  231,  232,  233,  234,  326,  257,  372,  331,  187,
  257,  258,  317,   61,  244,  262,   40,  195, 1038,  125,
  262,  559,  126,   44,  257,  258,   40,   44,  257,  262,
  277,   61, 1081,   40,   41, 1084,  125,  280,   44,  282,
   40,   44,   59,  280,  277,  282,   61,   42,  304,  370,
  327,  372,  257,  238,  263,  285,  192,  302,  295,  302,
  290,  291,   70,   61, 1087,   73,  244,  878,   44,  368,
   44,  316,   44,   40,  374,  262,  375, 1075,  257,   44,
   40,  263,  302,   61,  449,  304,  328,  334,  393,  295,
  307,  321,  334,  335,  324,  304,  321,  327,   46,  324,
  108,  334,  327,  333,  347,  368,  328,  337, 1157,  286,
  287,  288,  375,  358,  321,  831,  295,  302,  452,  917,
  452,  426,  328,  332,  331,  446,  335,  445,  449,  375,
  302,  352, 1155,  257,  364,   61,  324,   40,  368,  328,
  439,   40,  328,  368,  374,  375,  295,  334,  335,  379,
  375, 1200,  382,  452,  384,  295,  321,   61,  321,  337,
  125,  325,  379,  351,  352,  353,  331,  352,  331,   59,
  526,  328,  302,  358,  419,  540,  439,  412,    0,  414,
  368,  321,  412,  328,  414,  524,  412,  327,  414,  452,
  280,  331,  282,  439,  382, 1032,  328,  286,  287,  288,
  304,  284,  536,   59,  536,  321,  452,  437,  438,  439,
   40,  327,  295,  438,  439,  331,  537,  347,  328,  540,
  228,   40,  452,  562, 1035,  321,  302,  452,  321,  529,
   40,  321,  295, 1044,  295,  331,  295,  536,  295,  263,
  545,  331,   44,  295,   61,  475,  476,  328,   70,  475,
  476,   73,   42,  494,  295,   77,   58,  328,   40,   61,
   40,  491,  257,  258,  494,  491,  982,  262,  984,  985,
  328, 1082,  302,  536,  363,  364,  328,  582,  328,  584,
  328,  295,  277,  513,  284,   44,  108,  328,  295,   59,
  536,   40,  257,  123,  524,  295,  263,  262,  528,  529,
  530,   59,  550,   37,  302,  535,  536,  328,   42,  535,
   40,  536,   46,   47,  328,  280,  331,  282,  683,  334,
  335,  123,  328,   42,  302,  328,  556,  327,  295,  559,
   59,   61,  347,   40,    0,  295,   37,  567,   58,  334,
  528,   42,   43,  573,   45,   46,   47,  577,  578,  347,
  580,  581,  328,  123,  328,   41,  328,  587,  588,   59,
  577,  259,  683,  123,  263, 1081,  125, 1178, 1084,  347,
  548,  549,  337,  261, 1185, 1186,  302,  325,  326,  678,
   40,  680,  681,  348,   41,  630,  123,   40,    0,   40,
   44,  709,  580,  291,  284,   38,  295,   63,   41,   42,
   44,   40, 1213,  123,   70,  295,  228,   73, 1219,   44,
  640,  641,  629,  643,  640,  678,  641,  680,  681,   42,
   40,  347,   61,  125, 1235,  687,   42,  331,  284,   40,
  334,  335,    0,   58,  284,  123,   40, 1248,   44,  295,
    8, 1157,  108,  347,   40,  262,  284,  677,  678,  115,
  680,  681,   91,  678,  284,  680,  681,  687,   70,  284,
   44,   73,  692,  125,   76,  295,   91,  257,  258,  699,
  295,  125,  262,   40,  704,  660,  295,  327,  280,  709,
  282,  125,  123,   33, 1200,  295,  494,  277,   38,  327,
  125,   40,   42,   43,  724,   45,  108,  327,  257,   58,
  302,   59,   70,  262,  822,   73,  811,  812,  257,  258,
  280,  741,  282,  262,  692,  295,  704,  334,  335,  125,
  257,  280,   44,  282,  284,   59,  284,  257,  277,   59,
  760,   59,  144,  145,  760,  295,   58,  295,  257,  258,
  108,   41,   44,  262,  334,  347,   61,  777,  778,   59,
   44,  777,  778,  783,   40,  284,   59,   59,  277,   59,
  790,  331,  228,  263,   58,  295,  295,  815,  798,    0,
  165,   63,   44,  259,  804,  810,  126,    8,  337,   38,
  810,   40,   59,   42,  810,  334,  335,  330,  295,  348,
  123,  325,  326,  841,  842,  295,  284,  827,  327,  829,
   44,  123,  259,  257,  834,   36,   38,  295,  262,  839,
   42,  841,  842,  257,   45,  334,  228,   48,  262,   41,
   51,  364,    0,  115,  325,  326,  280,  301,  282,  123,
  995,  809,   63,  284,  257,  839,  280,   59,  282,   70,
  263,  284,   73,  821,  295,   76,  887,  888,  878,   80,
   59,  257,  295,  125,  895,  896,  262,  887,  888,   44,
  228,  363,  364,  841,  284,  895,  896,  333,  284,   38,
  336,  901,  494,   42,  280,  295,  282,  108,  321,  295,
  284,  125,  930,  337,  115,  933,   58,  917,  284,  259,
  878,  295,   70,  337,  348,   73,  280,  270,  282,  295,
   58,  363,  364,  951,  348,   41,   44,  892,  893,  894,
  955,  956,  143,  144,  145,  146,  147,  284,  149,   91,
  964,   44,  966,   59,  257,   91,  284,   93,  295,  917,
  108,  337,  331,   91,  284,  257,  258,  295,  123,  969,
  262,  123,  348,  174,  339,  340,  177,  262,  347,  979,
  284,   91,  302,  303,  185,  277,  284,  188,  280,  190,
  282,  295,  374,  257,  258,  196,  261,  295,  262,  327,
  263,  257,  258,  943,  205, 1005,  262,  263,   27,  329,
  330,  284,  377,  277,   33,  257,  280,  302,  282, 1019,
  262,  277,  295,  327,   38,   61,   40,  228,   42,  327,
  231,  232,  233,  234,  263, 1035,   40,  284,  280,  295,
  282,  242,  334, 1058, 1044,  365,  331,  123,  295,  334,
  335,  280, 1052,  282,  327,  257,   44,   61,  494, 1077,
 1074,  839,  347,   44, 1064,  330,  396,  125,  123,  399,
  334,  333, 1072, 1073,  336,   58,  125, 1035,  334,  335,
  228,  125, 1082,   58,  285,  295, 1044,   91,   61,  290,
  291, 1182,  321, 1093,  284,  337, 1096,  116,   44,  364,
 1111,   58,  331,   58,   59,  295,  348,   44,  123,  887,
  888, 1111,  494,  132, 1132,  316,   40,  895,  896,  138,
  321,  123,  141,  324, 1082,  280,  327,  282,  280,  325,
  282, 1211,  333,   44,   91,   61,  337,  125, 1229, 1079,
 1080,  280,  123,  282, 1144, 1145, 1146,  529, 1148,  123,
  351,  352,  353, 1244,   40,  284,  494, 1112, 1113, 1114,
  125, 1241,   40,  364,  257,  258,  295,  368,   44,  262,
  263, 1251, 1146,  374,  375,   61,   40, 1195, 1178,  125,
  381,  382,  321,  384,  277, 1185, 1186,   41,  125,   41,
   44, 1202, 1203, 1204,   41,  396,   44,   44,  399,   44,
   59,   44, 1202, 1203, 1204,   91, 1206, 1079, 1080,    0,
   58,  230,  123, 1213,   59,   58,   59,    8,  419, 1219,
 1178,   38,  280,   40,  282,   42, 1226, 1185, 1186,  284,
   44,  280, 1206,  282,   41, 1235, 1236,  438,  439,  831,
  295,  334,  286,  287,  288,   59,  383,  839, 1248,  125,
  588,  452, 1226,  257,  258, 1213,   44,   93,  262,  263,
   51, 1219, 1236,  400,  123,  280,  331,  282,    0,  257,
  284,   59,   63,  277,  262,  123,    8, 1235,  280,   70,
  282,  295,   73,  258,  327,   76,  423,  262,  263,  262,
 1248,  295,  280,  494,  282,  887,  888,   44,  273,  280,
   40,  282,  277,  895,  896,  363,  364,  321,  262,  263,
  325,  257,   59,  327,  363,  364,  262,  108,   40,   51,
  257,  286,  287,  288,  115,  262,  123,  528,  529,  302,
  334,  335,  272, 1111,  280,  536,  282,  272,   70,   61,
   44,   73,  125,  280,   76,  282,  494,    0,   58,  337,
 1229,  488,   44,  144,  145,  146,  147,  272,  331,  334,
  348,  334,  335,   40,   41, 1244,  567,   44, 1146,  280,
  360,  282,  573,   91,  347,   41,  108,  578,   44,  580,
  581,  257,   59,  115,   61,   41,  262,  588,   44,  331,
  982,  337,  984,  985,  185,   58,  597,  188,  363,  364,
  337,  123,  348,  839,  280,   41,  282,   41,   44,   59,
   44,  348,  144,  145,   91,  147,   58,   70,   38,  123,
   73,  280,   42,  282, 1202, 1203, 1204,   58, 1206,  630,
  449,  123,  280,  284,  282,   58,   41,  228,   61,   44,
  641,   40,  174,   40,  295,   59,  123,   61, 1226,  257,
  258,  887,  888,  185,  262,  108,  188,  839, 1236,  895,
  896,  337,  115,  280,   91,  282,   63,  284,   91,  277,
   58,   41,  348,  123,   44,   51,  327,  678,  295,  680,
  681,  261,   40,  280,  335,  282,  687,  295,  280, 1081,
  282,  692, 1084,  630,   91,  514,  228,  280,   44,  282,
  123,  839,   93,  704,  321,  887,  888,   41,  709,  123,
   44,   93,   41,  895,  896,   44,  325,  257,  258, 1111,
   93,  540,  262,  263,   58,   59,  334,  327,  325,   59,
  321,  333,  185,  324,   59,   41,  327,  277,   44,  257,
  258,  284,  333,   41,  262,  336,   44,   58,  258,  887,
  888,   40,  262,  263, 1146,  295,  272,  895,  896,  277,
  351,  352,  353,  273,   41, 1157,   41,  277,   38,   44,
   40,  147,   42,   59,   59,  228,  280,  368,  282,   44,
  363,  364,  783,  374,  375,  280,  263,  282,  280,  321,
  282,  382,  324,  123,  334,  335,   59,   37,  123,  286,
  287,  288,   42,   43,   41,   45,   46,   47, 1200,   40,
 1202, 1203, 1204,  257, 1206,  259,  334,  261,  125,  351,
  352,  353,   40,   40,  334,  302,  827,  304,  829,  284,
  280,   41,  282,  834, 1226,  288,  368,  280,  839,  282,
  295,    0,  374,  280, 1236,  282,   63,  438,  439,    8,
  382,  328,   41,  125,   41,  332,   59,  280,  335,  282,
  123,  452,  286,  287,  288,   44,  280, 1005,  282,   41,
   40,  324,  327,   37,   91, 1111,  125,  878,   42,   43,
   41,   45,   46,   47,  125,   40,  887,  888,  302,  261,
  123,  839,   51,   63,  895,  896,   59,   59,  295,   59,
  901,   61,   58,  494,   61,  328,   41,  439,   63,   44,
 1146,   70,  913,   40,   73,  368,  917,   76,   40,   40,
  123,   91,  284,   40,   93,   40,  323,  324,   44, 1111,
   41,  328,  280,  295,  282,   41,   91,  528,  529,  887,
  888,  123,   58,   59,  123,  536,   63,  895,  896,  108,
  280,   41,  282,   44,   44,  280,  115,  282,   40,   40,
  123,   40,  494,  123, 1146,  327, 1202, 1203, 1204,  284,
 1206,   41,  302, 1111,   91,  351,  352,  353,  979,   41,
  284,   63,   40,  123,  341,  144,  145,  257,  147,  580,
 1226,  295,   40,   37,   38,  325,  528,  529,   42,   43,
 1236,   45,   46,   47, 1005,   63,  382,  123, 1146,   91,
  280,   61,  282,   59,  284,  363,  364,  280, 1019,  282,
 1202, 1203, 1204,  327, 1206,  295,  185,   41,   40,  188,
   44,   58,  123,   91, 1035,   41,  262, 1038,   44,  302,
   61,  494,   61, 1044, 1226,  286,  287,  288,  580,   40,
  641,  321,   41,   40, 1236,   44,  588,  327,   61,  262,
  879,  331,  325,   59, 1202, 1203, 1204,   58, 1206,  228,
   61, 1072, 1073,  313,   59,   40,   63,  280,  295,  282,
  320, 1082,  125,  536,   41,  325,  326,  678, 1226,  680,
  681,   41, 1093,   41,   40, 1096,  123,   58, 1236,  302,
   91,  280,  262,  282,   91,  331,  323,  324,  334,  335,
 1111,  328,   41,  704,  567,   44,   40,  280,   41,  282,
  280,  347,  282,   41,   41,  295,   33,   44,  286,  287,
  288,   38,  123,   40,   58,   42,   43,   61,   45,  284,
  295,   44,  302, 1144, 1145, 1146,  678,   41,   41,  313,
  295,   44,  528,  323,  324,   58,   59,   40,  328,  125,
   59,  325,  326, 1111,  280,  324,  282,   91,  323,  324,
   41,  331,  704,  328,  334,  335,   41, 1178,  295,   44,
   63,   40,  327,   41, 1185, 1186,   44,  347,  641,  280,
   41,  282,  351,  352,  353,   40,   61,  125, 1146,  123,
   44, 1202, 1203, 1204,  580, 1206,  323,  324,   91,  368,
   40,  328, 1213,  295,   58,  374,  123,   41, 1219,  126,
  123,  284,   41,  382,  123, 1226,   91,   41,  681,   41,
  257,  258,  295,   58, 1235, 1236,  263,  295,   40,   40,
   40,  323,  324,  286,  287,  288,  328, 1248,  839,  302,
  277,   59,  284,   61, 1202, 1203, 1204,   41, 1206,   40,
  123,   63,   41,  295,  327,  323,  324,   40,  295,  313,
  328,   58,  316,  317,  318,  319,  320,   40, 1226,  123,
   40,  325,  326,  327,   59,   41,   61,  878, 1236,   91,
   41, 1110,   44,   37,   38,  327,  887,  888,   42,   43,
   40,   45,   46,   47,  895,  896,   58,  839,  295,   59,
   91,  257,  258,  123,   59,  123,  262,   93, 1137,    0,
  266,  267,  268,  269,  270,  271,  917,  273,  704,  284,
   59,  277,  278,  279,  327,  494,  323,  324,  284,  285,
  295,  328,  123,   40,   93,   93,  878,  125,  123,  295,
   94,  123,  259,  260,  261,  887,  888,   59,  286,  287,
  288,  125, 1181,  895,  896,   59,   63,  125,   59,  528,
  529,  123,  327,  280,   41,  282,  257,  280,  123,  282,
  124,  280,  284,  282,   59,  917,  839,  333,  334,  296,
  297,  298,  299,  295,   91,  302,  303,  304,  892,  893,
  894,  266,  267,  268,  269,  270,  271,   59,  273, 1228,
   59, 1230,  295,  278,  279,   59,  323,  324,  257,  284,
  285,  580,  329,  330, 1243,  327,    8,   41,  335,  123,
 1249,  338,  123,   44,  887,  888,  280, 1256,  282,  304,
  323,  324,  895,  896, 1035,  328,  123,  280,  123,  282,
   44,  284,   41, 1044,   36,   44,   41,   40,  365,  125,
   40,  257,  295,   45,   58,   59,   44,  332,  333,   58,
   59,   44,  280, 1005,  282,   41,  257,  258,  259,  260,
  261,  262,   44,   63,   40,  266,  267,  268,  269,  270,
  271, 1082,  273,  295,  302,  284,  277,  278,  279,  280,
  257,  282,  878, 1035,  285,  280,  295,  282,  286,  287,
  288,   91, 1044,  284,  295,  296,  297,  298,  299,  356,
 1111,  323,  324,  304,  295,  284,  328,  302,  280,  123,
  282,  259,  327,   59,  123,  280,  295,  282,  327,  257,
  258,  917,  323,  324,  262,  704,  257,  258,   40,   40,
 1082,  262,  333,  334,  335, 1146,  327,  338,  276,  277,
   59,   91,  144,  145,  146,  147,  277,  257,  327,  313,
   40,   63,  316,  317,  318,  319,  320,  321,   40, 1111,
  295,  325,  326,  327,  257,  328,  280, 1178,  282,  280,
   91,  282,  174,   63, 1185, 1186,   91,   40,  295,   91,
   40,   63,   44,  185,   93,  280,  188,  282,  190,  295,
   44, 1202, 1203, 1204, 1146, 1206,  334,  259, 1112, 1113,
 1114,   91, 1213,  334,  259,  331,  323,  324, 1219,   91,
   40,  328,  273,  274,  275, 1226,  277,   42,   40,  273,
  274,  275,  257,  277, 1235, 1236, 1178,  262,  331,  231,
  232,  233,  234, 1185, 1186,  331,   40, 1248, 1111, 1035,
  242,   42,   33,  123,  295,  280,   40,  282, 1044,   42,
 1202, 1203, 1204,   44, 1206,   93,   93,   41,  259,   63,
  839, 1213,  266,  267,  268,  269,  280, 1219,  282,  259,
   37,   38,  284, 1146, 1226,   42,   43,  295,   45,   46,
   47,  285,  328, 1235, 1236,   42, 1082,   91,  290,  291,
  344,  123,   40,   59,  331,  295, 1248,  334,  335,  878,
   59,   41,  337,  280,   93,  282,   44,  284,  887,  888,
  347,   61,   42,  348,  316,   61,  895,  896,  295,  321,
  328,  328,  328,  323,  324,  327,   40,   94,  328, 1202,
 1203, 1204,  123, 1206,   26,  126,   41,   40,  917,   44,
  985,   44,  115, 1005,   58,   59,  635,   61,  235,  351,
  352,  353, 1116, 1226,   59,   58,   61,  124,   61,  567,
   37,  798,  364, 1236, 1071,   42,   43, 1141,   45,   46,
   47,   -1,  374,  375,   -1,   58,   59,   91,   61,  381,
  382,   40, 1178,  295,   -1,   -1,   91,    0,   91, 1185,
 1186,   -1,    5,   -1,  396,   -1,    9,  399,   40,   58,
   59,   14,   61,   -1,   40,  295,   19,   40,   91,  123,
   -1,  323,  324,  295,   -1,   -1,  328, 1213,   -1,   -1,
  123,   63,   -1, 1219,   -1,   58,   -1,   63,   61,   -1,
   43,   -1,   91,  323,  324,   -1,  438,  439,  328, 1235,
  123,  323,  324,   -1,   57,   -1,  328,   -1,   -1,   91,
  452,   -1, 1248,   -1,   -1,   91, 1035,   70,   91,  280,
   73,  282,   -1,  284,  123, 1044,  257,  258,  259,  260,
  261,  262,   -1,   -1,  295,  266,  267,  268,  269,  270,
  271,  280,  273,  282,   42,  284,  277,  278,  279,   -1,
  123,  295,   -1,  284,  285,  108,  295,   40,   41,   -1,
   -1,   44,  115, 1082,   -1,  296,  297,  298,  299,   -1,
   40,  302,  303,  304,   -1,   -1,   59,   -1,   61,  323,
  324,   -1,   -1,   -1,  328,   40,  528,  529,   58,   -1,
   -1,   61, 1111,  146,  536,   -1,   40,   41,  329,  330,
   44,   -1,  333,  334,  335,   -1,  313,  338,   63,  316,
  317,  318,  319,  320,  167,   59,   -1,   61,  325,  326,
  327,   91,  280,   -1,  282,  567,  284, 1146,  126,   -1,
   -1,   -1,   58,   59,  365,   61,   91,  295,  580,  581,
  123,   -1,  195,   -1,  197,  257,  588,  259,  260,  261,
   -1,   -1,   -1,  123,   -1,  597,   -1,  257,  258, 1178,
   -1,   -1,  262,   37,   38,   91, 1185, 1186,   42,   43,
   -1,   45,   46,   47,   -1,  228,   -1,  277,   -1,  123,
   -1,   -1,   40, 1202, 1203, 1204,   -1, 1206,  630,   -1,
  243,  244,   -1,   -1, 1213,   -1,  313,  123,   -1,  641,
 1219,  318,  319,  320,   -1,   63,   -1, 1226,  325,  326,
  327,   -1,   59,  295,   61,   -1, 1235, 1236,   -1,  295,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1248,
  257,  258,   -1,   91,  334,  262,  678,  337,  680,  681,
   40,  323,  324,   -1,   -1,  687,  328,  323,  324,   -1,
  277,   40,  328,   -1,   40,   -1,   -1,  310,   -1,  257,
  258,   -1,  704,   63,  262,   -1,   -1,   -1,  266,  267,
  268,  269,  270,  271,   63,  273,  123,   63,   -1,  277,
  278,  279,    0,   -1,   -1,   -1,  284,  285,  341,  342,
   -1,   91,   -1,  346,  347,   -1,   14,  295,   16,   17,
   40,   41,   91,   -1,   44,   91,  304,  334,  257,  258,
  257,  258,  365,  262,  263,  262,   -1,   -1,   58,   59,
   33,   61,   -1,   -1,  377,   -1,  379,   -1,  277,   -1,
  277,   44,   -1,   51,   -1,  333,  334,  335,   -1,   -1,
  295,  783,  395,  257,  258,   -1,  295,   -1,  262,  263,
   -1,   91,   70,   -1,   -1,   73,   37,  304,   76,   -1,
   -1,   42,   43,  277,   45,   46,   47,   -1,  323,  324,
   -1,   -1,   -1,  328,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  329,  123,  437,  334,   -1,  334,   -1,   -1,
  108,   -1,  834,   -1,   -1,   -1,   -1,  115,   -1,  452,
   -1,   -1,   -1,  257,  258,   -1,    0,   -1,  262,   -1,
  123,   -1,   61,  126,    8,  262,   -1,   -1,   -1,   -1,
  334,   -1,   -1,  277,   -1,  143,  144,  145,  146,   -1,
   -1,   -1,   -1,  280,   -1,  282,  878,  295,   -1,  313,
   -1,  494,  316,  317,  318,  319,  320,   -1,   -1,  167,
  304,  325,  326,  327,   -1,  302,   -1,   51,   -1,  901,
   -1,   -1,   -1,  181,   -1,  323,  324,   40,   -1,  187,
  328,  913,   -1,   40,  123,  917,   70,  195,   -1,   73,
  334,   -1,   76,  536,  331,   -1,   -1,  334,  335,   -1,
   63,   -1,   -1,   -1,   61,  295,   -1,  550,   -1,   -1,
  347,   -1,  257,  258,   -1,   -1,  295,  262,   40,  295,
  228,   -1,   -1,   -1,  108,  568,   -1,   40,   91,   -1,
   -1,  115,  277,  323,  324,   -1,  244,   -1,  328,   -1,
   -1,   63,   -1,   -1,  323,  324,   -1,  323,  324,  328,
   63,   -1,  328,   -1,  257,  258,  259,  260,  261,  262,
   -1,  145,  146,  266,  267,  268,  269,  270,  271,   91,
  273,   -1,   -1, 1005,  277,  278,  279,   -1,   91,  622,
   -1,  284,  285,   -1,   -1,   -1,   -1, 1019,   40,  334,
   -1,   -1,  635,  296,  297,  298,  299,  257,  258,  302,
  303,  304,  262, 1035,  647,   -1, 1038,   -1,   -1,   -1,
   -1,   63, 1044,  321,   40,   -1,  324,  277,   -1,  327,
  257,  258,   -1,  262,   -1,  262,  329,  330,   -1,  337,
  333,  334,  335,   -1,   -1,  338,   40,   63,   -1,   91,
  277,  280,  313,  282,  228,  316,  317,  318,  319,  320,
 1082,   -1,   -1,   -1,  325,  326,  327,   -1,   -1,   63,
  368, 1093,  365,  302, 1096,   91,  374,  375,   -1,   -1,
   -1,   -1,  715,   41,  334,   -1,   44,   -1,   -1,  722,
  723,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   58,   59,  331,   -1,  737,  334,  335,  334,  741,   -1,
  257,  258,   -1,  411,   -1,  262,  263,   -1,  347,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,   91,   -1,   -1,   -1,  284,  285,   -1,
  438,  439,  295,   -1,   40,   -1,   -1,  321,  295,   -1,
  324,   40,   -1,  327,  452,   -1, 1178,  304,   -1,   40,
   -1,   -1,   -1, 1185, 1186,  123,   -1,   63,   -1,   -1,
  323,  324,   -1,   -1,   63,  328,   45,   46,  352,   -1,
   -1,   -1,  815,  295,  331,  332,  333,  334,  335,   -1,
   -1, 1213,  295,   -1,  368,   91,  494, 1219,  831,   -1,
  347,  375,   91,   72,   73,   -1,  839,   -1,  841,  842,
  843,  323,  324, 1235,   -1,   -1,  328,   40,   -1,   -1,
  323,  324,   27,   -1,   -1,  328, 1248,   -1,   33,   -1,
   -1,  529,  530,   40,  867,   -1,   -1,  535,  536,  872,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  548,  549,   -1,  295,  887,  888,   63,   -1,   -1,   -1,
   -1,   -1,  895,  896,  438,  439,   -1,   -1,   91,   -1,
   -1,  257,  258,   -1,  907,   80,  262,   -1,  452,  295,
   -1,  323,  324,   -1,   91,   -1,  328,   -1,   -1,   -1,
   -1,  277,   -1,   -1,  257,  258,  929,  930,   -1,  262,
  933,  295,  935,  936,  937,  938,   -1,  323,  324,  607,
   -1,  116,  328,   -1,  277,   -1,   -1,   -1,  951,  617,
  494,   -1,  280,   -1,  282,   -1,   -1,  132,   -1,  323,
  324,   -1,   -1,  138,  328,   -1,  141,  970,  971,   -1,
   -1,  327,  640,  641,  302,   -1,   -1,   -1,  334,  982,
   -1,  984,  985,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  536,   -1,   -1,   -1,   -1,   -1,  237,  238,
  328,  334,  177,   -1,   -1,   -1,  257,  258,   -1,   -1,
  678,  262,  680,  681,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,  692,   -1,  277,  278,  279,  295,
 1033,  699,   -1,  284,  285,   33,  295,   -1,  213,   -1,
  215,   -1, 1045,   -1,  295,   -1,   44,   -1,   -1,   -1,
   -1, 1054, 1055,  304,  722,  230,   -1,  323,  324,   -1,
   -1,   -1,  328,  302,  323,  324,   -1,   -1,   -1,  328,
  309,   -1,   40,   -1, 1077,   40,   -1,  316, 1081,   -1,
  319, 1084,  333,  334,  335,   44,   -1,   -1,   -1,   -1,
   -1,  257,  258,   -1,   40,   63,  262,  641,   63,   58,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1, 1111,   -1,
  285,  277,   -1,  352,   -1,   -1,   -1,   63,  295,  358,
   -1,   -1,   -1,   91, 1127,  123,   91,   -1,  126, 1132,
  323,  324,   91,   -1,  678,  328,  680,  681,  304,   -1,
   -1,  809,  317, 1146,  383,   91,  323,  324,   -1,   -1,
 1153,  328,   -1,  821, 1157,   -1,   -1,   37,   38,   -1,
   -1,  400,   42,   43,  123,   45,   46,   47,  334,  257,
  258,  839,   -1,  841,  262,   -1,   -1,   -1,   -1,   -1,
  419,   61,   -1,   -1,  423,   -1,   -1,   -1,   -1,  277,
   -1,  859, 1195,   -1,   -1,   -1,   -1, 1200,   -1, 1202,
 1203, 1204,   -1, 1206,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   94,   -1,  304,   -1,  393,  887,
  888,   -1,   -1, 1226,   -1,   33,   -1,  895,  896,   -1,
   38,   -1,   40, 1236,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,  334,   -1,   -1,  488,
   -1,  426,   -1,   61,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   40,   -1,   -1,  266,  267,
  268,  269,  270,  271,  449,  273,   -1,   -1,   -1,  277,
  278,  279,   -1,   91,   -1,   -1,  284,  285,   63,   -1,
   40,   -1,   -1,   -1,   -1,  839,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  266,  267,  268,
  269,  270,  271,   63,  273,  123,   91,   -1,  126,  278,
  279,  280,   -1,  282,   -1,  284,  285,  295,   -1,   -1,
  295,  329,  330,   -1,   40,  333,  334,  335,   -1,  514,
  338,   91,   -1,  887,  888,   40,   -1,   -1,   -1,  295,
   -1,  895,  896,   -1,   -1,  323,  324,   63,  323,  324,
  328,   -1,   -1,  328, 1032,  540,   -1,  365,   63,   -1,
  545,   -1,   -1,   -1,  333,   -1,   -1,  323,  324,   -1,
   -1,   -1,  328,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   -1,  630,  631,   40,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  580,   -1,  582,   -1,  584,
   -1,   -1,   -1,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,  660,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322, 1111,   91,  325,  326,  327,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,   40,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285, 1146,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  692,   -1,   -1,
  295,  329,  330,   -1,   -1,  333,  334,  335,   -1,  704,
  338,   91,   -1,   -1, 1202, 1203, 1204,   -1, 1206,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,  323,  324,
   -1,   33,   -1,  328,   -1,   37,   38,  365, 1226,   41,
   42,   43,   44,   45,   46,   47,   -1, 1111, 1236,   -1,
   -1,   -1,   -1,  323,  324,   -1,   58,   59,  328,   61,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1, 1146,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,  328,   -1,   -1,   -1,   -1,   -1,  323,  324,
   -1,   -1,  807,  328,   -1,   -1,  811,  812,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  892,  893,  894,  831,   -1, 1202, 1203,
 1204,   -1, 1206,   -1,   44,   -1,   -1,   -1,   40,   -1,
   -1,   -1,   -1,   -1,  257,  258,  323,  324,   58,  262,
  263,  328, 1226,  266,  267,  268,  269,  270,  271,   -1,
  273,   63, 1236,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,  878,  879,   -1,   -1,   -1,   -1,   -1,
   -1,   91,  295,   -1,   -1,   -1,  955,  956,   -1,   91,
   -1,  304,   34,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,  295,   48,   49,  913,   -1,
   -1,   40,  917,  123,   -1,   -1,   -1,   -1,   -1,  332,
  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   72,   73,   61,  323,  324,   -1,   -1,   -1,  328,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273, 1031,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,  982,   -1,  984,
  985,   -1,   -1,  295,  296,  297,  298,  299,   -1, 1058,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
 1035,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1, 1044,
   -1,   -1,   -1, 1112, 1113, 1114,   -1, 1116, 1117,  292,
  293,  294,   -1,  365,   91,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,   -1,  278,  279,
  280,   -1,  282,   -1,  284,  285, 1081, 1082,   -1, 1084,
   -1,  223,   -1,   -1,   -1,  295,   -1,   -1,   -1,  126,
   -1,   -1,   -1,  295,  236,  237,  238,   -1,   -1,   -1,
  242,   -1, 1171,   -1,   -1, 1110,  349,  350,  351,  352,
  353,  354,  355,  356,  357,  358,   -1,   -1,   -1,   -1,
   -1,  323,  324,  333,   -1,   -1,  328,   -1,  257,  258,
   -1,   40, 1137,  262,  263,   -1, 1141,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   40,   -1,  277,  278,
  279,   -1, 1157,   -1,   63,  284,  285,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,  295,  309,  310,   63,
   -1,   -1,   -1, 1178,  316,  304, 1181,  319,   -1,   -1,
 1185, 1186,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1, 1200,   -1,   91,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,  335,   -1, 1213,  351,
  352,  353,   -1,  355, 1219,   -1,  358,   -1,  347,   -1,
   -1,   -1,   -1, 1228,   -1, 1230,  263,  264,   -1,   -1,
 1235,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1243,  381,
   -1,  383,   -1, 1248, 1249,   -1,   -1,   -1,   -1,   -1,
   -1, 1256,  289,   -1,  396,   -1,   -1,  399,  400,   -1,
   -1,   -1,   -1,  405,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,  418,  419,  420,   41,
  422,  423,   44,   -1,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,   58,   59,   -1,   61,
   -1,   63,  339,  340,  341,  342,  343,   -1,  345,  346,
   -1,   -1,   -1,  455,  456,  457,  458,  459,  460,  461,
  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
  472,   93,   94,    0,   91,  477,  478,  479,  480,  481,
  482,  483,  484,  485,  486,  487,  488,  489,   -1,   -1,
  492,  493,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  553,   -1,   -1,  323,  324,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,  323,
  324,   -1,   33,   -1,  328,   -1,   37,   38,   -1,   -1,
   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,  591,
   -1,   -1,   -1,   -1,   -1,  597,  123,  124,  125,  126,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  618,  619,  620,   -1,
  622,   -1,  624,  625,  626,  627,  628,  629,  630,  631,
   -1,   -1,   93,   94,   -1,   -1,   -1,  639,   -1,   -1,
  257,  258,   -1,   -1,   -1,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,  660,   -1,
  277,  278,  279,  124,   -1,  126,   -1,  284,  285,   -1,
  672,   -1,   -1,   -1,   -1,   -1,   -1,   38,  295,   40,
   -1,   42,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,   -1,   -1,  325,  326,  327,  328,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  337,  333,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,  286,
  287,  288,  289,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,  298,  299,  300,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,   -1,  356,
   -1,   61,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,  302,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,   -1,   -1,  325,  326,  327,  328,  329,  330,
  872,  873,   -1,   -1,   -1,   -1,   -1,   -1,  880,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  891,
  892,  893,  894,  123,   -1,  897,  257,  258,    0,   -1,
   -1,  262,   -1,   -1,  365,  266,  267,  268,  269,  270,
  271,  913,  273,  915,  916,   -1,  277,  278,  279,  280,
   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,  295,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  950,   -1,
   -1,   -1,   -1,  955,  956,   -1,   -1,   59,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
  331,   -1,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
 1002,   58,   59,   -1, 1006, 1007, 1008, 1009, 1010, 1011,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   91,   -1, 1038,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
  280,   -1,  282,   38,   -1,   40, 1058,   42,   43,   44,
   45,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1090,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1101,
   -1,  331,   -1,   -1,  334,  335,   91,   -1,   -1,   -1,
 1112, 1113, 1114,   -1,   -1,  257,  258,  347,   -1,   -1,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1, 1135,   -1,  277,  278,  279,  123,   -1,
  125,  126,  284,  285,  286,  287,  288, 1149, 1150,   -1,
   -1,   -1,   -1,  295,   -1,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
 1172,  273,  274,  275,  276,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,  286,  287,  288,  289,   -1,   -1,
   -1,  333,  334,  295,  296,  297,  298,  299,  300,  341,
  302,  303,  304,   -1,   -1,   40,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,  280,   -1,  282,   61,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  302,  348,   -1,   -1,   -1,
   -1,  353,   -1,   -1,  356,   -1,   -1,  359,  360,  361,
  362,  363,  364,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  328,  257,  258,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,  286,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,  298,  299,  300,   40,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
   -1,   -1,   -1,   -1,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,    0,  348,   -1,   -1,   -1,   91,  353,   -1,
   -1,  356,   -1,   -1,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,  123,
   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  257,  258,   -1,   -1,   -1,  262,  263,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,  263,   -1,   91,  266,  267,  268,  269,  270,  271,
  295,  273,   -1,   -1,   -1,   -1,  278,  279,   -1,  304,
   -1,    0,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
  335,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  347,   42,   43,   44,   45,   -1,   -1,   -1,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,  285,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,  323,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
  334,  335,   -1,   -1,  338,   -1,   -1,   -1,   -1,  257,
  258,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,  286,  287,
  288,  289,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
  298,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,
   -1,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,   -1,
  348,   -1,   -1,   -1,   -1,  353,   -1,   -1,  356,   -1,
   59,  359,  360,  361,  362,  363,  364,  365,  257,  258,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,  286,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,  298,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,    0,  348,
   -1,   -1,   -1,   -1,  353,   -1,   -1,  356,   -1,   -1,
  359,  360,  361,  362,  363,  364,  365,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,  257,
  258,   -1,   -1,   -1,  262,   -1,   -1,   59,  266,  267,
  268,  269,  270,  271,   -1,  273,  274,  275,   -1,  277,
  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,
   -1,  257,  258,   -1,   -1,   -1,  262,  295,   -1,   91,
  266,  267,  268,  269,  270,  271,   -1,  273,  274,  275,
   -1,  277,  278,  279,  263,  264,  265,    0,  284,  285,
   -1,   -1,   -1,   -1,   -1,  274,  275,  276,   -1,  295,
   -1,  123,   -1,  125,  126,  333,  334,  286,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,  344,   -1,   -1,   -1,
   33,  300,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,  333,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,  344,   -1,
   -1,   -1,  331,  332,   -1,   -1,   -1,  336,  337,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,  348,
   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,   91,   -1,
  359,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
  123,  273,  125,  126,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  257,  258,   -1,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,  286,  287,  288,  289,   -1,   59,
   -1,  333,  334,  295,  296,  297,  298,  299,  300,  341,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,   -1,   -1,   -1,   -1,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,   -1,  348,   -1,   -1,   -1,
   -1,  353,   -1,   -1,  356,   -1,   -1,  359,  360,  361,
  362,  363,  364,  365,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,  286,  287,  288,  289,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,  298,  299,  300,   40,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   -1,   -1,   -1,   -1,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,    0,  348,   -1,   -1,   -1,   91,
  353,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,  123,   38,  263,  264,  265,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,  274,  275,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,  286,  287,  288,  289,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,
   -1,   -1,  262,  263,   -1,   91,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,  331,  332,    0,   -1,  285,  336,  337,   -1,  339,
  340,  341,  342,  343,  344,  345,  346,  123,  348,  125,
  126,   -1,   -1,  353,  304,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,  332,  333,  334,  335,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,  297,  298,  299,   -1,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,  126,
   -1,  323,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,  334,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
  286,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,  298,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,   -1,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,   -1,
  356,   -1,   -1,  359,  360,  361,  362,  363,  364,  365,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,  286,
  287,  288,  289,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,  298,  299,  300,   40,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,  323,  324,   -1,   -1,
   -1,   -1,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
    0,  348,   -1,   -1,   -1,   91,  353,   -1,   -1,  356,
   -1,   -1,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,  123,   38,   -1,
   40,   -1,   42,   43,   44,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,   -1,   -1,  262,  263,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   91,  277,  278,  279,  280,   -1,  282,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
  295,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,  304,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   37,   -1,  331,  332,  333,  334,
  335,   44,   -1,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   61,   -1,
   63,  257,  258,   -1,   -1,   -1,  262,  263,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,   -1,  123,   -1,   -1,  284,  285,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,  304,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  124,   -1,  126,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,  331,  332,  333,  334,  335,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,  258,   -1,
   -1,  347,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,  286,  287,  288,  289,
  333,  334,   -1,   -1,   -1,  295,  296,  297,  298,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,  348,   -1,
   -1,   -1,  280,  353,  282,   -1,  356,   -1,   -1,  359,
  360,  361,  362,  363,  364,  365,  259,  260,  261,   -1,
   -1,  264,  265,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,  274,  275,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,  286,  287,  288,  289,   -1,   -1,   -1,
  328,   -1,   -1,  296,  297,  298,  299,  300,   -1,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,  325,  326,  327,  328,  329,  330,   -1,   -1,
   -1,   -1,   91,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,  348,   -1,   -1,   -1,   -1,
  353,   -1,   -1,  356,   -1,   -1,  359,  360,  361,  362,
  363,  364,  365,   33,  123,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   91,  273,   93,   94,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,  333,  334,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   91,   -1,   93,   94,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,  298,
  299,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,  334,  335,   -1,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,  348,   42,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  365,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,  348,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   58,   59,   -1,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   91,  273,   93,   94,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,  333,  334,   -1,  257,  258,   -1,   58,   59,  262,
   61,   -1,   63,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   -1,   45,   46,   47,  321,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,  331,   -1,
  333,  334,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,   94,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,   -1,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  365,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,   -1,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   37,   38,  348,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,  295,   58,   59,   -1,   61,
   -1,   63,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,   63,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   91,
   -1,   93,   94,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   37,   38,   -1,   -1,
   -1,   42,   43,  304,   45,   46,   47,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  332,  333,  334,  335,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,   94,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  365,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   37,   38,  348,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  295,   58,   59,   -1,   61,   -1,
   63,   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   63,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   91,   -1,
   93,   94,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,   -1,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,  365,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   37,   38,  348,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   58,   59,   -1,   61,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,   -1,   -1,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   91,  273,   93,
   94,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,  333,  334,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,
   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,   91,   -1,   93,
   94,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,
   -1,  365,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,  348,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   58,   59,   -1,   61,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,  260,  261,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  257,  258,  259,  260,  261,  262,   -1,   -1,
  365,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   37,   38,  348,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   58,   59,   -1,   61,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   63,  257,  258,
   -1,   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  332,  333,  334,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   58,   59,
   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,  337,  338,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,  365,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,   -1,   -1,  333,  334,  335,
   -1,  337,  338,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,  348,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   58,   59,   -1,   61,   -1,   63,  257,  258,   -1,
   -1,   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,   -1,   -1,   -1,  284,  285,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,  332,  333,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   -1,   42,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,
   38,  348,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,   -1,   -1,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  123,  124,  125,  126,  284,
  285,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,
  295,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   63,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,   -1,  333,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  365,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,   -1,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,  332,  333,  334,  335,   -1,  337,
  338,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
  348,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   58,
   59,   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,   -1,   -1,   -1,   -1,
   -1,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,  365,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,  348,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   58,   59,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
  257,  258,   -1,   -1,   -1,  262,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,  123,  124,  125,  126,  284,  285,   -1,
   -1,   -1,  289,   33,   -1,   -1,   -1,   37,  295,   -1,
   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,  333,  334,   -1,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  365,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,   -1,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,  332,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,  348,   40,
   41,   -1,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   58,   59,   -1,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   38,   -1,   40,  348,   42,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,  365,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,   -1,  328,  329,  330,
   -1,   33,  333,  334,  335,   37,  337,  338,   -1,   41,
   -1,   43,   44,   45,   46,   47,   -1,  348,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,   63,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61,
   -1,   63,   -1,  257,  258,   -1,   -1,   -1,  262,  263,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,   -1,   -1,   -1,   91,
  284,  285,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,   -1,  126,   -1,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,
  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,   -1,
  322,  323,  324,  325,  326,  327,  328,  329,  330,   -1,
   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   -1,   42,  348,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,  365,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,   -1,
   33,  333,  334,  335,   37,   38,  338,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
  257,  258,   -1,   -1,   -1,  262,  263,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,   -1,  285,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,  333,  334,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   38,
   -1,   -1,   -1,   42,  257,  258,  259,  260,  261,  262,
   -1,   -1,  365,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,  348,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   58,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,  257,  258,
   -1,   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,   -1,  333,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,  126,   40,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
  365,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,   -1,  348,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   93,   94,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  304,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,  333,  334,  335,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,  257,  258,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,  284,  285,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  332,  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
   -1,  348,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   58,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,  257,  258,   -1,   -1,   -1,  262,  263,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,
  284,  285,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  332,  333,
  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,  365,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,  348,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   58,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   61,  257,  258,   -1,   -1,   -1,  262,  263,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  332,  333,  334,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,   -1,  329,  330,
   -1,   91,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,  365,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,   -1,  329,  330,
   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   33,   -1,   -1,   -1,   37,   38,   -1,  348,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   58,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,
   93,   94,  262,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,  274,  275,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,  289,
  123,  124,  125,  126,   -1,  295,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   -1,  331,  332,  333,  334,   -1,   -1,   -1,   -1,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,   -1,  329,  330,   -1,   91,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,  365,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,  348,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   58,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   93,   94,
  262,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,  274,  275,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,  289,  123,  124,
  125,  126,   -1,  295,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,  331,
  332,  333,  334,   -1,   -1,   -1,   -1,  339,  340,  341,
  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,   -1,  329,  330,   -1,   91,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
  365,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,   -1,  327,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,   -1,  348,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,   -1,   93,   94,  262,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
  274,  275,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,  289,  123,  124,  125,  126,
   -1,  295,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   -1,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,
  327,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   41,   42,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,  123,   -1,
  327,  126,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,
   -1,  348,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,  123,  124,   41,  126,   43,   44,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,   -1,   -1,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   93,   94,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
  335,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,   -1,   -1,   59,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,   -1,  333,  334,  335,   -1,   -1,  338,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,  280,  365,  282,   -1,  284,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
   -1,  327,   -1,  329,  330,   33,   -1,  333,  334,  335,
   38,  337,  338,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,
  276,   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,
  286,  287,  288,  289,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,  300,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,   -1,
  336,  337,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,   -1,  348,   -1,   -1,   93,   94,  353,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   59,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
  123,  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,
  338,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,  365,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,   -1,  327,
  123,  329,  330,   33,   -1,  333,  334,  335,   38,  337,
  338,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   -1,  257,  258,   -1,  365,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,  328,   -1,   -1,   38,  332,
  333,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   -1,  257,  258,   -1,   -1,   -1,  262,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,  321,   -1,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,  331,  332,
  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   44,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
   58,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,  314,  315,  316,  317,  318,  319,
  320,  321,  322,   91,   -1,   -1,   -1,  327,   -1,  329,
  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,  365,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,  314,  315,  316,  317,  318,  319,
   -1,  321,  322,   -1,   -1,   -1,   -1,  327,   -1,  329,
  330,   33,   -1,  333,  334,  335,   38,  337,  338,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,  263,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,   -1,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,  295,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,  257,  258,   -1,   -1,  333,  262,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,  274,  275,
   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
   -1,   93,   94,  289,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,   -1,
   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,  314,  315,  316,  317,  318,  319,   -1,  321,
  322,   -1,   -1,   -1,   -1,  327,   -1,  329,  330,   -1,
   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,  365,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,  314,  315,  316,  317,  318,  319,   -1,  321,
  322,   -1,   -1,   -1,   -1,  327,   -1,  329,  330,   33,
   -1,  333,  334,  335,   38,  337,  338,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,   -1,   -1,   -1,  321,  322,  123,
   -1,   -1,  126,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   41,   42,   -1,
   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,  365,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,   -1,   -1,   -1,  321,  322,  123,
   -1,   -1,  126,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,  365,  266,  267,  268,  269,  270,  271,   -1,  273,
  274,  275,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,  298,  299,   33,   -1,  302,  303,
  304,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,   58,   59,   -1,   61,  329,  330,  331,  332,  333,
  334,  335,   -1,   -1,  338,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,   -1,   93,   94,  262,   -1,
  264,  365,  266,  267,  268,  269,  270,  271,   -1,  273,
  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,
  284,  285,   -1,   -1,   -1,  289,  123,  124,  125,  126,
   -1,  295,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   -1,  331,  332,  333,
  334,  335,   -1,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,  314,  315,   -1,
   -1,   -1,   -1,   -1,  321,  322,  123,   -1,   -1,  126,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,  314,  315,   -1,
   -1,   -1,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,  264,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,  298,  299,   33,   -1,  302,  303,  304,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,
   -1,   -1,  329,  330,  331,  332,  333,  334,  335,   -1,
   -1,  338,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   33,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,  274,  275,   -1,  277,  278,  279,
   -1,   -1,   -1,   -1,  284,  285,   93,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,  329,
  330,  331,  332,  333,  334,  335,   -1,   -1,  338,  339,
  340,  341,  342,  343,  344,  345,  346,   -1,  257,  258,
  259,  260,  261,  262,   -1,   33,   -1,  266,  267,  268,
  269,  270,  271,   41,  273,  365,   44,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   -1,   -1,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,  314,  315,   -1,   -1,   -1,
   -1,   -1,  321,  322,   -1,   93,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
  257,  258,  259,  260,  261,  262,  365,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   33,  282,   -1,  284,  285,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,  314,  315,   -1,
   -1,   -1,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   33,  282,   -1,  284,  285,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,   -1,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,
  338,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   33,  282,   -1,  284,  285,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,   -1,  338,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,  364,  365,   -1,   -1,   -1,
   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   33,  282,   -1,  284,  285,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,  295,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,  329,
  330,   -1,   -1,  333,  334,  335,   -1,   -1,  338,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,  364,  365,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   33,  282,   -1,  284,  285,   38,   -1,   40,   41,   42,
   43,   -1,   45,   -1,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,  329,  330,
   -1,   -1,  333,  334,  335,   -1,   -1,  338,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   33,
  282,   -1,  284,  285,   38,   -1,   40,   41,   42,   43,
   -1,   45,   -1,  295,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,
   -1,  333,  334,  335,   -1,   -1,  338,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   33,  282,
   -1,  284,  285,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,   -1,  338,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,  280,   33,  282,   -1,
  284,  285,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,   -1,  338,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
  126,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   33,  282,   -1,  284,
  285,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
  295,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,   -1,  338,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,  280,   33,  282,   -1,  284,  285,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,   -1,  338,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   33,  282,   -1,  284,  285,   38,
   -1,   40,   41,   42,   43,   -1,   45,   -1,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
   -1,  338,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   33,  282,   -1,  284,  285,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,
   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,   -1,
  338,   91,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,  257,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,   33,   -1,   -1,  284,  285,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,   -1,  338,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
   -1,   33,   -1,   -1,  284,  285,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,  295,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,  329,
  330,   -1,   -1,  333,  334,  335,   -1,   -1,  338,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   -1,  126,   -1,  257,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
   33,   -1,   -1,  284,  285,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,  324,   -1,   -1,   -1,  328,  329,  330,
   -1,   -1,  333,  334,  335,   -1,   -1,  338,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,   33,
   -1,   -1,  284,  285,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,  295,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,
   -1,  333,  334,  335,   -1,   -1,  338,   91,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,  257,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,   33,   -1,   -1,
   -1,  284,  285,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,   -1,  338,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
   -1,   -1,   -1,  277,  278,  279,   33,   -1,   -1,   -1,
  284,  285,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,   -1,  338,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,  257,  258,  259,  260,  261,  262,   -1,   33,   -1,
  266,  267,  268,  269,  270,  271,   41,  273,   -1,   44,
   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   33,   -1,  266,
  267,  268,  269,  270,  271,   41,  273,   -1,   44,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   -1,  257,  258,  259,  260,  261,  262,  365,   33,
   -1,  266,  267,  268,  269,  270,  271,   41,  273,   -1,
   44,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   33,   -1,
  266,  267,  268,  269,  270,  271,   41,  273,   -1,   44,
   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,  285,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,  257,  258,  259,  260,  261,  262,  365,
   33,   -1,  266,  267,  268,  269,  270,  271,   41,  273,
   -1,   44,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   33,
   -1,  266,  267,  268,  269,  270,  271,   41,  273,   -1,
   44,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,  257,  258,  259,  260,  261,  262,
  365,   33,   -1,  266,  267,  268,  269,  270,  271,   41,
  273,   -1,   44,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,
   33,   -1,  266,  267,  268,  269,  270,  271,   41,  273,
   -1,   44,   -1,  277,  278,  279,  280,   -1,  282,   -1,
  284,  285,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,
  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  126,   -1,  257,  258,  259,  260,  261,
  262,  365,   33,   -1,  266,  267,  268,  269,  270,  271,
   41,  273,   -1,   44,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,  329,  330,   -1,
   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,   33,   -1,  266,  267,  268,  269,  270,  271,   41,
  273,   -1,   44,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,  257,  258,  259,  260,
  261,  262,  365,   33,   -1,  266,  267,  268,  269,  270,
  271,   41,  273,   -1,   44,   -1,  277,  278,  279,  280,
   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,  329,  330,
   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   33,   -1,  266,  267,  268,  269,  270,  271,
   41,  273,   -1,   44,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,  329,  330,   -1,
   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,  257,  258,  259,
  260,  261,  262,  365,   33,   -1,  266,  267,  268,  269,
  270,  271,   41,  273,   -1,   44,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,  329,
  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,   -1,   33,   -1,  266,  267,  268,  269,  270,
  271,   41,  273,   -1,   44,   -1,  277,  278,  279,  280,
   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,  329,  330,
   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,  257,  258,
  259,  260,  261,  262,  365,   33,   -1,  266,  267,  268,
  269,  270,  271,   41,  273,   -1,   44,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   33,  365,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,  329,
  330,   -1,   -1,  333,  334,  335,   -1,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  365,   -1,   -1,  266,  267,
  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,
  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,  329,  330,   -1,   -1,  333,  334,  335,   -1,  337,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,   -1,  365,  266,  267,
  268,  269,  270,  271,   -1,  273,   91,   -1,   -1,  277,
  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,   33,  123,   -1,
   -1,  126,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,
   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,   -1,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,  365,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,   91,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   33,  123,   -1,   -1,
  126,   -1,   -1,   -1,   41,   -1,   -1,   -1,  323,  324,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,
  335,   58,   59,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
  365,  277,  278,  279,   -1,   -1,   93,   -1,  284,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,   -1,   -1,  365,
  266,  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,
   -1,  277,  278,  279,   -1,   -1,   33,   -1,  284,  285,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,  365,
  277,  278,  279,  280,   -1,  282,  123,  284,  285,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
  337,  338,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,  126,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,  260,  261,   -1,   -1,   -1,  265,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,   -1,  280,   -1,  282,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,   -1,   -1,  335,  336,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,   33,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,  325,  326,  327,  328,
  329,  330,  259,  260,  261,   -1,  123,   -1,  265,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  276,
   37,   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,  296,
  297,  298,  299,  300,   61,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,
   -1,   -1,  329,  330,   91,   -1,   -1,   94,  335,  336,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,  348,   -1,   -1,   41,   -1,  353,   44,   -1,   46,
   47,   -1,  359,  360,  361,  362,   -1,  124,  365,  126,
   -1,   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,  262,   93,   94,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,  334,  335,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,   -1,   -1,  262,  263,  264,  365,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,   -1,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   -1,   -1,  280,   -1,  282,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,  325,  326,
  327,  328,   33,   -1,   -1,   -1,   37,   38,   -1,   40,
  337,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   44,   45,   46,
   47,   -1,   -1,  124,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   91,
   -1,  262,   94,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  295,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  257,  258,  333,  334,   -1,  262,  263,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,   -1,   -1,  331,  332,  333,  334,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,   -1,   37,  331,
  332,  333,  334,  335,   43,   44,   45,   46,   47,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,  257,
  258,   -1,   -1,   -1,  262,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,  126,  273,  274,  275,   -1,  277,
  278,  279,   91,   -1,   -1,   94,  284,  285,   -1,   -1,
   -1,  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   38,   -1,
   40,   41,   42,   -1,   44,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   61,   -1,  331,  332,  333,  334,   -1,   -1,   -1,
   -1,  339,  340,  341,  342,  343,  344,  345,  346,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,
   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   59,   -1,
   61,   -1,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,
   -1,   -1,  284,  285,   -1,   -1,   -1,  289,   -1,   -1,
   91,   -1,   -1,  295,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,  304,  262,  263,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,  123,  282,   -1,   -1,  285,   -1,   -1,  331,
  332,  333,  334,   -1,   -1,   -1,   -1,  339,  340,  341,
  342,  343,  344,  345,  346,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,   -1,  322,  323,  324,  325,  326,   -1,  328,
   -1,   -1,  331,  332,  333,  334,  335,  257,  258,   -1,
   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,
  280,   -1,  282,   -1,  284,  285,   38,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,  304,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  321,   -1,   -1,   -1,   -1,   -1,  327,  328,   -1,
   -1,  331,  332,  333,  334,  335,  257,  258,   -1,   91,
   -1,  262,  263,   -1,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,
   -1,  282,   -1,   -1,  285,   38,   -1,   40,   -1,   42,
   43,  123,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,   -1,  304,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,  327,  328,   -1,   -1,
  331,  332,  333,  334,  335,   -1,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,  257,  258,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   -1,  123,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,  304,   -1,   -1,   -1,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,  331,
  332,  333,  334,  335,  257,  258,   -1,   -1,   91,  262,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   -1,   -1,   40,   41,   -1,
  123,   44,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  257,  258,   -1,   -1,   -1,  262,  263,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
  123,   40,   41,   -1,   -1,   44,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,  304,   -1,   -1,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  328,   -1,   -1,   -1,  332,  333,  334,  335,   -1,
   -1,   -1,   91,   -1,  257,  258,   -1,   -1,   -1,  262,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,  123,   40,   41,   -1,   -1,   44,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,  304,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,
  333,  334,  335,   -1,  257,  258,   91,   -1,   -1,  262,
  263,   -1,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,  282,
   -1,  284,  285,   -1,   -1,   40,   41,   -1,  123,   44,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,  304,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,
  333,  334,  335,   -1,   -1,   -1,   91,   -1,  257,  258,
   -1,   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,  280,   -1,  282,   -1,  284,  285,   -1,  123,   41,
   -1,   -1,   44,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,  302,   -1,  304,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  328,
   -1,   -1,   -1,  332,  333,  334,  335,   -1,   -1,   -1,
   -1,   -1,  257,  258,   -1,   -1,   -1,  262,  263,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,  280,   -1,  282,   -1,  284,
  285,  123,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,  304,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,  333,  334,
  335,   -1,  257,  258,   91,   -1,   -1,  262,  263,   -1,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,   -1,
   -1,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,  333,  334,
  335,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,  277,  278,  279,  280,   -1,
  282,   -1,  284,  285,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
  302,   -1,  304,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,
  332,  333,  334,  335,   -1,   -1,   -1,   -1,   -1,   91,
  257,  258,   94,   -1,   -1,  262,  263,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,   -1,   -1,   -1,
  277,  278,  279,  280,   -1,  282,   -1,  284,  285,   -1,
   -1,  123,  124,  125,   37,   38,   -1,   40,  295,   42,
   43,   -1,   45,   46,   47,  302,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  328,   -1,   -1,   -1,  332,  333,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,  284,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   91,   -1,   -1,   94,   -1,   61,
   -1,   63,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  124,   -1,   91,
   -1,   -1,   94,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61,   -1,
   63,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  257,   91,   -1,
   -1,   94,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,   -1,  295,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  124,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   61,   -1,   63,   -1,
   -1,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,   91,   37,   38,   94,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61,
   -1,   63,   -1,   -1,  124,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   91,
   -1,   -1,   94,   61,   -1,   63,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  124,   91,   -1,   -1,   94,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   61,   -1,   63,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  124,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   61,
   -1,   63,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,   91,
   -1,   93,   94,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   61,   -1,
   63,   -1,  124,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  295,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  124,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   58,   -1,   -1,   61,
   -1,   63,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,   91,
   37,   38,   94,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   91,   -1,   93,   94,   61,   -1,
   63,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  124,   91,   -1,
   -1,   94,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   61,   -1,   63,   -1,
   -1,  124,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,   91,   -1,   -1,   94,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  124,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  295,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  124,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,   91,   -1,   -1,   94,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   61,   -1,   63,   -1,   -1,  124,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,   91,   -1,   -1,   94,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   61,   -1,   63,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   91,   -1,   -1,   94,   61,   -1,   63,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,   -1,   -1,  124,   91,   37,   38,   94,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   61,
   -1,   63,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  124,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   58,   -1,   -1,
   61,   -1,   63,   -1,   -1,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
   91,   -1,   -1,   94,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   61,
   -1,   63,   -1,  124,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  295,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  124,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   61,   -1,   63,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,   91,   -1,   -1,
   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   91,   -1,   -1,   94,   61,
   -1,   63,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  124,   91,
   -1,   -1,   94,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   61,   -1,   63,
   -1,   -1,  124,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,   91,   -1,   93,
   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,   -1,   -1,   -1,  124,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  295,   91,   -1,   93,   94,   -1,   91,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  124,   -1,   -1,
   -1,   37,   38,  125,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   61,   -1,   63,   -1,   -1,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,   -1,  326,  327,  328,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   -1,
  326,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
  262,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,
   -1,  126,  284,  285,   -1,   -1,   -1,  289,  295,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,  326,
  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,
  332,  333,  334,   -1,   -1,   -1,   91,  339,  340,  341,
  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  257,  258,   -1,   -1,   -1,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   91,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,  257,  258,   -1,   -1,   -1,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   91,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,  257,  258,   -1,   -1,   -1,  262,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   91,  273,
  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,
  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  257,  258,   -1,   -1,   -1,  262,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   -1,  273,
  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,
  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,
  334,   -1,   91,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,  257,  258,   -1,   -1,   -1,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,  257,  258,  289,   -1,   -1,  262,
  263,  264,  295,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  257,  258,   -1,   -1,   -1,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,   -1,  257,  258,
   -1,   -1,  295,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   91,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  257,  258,
   -1,   -1,   -1,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,  257,  258,
  289,   -1,   -1,  262,  263,  264,  295,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   91,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   91,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  257,  258,
   -1,   -1,   -1,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,  257,  258,   -1,   -1,  295,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  331,  332,  333,  334,   91,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   91,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,  257,  258,   -1,   -1,   -1,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,  257,  258,  289,   -1,   -1,  262,  263,  264,
  295,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   91,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   91,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,  257,  258,   -1,   -1,   -1,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,  257,  258,   -1,   -1,
  295,  262,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,  295,   -1,  331,  332,  333,  334,
   91,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  331,  332,  333,  334,   91,   -1,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  257,  258,   -1,   -1,
   -1,  262,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,  257,  258,  289,   -1,
   -1,  262,  263,  264,  295,  266,  267,  268,  269,  270,
  271,   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,
  331,  332,  333,  334,   91,   -1,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  331,  332,  333,  334,   91,   -1,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  257,  258,   -1,   -1,
   -1,  262,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,  273,  274,  275,   -1,  277,  278,  279,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,  289,   -1,
  257,  258,   -1,   -1,  295,  262,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  331,  332,  333,  334,   91,   -1,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,  333,  334,   91,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  257,  258,   -1,   -1,   -1,  262,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
  257,  258,  289,   -1,   -1,  262,  263,  264,  295,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,  331,  332,  333,  334,   91,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,  333,  334,   91,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  257,  258,   -1,   -1,   -1,  262,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,  273,  274,  275,   -1,
  277,  278,  279,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,  289,   -1,  257,  258,   -1,   -1,  295,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  331,  332,  333,  334,   91,   -1,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  257,  258,   -1,   -1,   -1,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,  257,  258,  289,   -1,   -1,  262,
  263,  264,  295,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  257,  258,   -1,   -1,   -1,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  273,  274,  275,   -1,  277,  278,  279,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,   -1,  257,  258,
   -1,   -1,  295,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,  331,  332,
  333,  334,   91,   -1,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   91,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  257,  258,
   -1,   -1,   -1,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,  257,  258,
  289,   -1,   -1,  262,  263,  264,  295,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   -1,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  332,  333,  334,   -1,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  257,  258,
   -1,   -1,   -1,  262,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,  273,  274,  275,   -1,  277,  278,
  279,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,
  289,   -1,  257,  258,   -1,   -1,  295,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  331,  332,  333,  334,   -1,   -1,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,  333,  334,
   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,
};
static int yyctable[] = {                                      1,
  391,   -1,    2,  391,   -1,    6,  391,   -1,    7,  391,
   -1,    8,  391,   -1,   10,  391,   -1,   11,  391,   -1,
   12,  391,   -1,   13,  391,   -1,   14,  391,   -1,   15,
  391,   -1,   16,  391,   -1,   17,  391,   -1,   18,  391,
   -1,   20,  391,   -1,   21,  391,   -1,   22,  391,   -1,
   25,  391,   -1,   26,  391,   -1,   27,  391,   -1,   28,
  391,   -1,   46,  391,   -1,   50,  391,   -1,   51,  391,
   -1,   52,  391,   -1,   53,  391,   -1,   58,  391,   -1,
   59,  391,   -1,   60,  391,   -1,   61,  391,   -1,   62,
  391,   -1,   63,  391,   -1,   64,  391,   -1,   65,  391,
   -1,    1,  529,   -1,  165,  518,   -1,  166,  391,   -1,
  167,  391,   -1,  168,  391,   -1,  169,  391,   -1,  170,
  391,   -1,  171,  391,   -1,  172,  391,   -1,  173,  391,
   -1,    1,  512,   -1,    1,  141,   -1,    2,  141,   -1,
    6,  141,   -1,   10,  141,   -1,   11,  141,   -1,   12,
  141,   -1,   13,  141,   -1,  202,  141,   -1,  168,  141,
   -1,  203,  141,   -1,  192,  141,   -1,   21,  141,   -1,
   22,  141,   -1,  204,  141,   -1,   26,  141,   -1,   28,
  141,   -1,  205,  141,   -1,  206,  141,   -1,   52,  141,
   -1,   53,  141,   -1,   54,  141,   -1,    1,  489,  512,
   -1,    2,  489,  512,   -1,    6,  489,  512,   -1,    7,
  489,   -1,  192,  489,  512,   -1,  211,  489,   -1,   53,
  489,  512,   -1,  490,  512,   -1,    7,  490,   -1,    1,
  491,   -1,    2,  491,   -1,    6,  491,   -1,  192,  491,
   -1,   53,  491,   -1,   10,  135,   -1,   11,  135,   -1,
   12,  135,   -1,   13,  135,   -1,   26,  135,   -1,    1,
  605,   -1,    2,  605,   -1,    3,  605,   -1,    4,  605,
   -1,    5,  605,   -1,    6,  605,   -1,   10,  605,   -1,
   11,  605,   -1,   12,  605,   -1,   13,  605,   -1,  202,
  605,   -1,  168,  605,   -1,  203,  605,   -1,  192,  605,
   -1,   21,  605,   -1,   22,  605,   -1,   26,  605,   -1,
   28,  605,   -1,   29,  605,   -1,   30,  605,   -1,   31,
  605,   -1,   32,  605,   -1,  205,  605,   -1,   37,  605,
   -1,   38,  605,   -1,   45,  605,   -1,  237,  605,   -1,
   52,  605,   -1,   53,  605,   -1,   54,  605,   -1,   57,
  605,   -1,  238,  605,   -1,    1,  266,  390,   -1,    2,
  266,  390,   -1,    6,  266,  390,   -1,    7,  266,  390,
   -1,  166,  266,  390,   -1,   10,  266,  390,   -1,   11,
  266,  390,   -1,   12,  266,  390,   -1,   13,  266,  390,
   -1,  244,  266,  390,   -1,   15,  266,  390,   -1,   16,
  266,  390,   -1,   17,  266,  390,   -1,   18,  266,  390,
   -1,   20,  266,  390,   -1,   21,  266,  390,   -1,   22,
  266,  390,   -1,  169,  266,  390,   -1,   26,  266,  390,
   -1,  170,  266,  390,   -1,   28,  266,  390,   -1,  171,
  266,  390,   -1,   50,  266,  390,   -1,   51,  266,  390,
   -1,   52,  266,  390,   -1,   53,  266,  390,   -1,   58,
  266,  390,   -1,   59,  266,  390,   -1,   60,  266,  390,
   -1,   61,  266,  390,   -1,   62,  266,  390,   -1,  173,
  266,  390,   -1,   64,  266,  390,   -1,   65,  266,  390,
   -1,    1,  389,   -1,    2,  389,   -1,    6,  389,   -1,
   10,  389,   -1,   11,  389,   -1,   12,  389,   -1,   13,
  389,   -1,  202,  389,   -1,  168,  389,   -1,  330,  389,
   -1,  331,  389,   -1,  332,  389,   -1,   20,  389,   -1,
   21,  389,   -1,   22,  389,   -1,  169,  389,   -1,   26,
  389,   -1,   28,  389,   -1,   52,  389,   -1,   53,  389,
   -1,  333,  389,   -1,    1,  603,   -1,    2,  603,   -1,
    3,  603,   -1,    4,  603,   -1,    5,  603,   -1,    6,
  603,   -1,   10,  603,   -1,   11,  603,   -1,   12,  603,
   -1,   13,  603,   -1,  202,  603,   -1,  168,  603,   -1,
  203,  603,   -1,  192,  603,   -1,   21,  603,   -1,   22,
  603,   -1,   23,  603,   -1,   24,  603,   -1,   26,  603,
   -1,   28,  603,   -1,   29,  603,   -1,   30,  603,   -1,
   31,  603,   -1,   32,  603,   -1,  205,  603,   -1,   37,
  603,   -1,   38,  603,   -1,   45,  603,   -1,  237,  603,
   -1,   52,  603,   -1,   53,  603,   -1,   54,  603,   -1,
   57,  603,   -1,  238,  603,   -1,  357,    2,   -1,  363,
  527,   -1,    6,  514,   -1,  376,  514,   -1,  379,  137,
   -1,  380,  137,  531,   -1,  137,  531,   -1,  381,  531,
   -1,  382,  137,  531,   -1,    1,  249,   -1,    2,  249,
   -1,    6,  249,   -1,   10,  249,   -1,   11,  249,   -1,
   12,  249,   -1,   13,  249,   -1,  202,  249,   -1,  168,
  249,   -1,  203,  249,   -1,  192,  249,   -1,   21,  249,
   -1,   22,  249,   -1,  384,  249,   -1,   26,  249,   -1,
  385,  249,   -1,  249,  308,   -1,   52,  249,   -1,   53,
  249,   -1,  395,  115,   -1,  396,  115,   -1,  399,  307,
   -1,  403,  110,   -1,  404,  110,   -1,   40,  127,   -1,
  405,   40,  127,   -1,  406,   40,  127,   -1,   23,    3,
   -1,   24,    3,   -1,   23,   16,   -1,   24,   16,   -1,
  228,   16,   -1,  494,   18,   -1,  497,  224,   -1,  498,
  289,   -1,  288,  289,   -1,  499,  288,  289,   -1,  501,
  289,   -1,  502,  289,   -1,    2,  512,   -1,    6,  512,
   -1,  192,  512,   -1,  171,  512,   -1,   53,  512,   -1,
    1,  385,  391,   -1,    2,  385,  391,   -1,    6,  385,
  391,   -1,    7,  385,  391,   -1,  166,  385,  391,   -1,
   10,  385,  391,   -1,   11,  385,  391,   -1,   12,  385,
  391,   -1,   13,  385,  391,   -1,  244,  385,  391,   -1,
  168,  385,  391,   -1,   16,  385,  391,   -1,   17,  385,
  391,   -1,   18,  385,  391,   -1,   20,  385,  391,   -1,
   21,  385,  391,   -1,   22,  385,  391,   -1,  169,  385,
  391,   -1,   26,  385,  391,   -1,  170,  385,  391,   -1,
   28,  385,  391,   -1,  171,  385,  391,   -1,   50,  385,
  391,   -1,  528,  385,  391,   -1,   52,  385,  391,   -1,
   53,  385,  391,   -1,   58,  385,  391,   -1,   59,  385,
  391,   -1,   60,  385,  391,   -1,   61,  385,  391,   -1,
   62,  385,  391,   -1,  173,  385,  391,   -1,   64,  385,
  391,   -1,   65,  385,  391,   -1,    1,  392,   -1,    2,
  392,   -1,    6,  392,   -1,    7,  392,   -1,  166,  392,
   -1,   10,  392,   -1,   11,  392,   -1,   12,  392,   -1,
   13,  392,   -1,  244,  392,   -1,   15,  392,   -1,   16,
  392,   -1,   17,  392,   -1,   18,  392,   -1,   20,  392,
   -1,   21,  392,   -1,   22,  392,   -1,  169,  392,   -1,
   26,  392,   -1,  170,  392,   -1,   28,  392,   -1,  171,
  392,   -1,   50,  392,   -1,  438,  392,   -1,   52,  392,
   -1,   53,  392,   -1,   58,  392,   -1,   59,  392,   -1,
   60,  392,   -1,   61,  392,   -1,   62,  392,   -1,  173,
  392,   -1,   64,  392,   -1,   65,  392,   -1,  158,  512,
   -1,  266,  390,   -1,  377,  514,   -1,  556,  137,   -1,
  380,  137,   -1,  381,  137,   -1,   23,  249,   -1,   24,
  249,   -1,  405,  127,   -1,  561,  224,   -1,  168,  392,
   -1,  172,  392,   -1,  556,  143,   -1,  380,  143,   -1,
  381,  143,   -1,  577,  137,   -1,  578,  308,   -1,  579,
  308,   -1,  556,  249,   -1,  380,  249,   -1,  121,  152,
   -1,  556,  144,   -1,  380,  144,   -1,  381,  144,   -1,
  380,  138,   -1,  577,  137,  531,   -1,  381,  137,  531,
   -1,  383,  137,  531,   -1,  454,  604,   -1,  473,  604,
   -1,  474,  604,   -1,  478,  604,   -1,  488,  604,   -1,
  489,  604,   -1,  492,  604,   -1,  601,  324,   -1,  604,
  351,   -1,  605,  353,   -1,  249,  355,   -1,  499,  289,
   -1,  454,  543,   -1,  473,  543,   -1,  474,  543,   -1,
  478,  543,   -1,  488,  543,   -1,  489,  543,   -1,  492,
  543,   -1,  454,  545,   -1,  473,  545,   -1,  474,  545,
   -1,  478,  545,   -1,  488,  545,   -1,  489,  545,   -1,
  492,  545,   -1,  454,  537,   -1,  473,  537,   -1,  474,
  537,   -1,  478,  537,   -1,  488,  537,   -1,  489,  537,
   -1,  492,  537,   -1,  454,  540,   -1,  473,  540,   -1,
  474,  540,   -1,  478,  540,   -1,  488,  540,   -1,  489,
  540,   -1,  492,  540,   -1,  307,  542,   -1,  454,  541,
   -1,  473,  541,   -1,  474,  541,   -1,  478,  541,   -1,
  488,  541,   -1,  489,  541,   -1,  492,  541,   -1,  612,
  115,   -1,  454,  538,   -1,  473,  538,   -1,  474,  538,
   -1,  478,  538,   -1,  488,  538,   -1,  489,  538,   -1,
  492,  538,   -1,  454,  539,   -1,  473,  539,   -1,  474,
  539,   -1,  478,  539,   -1,  488,  539,   -1,  489,  539,
   -1,  492,  539,   -1,  454,  622,   -1,  455,  622,   -1,
  456,  622,   -1,  457,  622,   -1,  458,  622,   -1,  459,
  622,   -1,  460,  622,   -1,  461,  622,   -1,  462,  622,
   -1,  463,  622,   -1,  464,  622,   -1,  465,  622,   -1,
  466,  622,   -1,  467,  622,   -1,  468,  622,   -1,  469,
  622,   -1,  470,  622,   -1,  471,  622,   -1,  472,  622,
   -1,  473,  622,   -1,  474,  622,   -1,  475,  622,   -1,
  476,  622,   -1,  477,  622,   -1,  478,  622,   -1,  479,
  622,   -1,  480,  622,   -1,  481,  622,   -1,  482,  622,
   -1,  483,  622,   -1,  484,  622,   -1,  485,  622,   -1,
  486,  622,   -1,  487,  622,   -1,  619,  622,   -1,  488,
  622,   -1,  489,  622,   -1,  491,  622,   -1,  492,  622,
   -1,  620,  623,   -1,  578,  249,   -1,  579,  249,   -1,
  386,  249,   -1,  387,  249,   -1,  388,  249,   -1,  454,
  597,   -1,  473,  597,   -1,  474,  597,   -1,  478,  597,
   -1,  488,  597,   -1,  489,  597,   -1,  492,  597,   -1,
  639,  625,   -1,  454,  600,   -1,  473,  600,   -1,  474,
  600,   -1,  478,  600,   -1,  488,  600,   -1,  489,  600,
   -1,  492,  600,   -1,  505,  299,   -1,  506,  299,   -1,
    3,  105,   -1,    3,  107,   -1,  244,  391,   -1,  528,
  391,   -1,    1,  110,   -1,    2,  110,   -1,    3,  110,
   -1,    4,  110,   -1,    5,  110,   -1,    6,  110,   -1,
   10,  110,   -1,   11,  110,   -1,   12,  110,   -1,   13,
  110,   -1,  202,  110,   -1,  168,  110,   -1,  203,  110,
   -1,  192,  110,   -1,   21,  110,   -1,   22,  110,   -1,
  613,  110,   -1,  614,  110,   -1,   25,  110,   -1,   26,
  110,   -1,   28,  110,   -1,   29,  110,   -1,   30,  110,
   -1,   31,  110,   -1,   32,  110,   -1,   34,  110,   -1,
   35,  110,   -1,  205,  110,   -1,   37,  110,   -1,   38,
  110,   -1,   39,  110,   -1,   40,  110,   -1,   41,  110,
   -1,   42,  110,   -1,  236,  110,   -1,   44,  110,   -1,
   45,  110,   -1,  237,  110,   -1,   48,  110,   -1,   49,
  110,   -1,   52,  110,   -1,   53,  110,   -1,   54,  110,
   -1,   57,  110,   -1,   72,  110,   -1,  238,  110,   -1,
  672,  623,   -1,  673,  623,   -1,  677,  137,   -1,  382,
  137,   -1,  286,  289,   -1,  498,  286,  289,   -1,  499,
  286,  288,   -1,  286,  288,  289,   -1,  286,  288,   -1,
  500,  286,   -1,  501,  286,  289,   -1,  502,  286,  289,
   -1,  503,  286,   -1,  505,  300,   -1,  506,  300,   -1,
  505,  427,   -1,  510,  427,   -1,  512,  427,   -1,  498,
  447,   -1,  505,  447,   -1,  516,  447,   -1,  500,  447,
   -1,  501,  447,   -1,  502,  447,   -1,  503,  447,   -1,
  522,  271,   -1,    1,  385,   -1,    2,  385,   -1,    6,
  385,   -1,    7,  385,   -1,  166,  385,   -1,   10,  385,
   -1,   11,  385,   -1,   12,  385,   -1,   13,  385,   -1,
  244,  385,   -1,  168,  385,   -1,   16,  385,   -1,   17,
  385,   -1,   18,  385,   -1,   20,  385,   -1,   21,  385,
   -1,   22,  385,   -1,  169,  385,   -1,   26,  385,   -1,
  170,  385,   -1,   28,  385,   -1,  171,  385,   -1,   50,
  385,   -1,  528,  385,   -1,   52,  385,   -1,   53,  385,
   -1,   58,  385,   -1,   59,  385,   -1,   60,  385,   -1,
   61,  385,   -1,   62,  385,   -1,  173,  385,   -1,   64,
  385,   -1,   65,  385,   -1,  405,   42,   -1,  145,  148,
   -1,  710,  250,   -1,  711,  250,   -1,  712,  250,   -1,
  145,  242,   -1,  722,  512,   -1,  245,  310,   -1,  137,
  244,   -1,  438,  266,  390,   -1,  741,  137,   -1,  420,
  228,   -1,  422,  228,   -1,  237,  468,   -1,  386,  468,
   -1,  387,  468,   -1,  388,  468,   -1,  389,  468,   -1,
  505,  301,   -1,  506,  301,   -1,  422,  428,   -1,  505,
  422,   -1,  510,  422,   -1,  512,  422,   -1,  513,  422,
   -1,  522,  272,   -1,  785,  287,   -1,  786,  287,   -1,
  787,  287,   -1,  788,  287,   -1,  789,  287,   -1,  785,
  449,   -1,  786,  449,   -1,  787,  449,   -1,  788,  449,
   -1,  789,  449,   -1,    1,  460,   -1,    2,  460,   -1,
    6,  460,   -1,  192,  460,   -1,   53,  460,   -1,  168,
  266,  390,   -1,  528,  266,  390,   -1,    1,  241,   -1,
    2,  241,   -1,    6,  241,   -1,    7,  241,   -1,  192,
  241,   -1,  557,  241,   -1,  411,  241,   -1,   53,  241,
   -1,  558,  241,   -1,  418,  229,   -1,  419,  229,   -1,
  420,  229,   -1,  421,  229,   -1,  422,  229,   -1,  423,
  229,   -1,  505,  302,   -1,  506,  302,   -1,  421,  428,
   -1,  505,  421,   -1,  510,  421,   -1,  512,  421,   -1,
  513,  421,   -1,  498,  448,   -1,   23,  448,   -1,   24,
  448,   -1,  505,  448,   -1,  516,  448,   -1,  500,  448,
   -1,  501,  448,   -1,  502,  448,   -1,  503,  448,   -1,
  228,  448,   -1,  522,  269,   -1,  115,  159,   -1,  499,
  286,   -1,  578,  355,   -1,  579,  355,   -1,  833,  355,
   -1,  253,  356,   -1,  859,  512,   -1,  617,  241,   -1,
  111,  113,   -1,  112,  114,   -1,  621,  623,   -1,  620,
  621,  623,   -1,  866,  622,   -1,  145,  610,   -1,    1,
  544,   -1,    2,  544,   -1,    3,  544,   -1,    4,  544,
   -1,    5,  544,   -1,    6,  544,   -1,   10,  544,   -1,
   11,  544,   -1,   12,  544,   -1,   13,  544,   -1,  202,
  544,   -1,  168,  544,   -1,  203,  544,   -1,  192,  544,
   -1,   21,  544,   -1,   22,  544,   -1,   26,  544,   -1,
   28,  544,   -1,   29,  544,   -1,   30,  544,   -1,   31,
  544,   -1,   32,  544,   -1,  205,  544,   -1,   37,  544,
   -1,   38,  544,   -1,   45,  544,   -1,  237,  544,   -1,
   52,  544,   -1,   53,  544,   -1,   54,  544,   -1,   57,
  544,   -1,  238,  544,   -1,    1,  546,   -1,    2,  546,
   -1,    3,  546,   -1,    4,  546,   -1,    5,  546,   -1,
    6,  546,   -1,   10,  546,   -1,   11,  546,   -1,   12,
  546,   -1,   13,  546,   -1,  202,  546,   -1,  168,  546,
   -1,  203,  546,   -1,  192,  546,   -1,   21,  546,   -1,
   22,  546,   -1,   26,  546,   -1,   28,  546,   -1,   29,
  546,   -1,   30,  546,   -1,   31,  546,   -1,   32,  546,
   -1,  205,  546,   -1,   37,  546,   -1,   38,  546,   -1,
   45,  546,   -1,  237,  546,   -1,   52,  546,   -1,   53,
  546,   -1,   54,  546,   -1,   57,  546,   -1,  238,  546,
   -1,  775,  625,   -1,  880,  622,   -1,  363,  106,   -1,
  363,  108,   -1,    1,   88,   -1,  882,   88,   -1,  883,
   88,   -1,  884,   88,   -1,  577,  117,   -1,  380,  117,
   -1,  381,  117,   -1,  907,  115,   -1,  249,  308,  512,
   -1,  478,  377,   -1,  288,  289,  367,   -1,  137,   -1,
  380,  137,  138,   -1,  579,  139,   -1,  487,  227,   -1,
  488,  227,   -1,  489,  227,   -1,  454,  559,   -1,  473,
  559,   -1,  474,  559,   -1,  478,  559,   -1,  488,  559,
   -1,  489,  559,   -1,  492,  559,   -1,  454,  560,   -1,
  473,  560,   -1,  474,  560,   -1,  478,  560,   -1,  488,
  560,   -1,  489,  560,   -1,  492,  560,   -1,  454,  561,
   -1,  473,  561,   -1,  474,  561,   -1,  478,  561,   -1,
  488,  561,   -1,  489,  561,   -1,  492,  561,   -1,  454,
  562,   -1,  473,  562,   -1,  474,  562,   -1,  478,  562,
   -1,  488,  562,   -1,  489,  562,   -1,  492,  562,   -1,
  454,  563,   -1,  473,  563,   -1,  474,  563,   -1,  478,
  563,   -1,  488,  563,   -1,  489,  563,   -1,  492,  563,
   -1,  454,  564,   -1,  473,  564,   -1,  474,  564,   -1,
  478,  564,   -1,  488,  564,   -1,  489,  564,   -1,  492,
  564,   -1,  454,  565,   -1,  473,  565,   -1,  474,  565,
   -1,  478,  565,   -1,  488,  565,   -1,  489,  565,   -1,
  492,  565,   -1,  454,  566,   -1,  473,  566,   -1,  474,
  566,   -1,  478,  566,   -1,  488,  566,   -1,  489,  566,
   -1,  492,  566,   -1,  454,  567,   -1,  473,  567,   -1,
  474,  567,   -1,  478,  567,   -1,  488,  567,   -1,  489,
  567,   -1,  492,  567,   -1,  454,  569,   -1,  473,  569,
   -1,  474,  569,   -1,  478,  569,   -1,  488,  569,   -1,
  489,  569,   -1,  492,  569,   -1,  454,  570,   -1,  473,
  570,   -1,  474,  570,   -1,  478,  570,   -1,  488,  570,
   -1,  489,  570,   -1,  492,  570,   -1,  454,  571,   -1,
  473,  571,   -1,  474,  571,   -1,  478,  571,   -1,  488,
  571,   -1,  489,  571,   -1,  492,  571,   -1,  454,  572,
   -1,  473,  572,   -1,  474,  572,   -1,  478,  572,   -1,
  488,  572,   -1,  489,  572,   -1,  492,  572,   -1,  454,
  573,   -1,  473,  573,   -1,  474,  573,   -1,  478,  573,
   -1,  488,  573,   -1,  489,  573,   -1,  492,  573,   -1,
  454,  574,   -1,  473,  574,   -1,  474,  574,   -1,  478,
  574,   -1,  488,  574,   -1,  489,  574,   -1,  492,  574,
   -1,  454,  575,   -1,  473,  575,   -1,  474,  575,   -1,
  478,  575,   -1,  488,  575,   -1,  489,  575,   -1,  492,
  575,   -1,  454,  576,   -1,  473,  576,   -1,  474,  576,
   -1,  478,  576,   -1,  488,  576,   -1,  489,  576,   -1,
  492,  576,   -1,  454,  577,   -1,  473,  577,   -1,  474,
  577,   -1,  478,  577,   -1,  488,  577,   -1,  489,  577,
   -1,  492,  577,   -1,  454,  556,   -1,  473,  556,   -1,
  474,  556,   -1,  478,  556,   -1,  488,  556,   -1,  489,
  556,   -1,  492,  556,   -1,  454,  557,   -1,  455,  557,
   -1,  456,  557,   -1,  457,  557,   -1,  458,  557,   -1,
  459,  557,   -1,  460,  557,   -1,  461,  557,   -1,  462,
  557,   -1,  463,  557,   -1,  464,  557,   -1,  465,  557,
   -1,  466,  557,   -1,  467,  557,   -1,  468,  557,   -1,
  469,  557,   -1,  470,  557,   -1,  471,  557,   -1,  472,
  557,   -1,  473,  557,   -1,  474,  557,   -1,  475,  557,
   -1,  476,  557,   -1,  477,  557,   -1,  478,  557,   -1,
  479,  557,   -1,  480,  557,   -1,  481,  557,   -1,  482,
  557,   -1,  483,  557,   -1,  484,  557,   -1,  485,  557,
   -1,  486,  557,   -1,  487,  557,   -1,  488,  557,   -1,
  489,  557,   -1,  491,  557,   -1,  492,  557,   -1,  454,
  547,   -1,  473,  547,   -1,  474,  547,   -1,  478,  547,
   -1,  488,  547,   -1,  489,  547,   -1,  492,  547,   -1,
  454,  548,   -1,  473,  548,   -1,  474,  548,   -1,  478,
  548,   -1,  488,  548,   -1,  489,  548,   -1,  492,  548,
   -1,  454,  549,   -1,  473,  549,   -1,  474,  549,   -1,
  478,  549,   -1,  488,  549,   -1,  489,  549,   -1,  492,
  549,   -1,  454,  550,   -1,  473,  550,   -1,  474,  550,
   -1,  478,  550,   -1,  488,  550,   -1,  489,  550,   -1,
  492,  550,   -1,  454,  551,   -1,  473,  551,   -1,  474,
  551,   -1,  478,  551,   -1,  488,  551,   -1,  489,  551,
   -1,  492,  551,   -1,  454,  554,   -1,  473,  554,   -1,
  474,  554,   -1,  478,  554,   -1,  488,  554,   -1,  489,
  554,   -1,  492,  554,   -1,  454,  552,   -1,  473,  552,
   -1,  474,  552,   -1,  478,  552,   -1,  488,  552,   -1,
  489,  552,   -1,  492,  552,   -1,  454,  553,   -1,  473,
  553,   -1,  474,  553,   -1,  478,  553,   -1,  488,  553,
   -1,  489,  553,   -1,  492,  553,   -1,  454,  555,   -1,
  473,  555,   -1,  474,  555,   -1,  478,  555,   -1,  488,
  555,   -1,  489,  555,   -1,  492,  555,   -1,  454,  568,
   -1,  455,  568,   -1,  456,  568,   -1,  457,  568,   -1,
  458,  568,   -1,  459,  568,   -1,  460,  568,   -1,  461,
  568,   -1,  462,  568,   -1,  463,  568,   -1,  464,  568,
   -1,  465,  568,   -1,  466,  568,   -1,  467,  568,   -1,
  468,  568,   -1,  469,  568,   -1,  470,  568,   -1,  471,
  568,   -1,  472,  568,   -1,  473,  568,   -1,  474,  568,
   -1,  475,  568,   -1,  476,  568,   -1,  477,  568,   -1,
  478,  568,   -1,  479,  568,   -1,  480,  568,   -1,  481,
  568,   -1,  482,  568,   -1,  483,  568,   -1,  484,  568,
   -1,  485,  568,   -1,  486,  568,   -1,  487,  568,   -1,
  488,  568,   -1,  489,  568,   -1,  491,  568,   -1,  492,
  568,   -1,  397,  450,   -1,  478,  482,   -1,  960,  482,
   -1,  961,  482,   -1,  962,  482,   -1,  963,  478,   -1,
  830,  159,   -1,  556,  117,   -1,  617,  512,   -1,  976,
  237,   -1,  977,  236,   -1,  158,  489,   -1,  454,  590,
   -1,  473,  590,   -1,  474,  590,   -1,  478,  590,   -1,
  488,  590,   -1,  489,  590,   -1,  492,  590,   -1,  454,
  619,   -1,  473,  619,   -1,  474,  619,   -1,  478,  619,
   -1,  488,  619,   -1,  489,  619,   -1,  492,  619,   -1,
  454,  620,   -1,  473,  620,   -1,  474,  620,   -1,  478,
  620,   -1,  488,  620,   -1,  489,  620,   -1,  492,  620,
   -1,  529,  530,   -1,  454,  537,  548,   -1,  537,  548,
   -1,  473,  537,  548,   -1,  474,  537,  548,   -1,  478,
  537,  548,   -1,  488,  537,  548,   -1,  489,  537,  548,
   -1,  492,  537,  548,   -1,  454,  540,  549,   -1,  540,
  549,   -1,  473,  540,  549,   -1,  474,  540,  549,   -1,
  478,  540,  549,   -1,  488,  540,  549,   -1,  489,  540,
  549,   -1,  492,  540,  549,   -1,  454,  541,  552,   -1,
  541,  552,   -1,  473,  541,  552,   -1,  474,  541,  552,
   -1,  478,  541,  552,   -1,  488,  541,  552,   -1,  489,
  541,  552,   -1,  492,  541,  552,   -1,  621,  626,   -1,
  947,  622,   -1,  454,  601,   -1,  473,  601,   -1,  474,
  601,   -1,  478,  601,   -1,  488,  601,   -1,  489,  601,
   -1,  492,  601,   -1,  620,  621,   -1, 1061,  137,   -1,
    1,  170,   -1,    6,  170,   -1,   23,  170,   -1,   24,
  170,   -1,   56,  170,   -1,   66,  170,   -1,  499,  292,
   -1, 1094,  115,  159,   -1, 1095,  115,  159,   -1, 1097,
  115,  159,   -1, 1098,  115,  159,   -1, 1099,  115,  159,
   -1,  454,  598,   -1,  473,  598,   -1,  474,  598,   -1,
  478,  598,   -1,  488,  598,   -1,  489,  598,   -1,  492,
  598,   -1,   23,   64,   -1,   24,   64,   -1,  454,  558,
   -1,  473,  558,   -1,  474,  558,   -1,  478,  558,   -1,
  488,  558,   -1,  489,  558,   -1,  492,  558,   -1,  785,
  293,   -1,  478,  506,   -1,  478,  504,   -1,  454,  599,
   -1,  473,  599,   -1,  474,  599,   -1,  478,  599,   -1,
  488,  599,   -1,  489,  599,   -1,  492,  599,   -1,  613,
   64,   -1,  614,   64,   -1,  478,  502,   -1,   23,   67,
   -1,   24,   67,   -1, 1172,   67,   -1, 1173,   67,   -1,
  403,   68,   -1,  404,   68,   -1,   23,    2,   -1,   24,
    2,   -1,  283,  284,   -1,  281,  282,   -1,
};
#ifdef YYDESTRUCT
static int yyastable[] = {                                      0,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   18,   19,   20,   21,   22,
   23,   24,   25,   27,   29,   30,   34,   40,   41,   42,
   43,   44,   45,   47,   48,   49,   68,   69,   74,   75,
   76,   80,   82,   83,   86,   88,   90,   91,   92,   93,
   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
  104,  105,  106,  107,  108,  110,  115,  121,  122,  123,
  124,  127,  151,  155,  156,  158,  159,  160,  161,  162,
  165,  166,  167,  168,  169,  170,  171,  173,  174,  177,
  178,  179,  182,  183,  184,  185,  186,  193,  194,  195,
  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
  208,  209,  210,  211,  212,  215,  216,  220,  227,  228,
  229,  230,  231,  232,  233,  235,  237,  238,  239,  240,
  241,  244,  245,  246,  247,  248,  249,  250,  251,  252,
  253,  254,  257,  258,  259,  261,  262,  271,  272,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  298,  299,  166,  285,   86,    9,   15,   16,   29,   34,
   88,   94,  106,  158,  159,  160,  162,  166,  173,  177,
  183,  184,  194,  207,  212,  237,  257,  258,  259,  261,
   21,   22,  160,  166,   18,  150,  157,  158,  160,  164,
  166,   15,   18,   29,   49,   94,  160,  162,  168,  243,
   40,  157,  160,  157,  160,  164,  166,   72,  160,  169,
   40,  160,   86,   91,  160,  167,  161,  151,  211,  215,
   72,   72,   72,   72,  211,   82,   88,  151,  160,  216,
   40,   86,    4,   15,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
   86,   88,   91,   92,  162,  172,  183,  212,  241,  258,
  261,  216,  216,    6,  216,  216,  167,  216,  166,  216,
  216,  171,  183,  216,  217,  218,   80,   84,   88,  216,
  218,  219,  222,  223,  224,   86,  162,  216,   88,  216,
  158,  184,  185,  212,  237,  244,  261,  292,  166,   18,
   19,   20,  106,  162,  182,  212,  257,   37,   38,   39,
  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
   86,   86,   86,  174,   86,  218,  152,  171,  206,  216,
  217,  218,    4,   49,   82,  160,  186,  212,  241,  244,
  247,  250,  253,  259,  261,    8,   86,  173,   29,   40,
   72,   86,  151,   29,   40,   66,   76,   80,   93,  162,
  175,  176,  215,  290,   29,   72,  150,  288,   72,   86,
  291,  295,   25,   27,   86,   90,  294,   90,  176,   40,
   86,   94,   97,  158,  160,  163,  243,   84,   86,   88,
   90,  150,  151,  187,   90,   85,   90,   90,   90,  174,
   31,   32,   33,  267,   90,  176,   10,   94,  158,  160,
  166,  182,  184,  204,  207,  244,  247,  249,  250,  252,
  253,  261,  211,   40,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   84,   86,   88,   90,
  143,  153,  172,  118,   46,  236,   90,    7,   84,   93,
   96,   97,  109,  260,   47,   84,   90,  211,  269,   84,
   90,  109,  150,  255,  269,   84,   90,  211,  260,  269,
   90,   93,  211,  157,  162,  272,  273,   94,  158,  183,
  184,  186,  186,  194,  183,  212,  244,  247,  249,  250,
  252,  253,  184,  185,  162,  271,  156,   15,   18,  157,
  166,  160,   88,  183,  241,   29,   40,   97,  158,  160,
   90,  157,  184,  183,  160,   90,   84,  157,  166,  162,
  166,  151,  150,   88,  162,  243,   29,   29,   40,   86,
   70,  160,  175,  160,  175,  151,   84,  318,  297,  216,
   86,  183,  183,  183,  183,  236,   86,  183,  216,  166,
   73,   87,   89,   88,   88,   76,   86,   18,   22,  207,
  183,   86,   25,   27,  217,  218,   86,   87,   85,   85,
   87,  216,   40,   68,   69,   74,   75,   76,   80,   86,
   88,  166,  216,  225,  226,   89,  216,  175,   89,  183,
  212,   90,  157,   17,  156,  156,  166,  166,    4,   36,
    4,   36,   17,  166,    8,  166,   17,  185,  216,  171,
  184,  185,  194,  216,  217,  221,  185,  216,  122,  216,
  152,   85,  152,   85,  152,  166,   29,  158,  247,  261,
  212,  247,  250,    6,  156,  166,   49,  160,  166,  167,
  293,  162,  183,  190,  191,  192,  216,  301,  183,  184,
  185,  189,  196,  215,  241,  219,  160,  162,   29,   66,
   76,   80,   93,  175,   82,  166,  192,  192,  219,   87,
  216,   76,   80,  157,  243,   86,  163,  243,  216,   87,
  162,  218,   89,  216,  216,  219,  175,  150,  150,  150,
   29,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,   82,
  168,  168,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  219,   89,  216,   76,   82,  168,  216,
  216,  174,   86,    6,   84,   93,   96,   97,  109,   86,
   92,  126,   92,  126,  160,  256,  283,   85,  211,    6,
   92,  126,  160,  273,   90,  150,  264,   90,   86,  158,
   85,   85,  175,   87,  157,  164,  166,  216,  160,   90,
  183,  207,  238,  242,  166,   90,  150,  151,  150,  151,
  181,  162,   76,   70,  196,  183,  175,  175,  317,  160,
   18,   23,  183,  213,  214,  237,   87,  216,   73,   73,
   73,   73,  183,  216,   87,   87,   89,   89,   76,   95,
  300,  300,  216,  216,  216,   89,    6,  216,  216,  216,
  218,  216,  150,   89,   89,  166,  225,   86,  197,   87,
  216,    4,    5,    6,   17,  166,   87,   87,  216,  217,
  150,   90,   90,   90,   87,   87,   86,   87,  152,  152,
   49,   87,   87,   87,  183,  289,   29,  157,  302,  303,
  305,   73,   85,  304,   84,   88,   85,   87,  189,  152,
  176,  166,  308,   73,   73,   87,  286,   87,   76,  158,
  166,  166,   76,  160,   76,   66,   76,   80,   87,   87,
   89,  152,  166,  160,  168,   87,   89,  168,  168,  150,
  183,    6,  160,  268,   86,  151,  256,   90,  160,   31,
   32,   33,  103,  265,  266,   85,  215,  314,  157,  175,
  175,  166,  151,   90,  157,   90,   90,   90,  150,  151,
  162,  181,  162,  181,   85,  152,  166,  173,  180,  215,
  282,  283,   90,  183,   87,  206,   90,  164,  166,  164,
  166,   84,  166,   73,   85,   84,   87,   86,   86,   86,
   86,   87,   87,   87,   87,   89,  216,  196,   70,  211,
  216,  174,  174,  216,  221,  221,  221,  174,  174,  216,
  151,   86,   82,  166,   86,  296,  191,  215,  216,   89,
  216,  189,  311,   86,   29,  287,  166,  164,   87,   87,
  164,   29,  166,   76,   80,  166,  166,   86,  187,  188,
   86,  216,  164,   85,   87,   87,  218,  152,  218,   97,
  263,  266,  265,  265,  266,  151,   76,  160,  166,  166,
  181,   86,  162,  181,   90,  152,  151,  152,  180,   84,
  260,  152,   84,   73,   85,   84,   73,   84,   85,  216,
   84,  214,  216,  216,  216,  216,  216,  216,   87,  183,
   87,   90,   90,   90,   87,  171,  234,  300,  166,  309,
  196,  306,  191,   89,   86,  196,   82,  166,   87,   87,
   87,   76,  166,  166,  150,   87,   87,  160,   87,  152,
  264,  162,  162,  266,  265,  316,  164,   29,   88,  150,
  188,  188,  152,  196,  151,  152,  181,  216,  183,  183,
  216,   87,   87,   87,   87,  211,  174,  221,  221,  221,
  234,  125,  126,  152,  171,   87,  312,   86,   87,  307,
   87,   87,  166,  310,   86,   86,  164,  216,  211,  314,
  162,  162,  206,   87,   76,  216,  216,  166,   87,  181,
  152,   87,   87,   87,  216,  150,   86,  196,  211,  269,
  270,  313,   86,  196,  196,   87,  151,  152,   86,  164,
   89,  152,  174,  174,  174,  150,  206,   87,   87,  255,
   86,  196,   87,   87,   86,  315,  196,   87,  206,  211,
  270,  211,   87,   87,  196,  206,   87,   86,  255,  211,
  270,   87,  152,  196,  211,  255,   87,  211,
};
#endif /* YYDESTRUCT */
#define YYFINAL 74
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 386
#if YYDEBUG
static const char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'",0,"'='",0,"'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknName","tknID",
"tknStrLit","tknCharLit","tknNumber","tknMacro","tknApiDecor","tknTypedef",
"tknUsing","tknInteger","tknChar","tknDouble","tknFloat","tknEnum","tknAuto",
"tknPreProDef","tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate",
"tknTypename","tknDecltype","tknFreeStandingBlockComment","tknSideBlockComment",
"tknFreeStandingLineComment","tknSideLineComment","tknScopeResOp",
"tknNumSignSpec","tknPublic","tknProtected","tknPrivate","tknExternC",
"tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknHashError",
"tknHashWarning","tknEllipsis","tknConstCast","tknStaticCast","tknDynamicCast",
"tknReinterpretCast","tknTry","tknCatch","tknThrow","tknSizeOf","tknOperator",
"tknPlusEq","tknMinusEq","tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq",
"tknOrEq","tknLShift","tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq",
"tknLessEq","tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec",
"tknArrow","tknArrowStar","tknLT","tknGT","tknNew","tknDelete","tknConst",
"tknConstExpr","tknVoid","tknOverride","tknFinal","tknAsm","tknBlob","tknGoto",
"tknStatic","tknExtern","tknVirtual","tknInline","tknExplicit","tknFriend",
"tknVolatile","tknMutable","tknNoExcept","tknPreProHash","tknDefine","tknUndef",
"tknInclude","tknImport","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknDefault",
"tknReturn","tknBlankLine","COMMA","TERNARYCOND","RSHIFT","PREINCR","PREDECR",
"UNARYMINUS","CSTYLECAST","DEREF","ADDRESSOF","POSTINCR","POSTDECR",
"FUNCTIONALCAST","FUNCCALL","SUBSCRIPT","GLOBAL","TEMPLATE","PTRDECL","REFDECL",
"CTORDECL","DTORDECL",
};
static const char *yyrule[] = {
"$accept : progunit",
"progunit : optstmtlist",
"optstmtlist :",
"optstmtlist : stmtlist",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : optstmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefnstmt",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : typedefliststmt",
"stmt : classdefnstmt",
"stmt : namespacedefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : forrangeblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : funcptrtypedef",
"stmt : preprocessor",
"stmt : block",
"stmt : switchstmt",
"stmt : tryblock",
"stmt : usingdecl",
"stmt : usingnamespacedecl",
"stmt : namespacealias",
"stmt : macrocall",
"stmt : macrocall ';'",
"stmt : apidecortokensq macrocall",
"stmt : ';'",
"stmt : asmblock",
"stmt : blob",
"stmt : label",
"label : name ':'",
"preprocessor : define",
"preprocessor : undef",
"preprocessor : include",
"preprocessor : import",
"preprocessor : hashif",
"preprocessor : hasherror",
"preprocessor : hashwarning",
"preprocessor : pragma",
"asmblock : tknAsm",
"$$1 :",
"macrocall : tknMacro $$1",
"$$2 :",
"macrocall : macrocall '(' ')' $$2",
"$$3 :",
"macrocall : macrocall '(' expr ')' $$3",
"switchstmt : tknSwitch '(' expr ')' '{' caselist '}'",
"caselist :",
"caselist : caselist tknCase expr ':' optstmtlist",
"caselist : caselist tknDefault ':' optstmtlist",
"caselist : doccommentstr caselist",
"caselist : caselist doccommentstr",
"block : '{' optstmtlist '}'",
"block : doccomment block",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' varinit ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' varinit ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' varinit ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' vardecllist ';' optexpr ';' optexpr ')' stmt",
"forrangeblock : tknFor '(' vardecl ':' expr ')' stmt",
"tryblock : tknTry block catchblock",
"tryblock : tryblock catchblock",
"catchblock : tknCatch '(' vartype optname ')' block",
"optexpr :",
"optexpr : expr",
"optexpr : exprlist",
"define : tknPreProHash tknDefine name name",
"define : tknPreProHash tknDefine name",
"define : tknPreProHash tknDefine name tknNumber",
"define : tknPreProHash tknDefine name tknStrLit",
"define : tknPreProHash tknDefine name tknCharLit",
"define : tknPreProHash tknDefine name tknPreProDef",
"undef : tknPreProHash tknUndef name",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"import : tknPreProHash tknImport tknStrLit",
"import : tknPreProHash tknImport tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef name",
"hashif : tknPreProHash tknIfNDef name",
"hashif : tknPreProHash tknIfNDef tknApiDecor",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"hasherror : tknPreProHash tknHashError",
"hasherror : tknPreProHash tknHashError strlit",
"hashwarning : tknPreProHash tknHashWarning",
"hashwarning : tknPreProHash tknHashWarning strlit",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : doccommentstr",
"doccommentstr : tknFreeStandingBlockComment",
"doccommentstr : tknFreeStandingLineComment",
"doccommentstr : doccommentstr tknFreeStandingBlockComment",
"doccommentstr : doccommentstr tknFreeStandingLineComment",
"$$4 :",
"identifier : name $$4",
"$$5 :",
"identifier : identifier tknScopeResOp identifier $$5",
"$$6 :",
"identifier : id $$6",
"$$7 :",
"identifier : templidentifier $$7",
"$$8 :",
"identifier : tknOverride $$8",
"$$9 :",
"identifier : identifier tknEllipsis $$9",
"$$10 :",
"identifier : macrocall $$10",
"$$11 :",
"identifier : templqualifiedid $$11",
"numbertype : tknInteger",
"numbertype : tknFloat",
"numbertype : tknDouble",
"numbertype : tknChar",
"numbertype : tknNumSignSpec",
"numbertype : tknNumSignSpec numbertype",
"typeidentifier : identifier",
"typeidentifier : tknScopeResOp identifier",
"typeidentifier : typeidentifier tknScopeResOp typeidentifier",
"typeidentifier : numbertype",
"typeidentifier : tknAuto",
"typeidentifier : tknVoid",
"typeidentifier : tknEnum identifier",
"typeidentifier : tknTypename identifier",
"typeidentifier : tknEllipsis",
"typeidentifier : tknTypename tknEllipsis",
"typeidentifier : tknClass tknEllipsis",
"typeidentifier : typeidentifier tknEllipsis",
"typeidentifier : tknDecltype '(' expr ')'",
"$$12 :",
"templidentifier : identifier tknLT templatearglist tknGT $$12",
"$$13 :",
"templqualifiedid : tknTemplate templidentifier $$13",
"$$14 :",
"name : tknName $$14",
"$$15 :",
"id : tknID $$15",
"optname :",
"optname : name",
"enumitem : name",
"enumitem : name '=' expr",
"enumitem : doccomment",
"enumitem : preprocessor",
"enumitem : macrocall",
"enumitem : blob",
"blob : tknBlob",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optname '{' enumitemlist '}'",
"enumdefn : tknEnum optapidecor name ':' typeidentifier '{' enumitemlist '}'",
"enumdefn : tknEnum ':' typeidentifier '{' enumitemlist '}'",
"enumdefn : tknEnum optapidecor name '{' enumitemlist '}'",
"enumdefn : tknEnum tknClass optapidecor name ':' typeidentifier '{' enumitemlist '}'",
"enumdefn : tknEnum tknClass optapidecor name '{' enumitemlist '}'",
"enumdefn : tknTypedef tknEnum optapidecor optname '{' enumitemlist '}' name",
"enumdefnstmt : enumdefn ';'",
"enumfwddecl : tknEnum name ':' typeidentifier ';'",
"enumfwddecl : tknEnum tknClass name ':' typeidentifier ';'",
"enumfwddecl : tknEnum tknClass name ';'",
"funcptrtypedef : tknTypedef functionpointer ';'",
"typedefnamestmt : typedefname ';'",
"typedefliststmt : typedeflist ';'",
"typedeflist : tknTypedef vardecllist",
"typedefname : tknTypedef vardecl",
"usingdecl : tknUsing name '=' vartype ';'",
"usingdecl : tknUsing name '=' functionptrtype ';'",
"usingdecl : tknUsing name '=' funcobj ';'",
"usingdecl : tknUsing name '=' classdefn ';'",
"usingdecl : templatespecifier usingdecl",
"usingdecl : tknUsing identifier ';'",
"namespacealias : tknNamespace name '=' identifier ';'",
"usingnamespacedecl : tknUsing tknNamespace identifier ';'",
"vardeclliststmt : vardecllist ';'",
"vardeclliststmt : exptype vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : apidecor vardeclstmt",
"vardeclstmt : exptype vardeclstmt",
"vardeclstmt : varattrib vardeclstmt",
"vardecllist : optfunctype varinit ',' opttypemodifier name optvarassign",
"vardecllist : optfunctype vardecl ',' opttypemodifier name optvarassign",
"vardecllist : optfunctype vardecl ',' opttypemodifier name '[' expr ']'",
"vardecllist : optfunctype vardecl ',' opttypemodifier name ':' expr",
"vardecllist : vardecllist ',' opttypemodifier name optvarassign",
"vardecllist : vardecllist ',' opttypemodifier name optvarassign ':' expr",
"varinit : vardecl '(' typeidentifier '*' name",
"varinit : vardecl '(' typeidentifier '*' '*' name",
"varinit : vardecl '(' typeidentifier '*' '&' name",
"varinit : vardecl '(' typeidentifier '&' name",
"varinit : vardecl '(' typeidentifier tknAnd name",
"varinit : vardecl '(' typeidentifier ')'",
"varinit : vardecl '(' ')'",
"varinit : vardecl varassign",
"varinit : tknConstExpr varinit",
"varassign : '=' expr",
"varassign : '(' exprorlist ')'",
"varassign : '{' funcargs '}'",
"optvarassign :",
"optvarassign : varassign",
"vardecl : vartype varidentifier",
"vardecl : vartype apidecor varidentifier",
"vardecl : functionpointer",
"vardecl : vardecl '[' expr ']'",
"vardecl : vardecl '[' ']'",
"vardecl : vardecl ':' expr",
"vardecl : templatespecifier vardecl",
"vardecl : varattrib vardecl",
"vartype : attribspecifiers typeidentifier opttypemodifier",
"vartype : typeidentifier opttypemodifier",
"vartype : tknClass identifier opttypemodifier",
"vartype : tknClass optapidecor identifier opttypemodifier",
"vartype : tknStruct optapidecor identifier opttypemodifier",
"vartype : tknUnion identifier opttypemodifier",
"vartype : functionptrtype",
"vartype : classdefn",
"vartype : classdefn typemodifier",
"vartype : enumdefn",
"vartype : enumdefn typemodifier",
"vartype : varattrib vartype",
"vartype : vartype tknEllipsis",
"vartype : typeidentifier typeidentifier tknScopeResOp typemodifier",
"varidentifier : identifier",
"varidentifier : tknFinal",
"varidentifier : '(' '&' name ')'",
"varidentifier : '(' '*' name ')'",
"varidentifier : '(' '*' '*' name ')'",
"opttypemodifier :",
"opttypemodifier : typemodifier",
"opttypemodifier : doccomment opttypemodifier",
"typemodifier : tknConst",
"typemodifier : '*'",
"typemodifier : '&'",
"typemodifier : tknAnd",
"typemodifier : typemodifier tknConst",
"typemodifier : typemodifier '*'",
"typemodifier : typemodifier '&'",
"typemodifier : typemodifier tknAnd",
"exptype : tknStatic",
"exptype : tknExtern",
"exptype : tknExternC",
"varattrib : tknConst",
"varattrib : tknVolatile",
"varattrib : tknMutable",
"varattrib : tknConstExpr",
"typeconverter : tknOperator vartype '(' optvoid ')'",
"typeconverter : identifier tknScopeResOp tknOperator vartype '(' optvoid ')'",
"typeconverter : functype typeconverter",
"typeconverter : typeconverter tknConst",
"typeconverter : apidecor typeconverter",
"typeconverter : templatespecifier typeconverter",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"lambda : '[' lambdacapture ']' lambdaparams block",
"lambda : '[' lambdacapture ']' lambdaparams tknArrow vartype block",
"lambdaparams :",
"lambdaparams : '(' paramlist ')'",
"funcptrortype : functype vartype '(' optapidecor identifier tknScopeResOp '*' optname ')' '(' paramlist ')'",
"funcptrortype : vartype '(' optapidecor identifier tknScopeResOp '*' optname ')' '(' paramlist ')'",
"funcptrortype : functype vartype '(' optapidecor '*' optname ')' '(' paramlist ')'",
"funcptrortype : vartype '(' optapidecor '*' optname ')' '(' paramlist ')'",
"funcptrortype : vartype '(' '*' apidecor optname ')' '(' paramlist ')'",
"funcptrortype : apidecor funcptrortype",
"funcptrortype : funcptrortype optfuncattrib",
"functionpointer : funcptrortype",
"functionptrtype : funcptrortype",
"funcobj : vartype optapidecor '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecldata : funcname '(' paramlist ')'",
"funcdecldata : funcname '(' paramlist ')' optfuncattrib",
"funcdecl : vartype apidecor funcdecldata",
"funcdecl : vartype funcdecldata",
"funcdecl : vartype tknConstExpr funcdecldata",
"funcdecl : tknAuto funcdecldata tknArrow vartype",
"funcdecl : tknAuto tknConstExpr funcdecldata tknArrow vartype",
"funcdecl : tknConstExpr funcdecl",
"funcdecl : apidecor funcdecl",
"funcdecl : templatespecifier funcdecl",
"funcdecl : functype funcdecl",
"funcdecl : funcdecl '=' tknDelete",
"funcdecl : funcdecl '=' tknDefault",
"funcdecl : funcdecl functhrowspec",
"funcobjstr : typeidentifier optapidecor '(' paramlist ')'",
"funcname : operfuncname",
"funcname : typeidentifier",
"funcname : tknScopeResOp operfuncname",
"funcname : tknFinal",
"rshift : tknGT tknGT",
"operfuncname : tknOperator '+'",
"operfuncname : tknOperator '-'",
"operfuncname : tknOperator '*'",
"operfuncname : tknOperator '/'",
"operfuncname : tknOperator '%'",
"operfuncname : tknOperator '^'",
"operfuncname : tknOperator '&'",
"operfuncname : tknOperator '|'",
"operfuncname : tknOperator '~'",
"operfuncname : tknOperator '!'",
"operfuncname : tknOperator '='",
"operfuncname : tknOperator tknLT",
"operfuncname : tknOperator tknGT",
"operfuncname : tknOperator tknPlusEq",
"operfuncname : tknOperator tknMinusEq",
"operfuncname : tknOperator tknMulEq",
"operfuncname : tknOperator tknDivEq",
"operfuncname : tknOperator tknPerEq",
"operfuncname : tknOperator tknXorEq",
"operfuncname : tknOperator tknAndEq",
"operfuncname : tknOperator tknOrEq",
"operfuncname : tknOperator tknLShift",
"operfuncname : tknOperator rshift",
"operfuncname : tknOperator tknLShiftEq",
"operfuncname : tknOperator tknRShiftEq",
"operfuncname : tknOperator tknCmpEq",
"operfuncname : tknOperator tknNotEq",
"operfuncname : tknOperator tknLessEq",
"operfuncname : tknOperator tknGreaterEq",
"operfuncname : tknOperator tkn3WayCmp",
"operfuncname : tknOperator tknAnd",
"operfuncname : tknOperator tknOr",
"operfuncname : tknOperator tknInc",
"operfuncname : tknOperator tknDec",
"operfuncname : tknOperator ','",
"operfuncname : tknOperator tknArrow",
"operfuncname : tknOperator tknArrowStar",
"operfuncname : tknOperator '(' ')'",
"operfuncname : tknOperator '[' ']'",
"operfuncname : tknOperator tknNew",
"operfuncname : tknOperator tknNew '[' ']'",
"operfuncname : tknOperator tknDelete",
"operfuncname : tknOperator tknDelete '[' ']'",
"operfuncname : tknOperator typeidentifier",
"operfuncname : tknOperator typeidentifier '*'",
"operfuncname : identifier tknScopeResOp operfuncname",
"operfuncname : tknOperator tknStrLit name",
"operfuncname : operfuncname tknLT templatearglist tknGT",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vartype '=' expr",
"param : vardecl",
"param : vartype",
"param : funcptrortype",
"param : doccomment param",
"param : vartype '[' expr ']'",
"param : vartype '[' ']'",
"$$16 :",
"templatearg : $$16",
"$$17 :",
"templatearg : vartype $$17",
"$$18 :",
"templatearg : funcobjstr $$18",
"$$19 :",
"templatearg : expr $$19",
"$$20 :",
"templatearglist : templatearg $$20",
"$$21 :",
"templatearglist : templatearglist ',' templatearg $$21",
"$$22 :",
"templatearglist : templatearglist ',' doccomment templatearg $$22",
"functype : exptype",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExplicit",
"functype : tknFriend",
"functype : tknConstExpr",
"optfunctype :",
"optfunctype : functype",
"optfuncattrib : tknConst",
"optfuncattrib : tknOverride",
"optfuncattrib : tknFinal",
"optfuncattrib : tknNoExcept",
"optfuncattrib : '=' tknNumber",
"optfuncattrib : optfuncattrib tknConst",
"optfuncattrib : optfuncattrib tknOverride",
"optfuncattrib : optfuncattrib tknFinal",
"optfuncattrib : optfuncattrib tknNoExcept",
"optfuncattrib : optfuncattrib '=' tknNumber",
"optfuncattrib : tknMacro",
"optfuncthrowspec :",
"optfuncthrowspec : functhrowspec",
"functhrowspec : tknThrow '(' identifierlist ')'",
"identifierlist :",
"identifierlist : identifier",
"identifierlist : identifierlist ',' identifier",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist block",
"$$23 :",
"ctordefn : name tknScopeResOp name $$23 '(' paramlist ')' optfuncthrowspec meminitlist block",
"$$24 :",
"ctordefn : identifier tknScopeResOp name tknScopeResOp name $$24 '(' paramlist ')' optfuncthrowspec meminitlist block",
"$$25 :",
"ctordefn : name tknLT templatearglist tknGT tknScopeResOp name $$25 '(' paramlist ')' optfuncthrowspec meminitlist block",
"ctordefn : functype ctordefn",
"ctordefn : templatespecifier ctordefn",
"ctordecl : identifier '(' paramlist ')'",
"ctordecl : functype ctordecl",
"ctordecl : templatespecifier ctordecl",
"ctordecl : ctordecl '=' tknDelete",
"ctordecl : ctordecl '=' tknDefault",
"ctordecl : ctordecl functhrowspec",
"ctordecl : ctordecl tknNoExcept",
"ctordecl : apidecor ctordecl",
"meminitlist :",
"meminitlist : ':' meminit",
"meminitlist : ':' blob",
"meminitlist : meminitlist ',' meminit",
"meminit : identifier '(' exprorlist ')'",
"meminit : identifier '(' ')'",
"meminit : identifier '{' exprorlist '}'",
"meminit : identifier '{' '}'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$26 :",
"dtordefn : name tknScopeResOp '~' name $$26 '(' ')' block",
"$$27 :",
"dtordefn : identifier tknScopeResOp name tknScopeResOp '~' name $$27 '(' ')' block",
"$$28 :",
"dtordefn : name tknLT templatearglist tknGT tknScopeResOp '~' name $$28 '(' ')' block",
"dtordefn : templatespecifier dtordefn",
"dtordefn : functype dtordefn",
"dtordecl : '~' name '(' optvoid ')'",
"dtordecl : apidecor dtordecl",
"dtordecl : functype dtordecl",
"dtordecl : dtordecl optfuncattrib",
"dtordecl : dtordecl '=' tknNumber",
"dtordecl : dtordecl '=' tknDelete",
"dtordecl : dtordecl '=' tknDefault",
"dtordecl : dtordecl functhrowspec",
"optvoid :",
"optvoid : tknVoid",
"optcomment :",
"optcomment : doccomment",
"classdefnstmt : classdefn ';'",
"attribspecifier : '[' '[' expr ']' ']'",
"optattribspecifiers :",
"optattribspecifiers : attribspecifiers",
"attribspecifiers : attribspecifier",
"attribspecifiers : attribspecifiers attribspecifier",
"$$29 :",
"classdefn : classspecifier optapidecor optattribspecifiers identifier optfinal optinheritlist optcomment '{' $$29 optstmtlist '}'",
"$$30 :",
"classdefn : classspecifier optattribspecifiers optinheritlist optcomment '{' $$30 optstmtlist '}'",
"classdefn : templatespecifier classdefn",
"$$31 :",
"namespacedefn : tknNamespace optname '{' $$31 optstmtlist '}'",
"optfinal :",
"optfinal : tknFinal",
"optinheritlist :",
"optinheritlist : ':' protlevel optinherittype typeidentifier",
"optinheritlist : optinheritlist ',' protlevel optinherittype typeidentifier",
"optinheritlist : ':' optinherittype protlevel typeidentifier",
"optinheritlist : optinheritlist ',' optinherittype protlevel typeidentifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"optinherittype :",
"optinherittype : tknVirtual",
"fwddecl : classspecifier typeidentifier ';'",
"fwddecl : classspecifier optapidecor identifier ';'",
"fwddecl : templatespecifier fwddecl",
"fwddecl : tknFriend typeidentifier ';'",
"fwddecl : tknFriend fwddecl",
"classspecifier : tknClass",
"classspecifier : tknStruct",
"classspecifier : tknUnion",
"$$32 :",
"templatespecifier : tknTemplate tknLT $$32 templateparamlist tknGT",
"templateparamlist :",
"templateparamlist : templateparam",
"templateparamlist : templateparamlist ',' templateparam",
"templateparam : tknTypename optname",
"templateparam : tknTypename optname '=' vartype",
"templateparam : tknClass optname",
"templateparam : tknClass optname '=' vartype",
"templateparam : vartype name",
"templateparam : vartype name '=' expr",
"templateparam : functionpointer",
"templateparam : functionpointer '=' expr",
"templateparam : vartype",
"templateparam : vartype '=' expr",
"templateparam : tknTypename name ','",
"templateparam : tknTypename name '='",
"templateparam : tknTypename name tknGT",
"templateparam : tknClass name ','",
"templateparam : tknClass name tknGT",
"optapidecor :",
"optapidecor : apidecor",
"apidecor : apidecortokensq",
"apidecor : apidecortokensq '(' name ')'",
"apidecor : apidecortokensq '(' tknNumber ')'",
"apidecor : apidecortokensq '(' strlit ')'",
"apidecortokensq : tknApiDecor",
"apidecortokensq : apidecortokensq tknApiDecor",
"apidecortokensq : tknApiDecor '(' strlit ')'",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"strlit : tknStrLit",
"strlit : strlit tknStrLit",
"expr : strlit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : '+' tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '{' exprlist ',' '}'",
"expr : '{' exprorlist '}'",
"expr : '{' exprorlist ',' '}'",
"expr : '{' '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : '&' operfuncname",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr tknLT expr",
"expr : expr tknGT expr",
"expr : expr '?' expr ':' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr rshift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr tknAnd expr",
"expr : expr tknOr expr",
"expr : expr '.' funcname",
"expr : expr '.' '*' funcname",
"expr : expr tknArrow funcname",
"expr : expr tknArrowStar funcname",
"expr : expr '.' '~' funcname",
"expr : expr tknArrow '~' funcname",
"expr : expr '[' expr ']'",
"expr : expr '[' ']'",
"expr : expr '(' funcargs ')'",
"expr : funcname '(' funcargs ')'",
"expr : expr tknArrow '~' identifier '(' ')'",
"expr : identifier '{' funcargs '}'",
"expr : '(' vartype ')' expr",
"expr : tknConstCast tknLT vartype tknGT '(' expr ')'",
"expr : tknStaticCast tknLT vartype tknGT '(' expr ')'",
"expr : tknDynamicCast tknLT vartype tknGT '(' expr ')'",
"expr : tknReinterpretCast tknLT vartype tknGT '(' expr ')'",
"expr : '(' exprorlist ')'",
"expr : tknNew typeidentifier opttypemodifier",
"expr : tknNew expr",
"expr : tknNew '(' expr ')' expr",
"expr : tknScopeResOp tknNew '(' expr ')' expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn exprorlist",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"expr : tknSizeOf '(' vartype ')'",
"expr : tknSizeOf '(' expr ')'",
"expr : tknSizeOf tknEllipsis '(' vartype ')'",
"expr : tknSizeOf tknEllipsis '(' expr ')'",
"expr : expr tknEllipsis",
"expr : lambda",
"expr : tknGoto name",
"expr : tknNumber name",
"expr : '[' expr expr ']'",
"expr : '[' expr objcarglist ']'",
"objcarg : name ':' expr",
"objcarglist : objcarg",
"objcarglist : objcarglist objcarg",
"exprlist : expr ',' expr",
"exprlist : exprlist ',' expr",
"exprlist : doccommentstr exprlist",
"exprorlist : expr",
"exprorlist : exprlist",
"exprorlist : doccommentstr exprorlist",
"funcargs :",
"funcargs : exprorlist",
"captureallbyref : '&'",
"captureallbyval : '='",
"lambdacapture : funcargs",
"lambdacapture : captureallbyref",
"lambdacapture : captureallbyval",
"exprstmt : expr ';'",
};
#endif
#line 52 "btyaccpa.ske"

/*
** YYPOSN is user-defined text position type.
*/
#ifdef YYPOSN
#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, x) 
#endif

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, x) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

extern void yyerror(const char *, ...);

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
#ifdef YYPOSN
YYPOSN  yyposn;
#endif /* YYPOSN */

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
#ifdef YYPOSN
YYPOSN  yyretposn;
#endif /* YYPOSN */

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYERROR_QUIET  goto yyerrquiet
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  struct yyparsestate *save;        /* Previously saved parser state */
  int           state;
  int           errflag;
  Yshort       *ss;          /* state stack base */
  Yshort       *ssp;         /* state stack pointer */
  YYSTYPE      *vs;          /* values stack base */
  YYSTYPE      *vsp;         /* value stack pointer */
  YYSTYPE       val;         /* value as returned by actions */
#ifdef YYPOSN
  YYPOSN       *ps;          /* position stack base */
  YYPOSN       *psp;         /* position stack pointer */
  YYPOSN        pos;         /* position as returned by universal action */
#endif /* YYPOSN */
  ptrdiff_t     lexeme;      /* index of the conflict lexeme in the lexical queue */
  size_t        stacksize;   /* current maximum stack size */
  Yshort        ctry;        /* index in yyctable[] for this conflict */
};

/* Current parser state */
static struct yyparsestate *yyps=0;

/* yypath!=NULL: do the full parse, starting at *yypath parser state. */
static struct yyparsestate *yypath=0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals=0;

/* Current posistion at lexical value queue */
static YYSTYPE *yylvp=0;

/* End position of lexical value queue */
static YYSTYPE *yylve=0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim=0;

#ifdef YYPOSN
/* Base of the lexical position queue */
static YYPOSN *yylpsns=0;

/* Current posistion at lexical position queue */
static YYPOSN *yylpp=0;

/* End position of lexical position queue */
static YYPOSN *yylpe=0;

/* The last allocated position at the lexical position queue */
static YYPOSN *yylplim=0;
#endif /* YYPOSN */

/* Current position at lexical token queue */
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

/*
** For use in generated program
*/
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yypsp   (yyps->psp)
#define yypos   (yyps->pos)
#define yydepth (yyps->ssp - yyps->ss)


/*
** Local prototypes.
*/
int yyparse(void);
int yylex(void);

static void YYSCopy(YYSTYPE *to, YYSTYPE *from, ptrdiff_t size) {
  ptrdiff_t i;
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}

#ifdef YYPOSN
static void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}
#endif /* YYPOSN */

static int yyexpand() {
  ptrdiff_t p = yylvp-yylvals;
  ptrdiff_t s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
#ifdef __cplusplus
  Yshort  *tl = yylexemes; 
  yylexemes = new Yshort[s];
  memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
  delete[] tl;
  YYSTYPE *tv = yylvals;
  yylvals = new YYSTYPE[s];
  YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
  delete[] tv;
#ifdef YYPOSN
  YYPOSN  *tp = yylpsns;
  yylpsns = new YYPOSN[s];
  YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
  delete[] tp;
#endif /* YYPOSN */
#else
  yylexemes = realloc(yylexemes, sizeof(Yshort) * s);
  yylvals = realloc(yylvals, sizeof(YYSTYPE) * s);
#ifdef YYPOSN
  yylpsns = realloc(yylpsns, sizeof(YYPOSN) * s);
#endif /* YYPOSN */
#endif
  yylexp = yylexemes + p;
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
#ifdef YYPOSN
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
#endif /* YYPOSN */
  return 0;
}

static int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
#ifdef YYPOSN
    yyposn = *yylpp++;
#endif /* YYPOSN */
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
#ifdef YYPOSN
      *yylpp++ = yyposn;
      yylpe++;
#endif /* YYPOSN */
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

static void YYMoreStack(struct yyparsestate *yyps) {
  ptrdiff_t p = yyps->ssp - yyps->ss;
#ifdef __cplusplus
  Yshort  *tss = yyps->ss;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  delete[] tss;
  YYSTYPE *tvs = yyps->vs;
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  delete[] tvs;
#ifdef YYPOSN
  YYPOSN  *tps = yyps->ps;
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  delete[] tps;
#endif /* YYPOSN */
  yyps->stacksize += YYSTACKGROWTH;                           
#else
  yyps->stacksize += YYSTACKGROWTH;                           
  yyps->ss = realloc(yyps->ss, sizeof(Yshort ) * yyps->stacksize);   
  yyps->vs = realloc(yyps->vs, sizeof(YYSTYPE) * yyps->stacksize);  
#ifdef YYPOSN
  yyps->ps = realloc(yyps->ps, sizeof(YYPOSN ) * yyps->stacksize);  
#endif /* YYPOSN */
#endif
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
#ifdef YYPOSN
  yyps->psp = yyps->ps + p;                                   
#endif /* YYPOSN */
}

static struct yyparsestate *YYNewState(size_t size) {
#ifdef __cplusplus
  yyparsestate *p = new yyparsestate;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
#ifdef YYPOSN
  p->ps = new YYPOSN [size + 4];
#endif /* YYPOSN */
#else
  struct yyparsestate *p = malloc(sizeof(struct yyparsestate));
  p->ss = malloc(sizeof(Yshort ) * (size + 4));
  p->vs = malloc(sizeof(YYSTYPE) * (size + 4));
#ifdef YYPOSN
  p->ps = malloc(sizeof(YYPOSN ) * (size + 4));
#endif /* YYPOSN */
#endif
  p->stacksize = size+4;
#ifndef YYSTYPE_CONSTRUCTOR
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
#endif
#ifdef YYPOSN
#ifndef YYPOSN_CONSTRUCTOR
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
#endif
#endif /* YYPOSN */
  return p;
}

static void YYFreeState(struct yyparsestate *p) {
#ifdef __cplusplus
  delete[] p->ss;
  delete[] p->vs;
#ifdef YYPOSN
  delete[] p->ps;
#endif /* YYPOSN */
  delete p;
#else
  free(p->ss);
  free(p->vs);
#ifdef YYPOSN
  free(p->ps);
#endif /* YYPOSN */
  free(p);
#endif
}

#line 1994 "/home/dassat/github/cppparser/src/parser.y"


//////////////////////////////////////////////////////////////////////////

// clang-format on

#include "parser.h"

extern LexerData g;

extern const char* contextNameFromState(int ctx);

void defaultErrorHandler(const char* errLineText, size_t lineNum, size_t errorStartPos, int lexerContext)
{
  constexpr size_t bufsize = 1024;
  char spacechars[bufsize] = {0};
  for(size_t i = 0; i < errorStartPos; ++i)
    spacechars[i] = (errLineText[i] == '\t') ? '\t' : ' ';
  char errmsg[bufsize];
  const auto* errText = errLineText+errorStartPos;
  const auto* strLexerContext = contextNameFromState(lexerContext);

  std::sprintf(errmsg, "Error: Unexpected '%.*s', while in context=%.*s(%d), found at line#%ld\n"
    "%.*s\n"   // Line that contains the error.
    "%.*s^\n",  // A ^ below the beginning of unexpected token.
    static_cast<int>(strlen(errText)), errText,
    static_cast<int>(strlen(strLexerContext)), strLexerContext, lexerContext, lineNum,
    static_cast<int>(strlen(errLineText)), errLineText,
    static_cast<int>(strlen(spacechars)), spacechars);

  printf("%s", errmsg);
}

ErrorHandler gErrorHandler = defaultErrorHandler;

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern int getLexerContext();

  const char* lineStart = errt_posn;
  const char* buffStart = g.mInputBuffer;
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  gErrorHandler(lineStart, g.mLineNo, errt_posn - lineStart, getLexerContext());
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

enum {
  kNoLog    = 0x000,
  kParseLog = 0x001,
  kLexLog   = 0x002,
  kYaccLog  = 0x004
};

static void setupEnv()
{
#if YYDEBUG
  const char* yys = getenv("ZZDEBUG");
  if (yys) {
    const int yyn = *yys - '0';

    gParseLog = ((yyn & kParseLog) ? 1 : 0);
    g.mLexLog = ((yyn & kLexLog)   ? 1 : 0);
    yydebug   = ((yyn & kYaccLog)  ? 1 : 0);
  }
#endif
}

void setErrorHandler(ErrorHandler errorHandler)
{
  gErrorHandler = errorHandler;
}

void resetErrorHandler()
{
  gErrorHandler = defaultErrorHandler;
}

CppCompoundPtr parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurAccessType = CppAccessType::kUnknown;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  setupEnv();
  gTemplateParamStart = nullptr;
  gParamModPos = nullptr;
  gInTemplateSpec = false;
  gDisableYyValid = 0;
  yyparse();
  cleanupScanBuffer();
  CppCompoundStack tmpStack;
  gCompoundStack.swap(tmpStack);
  
  CppCompoundPtr ret(gProgUnit);
  gProgUnit = nullptr;
  return ret;
}
#line 8554 "parser.tab.c"
#line 354 "btyaccpa.ske"

/*
** Parser function
*/
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  struct yyparsestate *yyerrctx = NULL;
#ifdef YYREDUCEPOSNFUNC
  int reduce_posn;
#endif /* YYREDUCEPOSNFUNC */

#if YYDEBUG
  const char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yym = 0;
  yyn = 0;
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
#ifdef YYPOSN
  yyps->psp = yyps->ps;
#endif /* YYPOSN */
  *(yyps->ssp) = yystate = 0;
  

  /*
  ** Main parsing loop
  */
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  /*
  ** Read one token
  */
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     (int)yydepth, yytrial!=0, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  /*
  ** Do we have a conflict?
  */
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful "
	       "trial parse\n", (int)yydepth, yytrial!=0, yystate);
      }
#endif
      /* Switch to the next conflict context */
      struct yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       (int)yydepth, yytrial!=0, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      struct yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 yytrial!=0);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        /* If this is a first conflict in the stack, start saving lexemes */
        if (!yylexemes) {
#ifdef __cplusplus
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
#ifdef YYPOSN
          yylpsns = new YYPOSN[YYSTACKGROWTH];
#endif /* YYPOSN */
#else
          yylexemes = malloc(sizeof(Yshort) * YYSTACKGROWTH);
          yylvals = malloc(sizeof(YYSTYPE) * YYSTACKGROWTH);
#ifdef YYPOSN
          yylpsns = malloc(sizeof(YYPOSN) * YYSTACKGROWTH);
#endif /* YYPOSN */
#endif
          yylvlim = yylvals + YYSTACKGROWTH; 
#ifdef YYPOSN
          yylplim = yylpsns + YYSTACKGROWTH; 
#endif /* YYPOSN */
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
#ifdef YYPOSN
	  yylpp = yylpe = yylpsns;
#endif /* YYPOSN */
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
#ifdef YYPOSN
            *yylpe++ = yyposn;
#endif /* YYPOSN */
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--;
#ifdef YYPOSN
	yylpp--;
#endif /* YYPOSN */
	yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               (int)yydepth, yytrial!=0, yystate, yyctable[ctry]);
#endif
      if (yychar < 0) {
        yylvp++;
#ifdef YYPOSN
	yylpp++;
#endif /* YYPOSN */
	yylexp++;
      }
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  /*
  ** Is action a shift?
  */
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             (int)yydepth, yytrial!=0, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
#ifdef YYPOSN
    *++(yyps->psp) = yyposn;
#endif /* YYPOSN */
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }
  yym = 0;  /* no reduction to clean up after */

  /*
  ** Action: error
  */
  if (yyps->errflag) goto yyinrecovery;
  else goto yyerrlab;	/* redundant goto to avoid 'unused label' warnings */
yyerrlab:
  /* explicit YYERROR from an action -- pop the rhs of the rule reduced
   * before looking for error recovery */
  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yynewerrflag = 1;
  goto yyerrhandler;
  goto yyerrquiet; /* redundant goto to avoid 'unused label' warnings */
yyerrquiet:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) {
    int ctry; 
    struct yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to "
	     "state %d, %d tokens\n", (int)yydepth, yytrial!=0, yystate,
	     yyps->save->state, (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
    /* Memorize most forward-looking error state in case
     * it's really an error. */
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      /* Free old saved error context state */
      if(yyerrctx) YYFreeState(yyerrctx);
      /* Create and fill out new saved error context state */
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      memcpy(yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yychar = -1;
    yylexp = yylexemes + save->lexeme;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    yylvp = yylvals + save->lexeme;
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
    yylpp  = yylpsns + save->lexeme;
    yyps->psp = yyps->ps + (save->psp - save->ps);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
    ctry = ++save->ctry;
    yystate = save->state;
    /* We tried shift, try reduce now */
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    /*
    ** Nothing left on the stack -- error
    */
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial!=0);
      }
#endif
      /* Restore state as it was in the most forward-advanced error */
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      memcpy(yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      yylvp = yylvals   + yyerrctx->lexeme;
      yylval = yylvp[-1];
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yyposn = yylpp[-1];
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state "
	         "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yytable[yyn]);
#endif
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 (int)yydepth, yytrial!=0, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
#ifdef YYDESTRUCT
	YYDESTRUCT(yytrial!=0, yyastable[yyps->ssp[0]], yyps->vsp, yyps->psp);
#endif /* YYDESTRUCT */
        --(yyps->ssp);
        --(yyps->vsp);
#ifdef YYPOSN
        --(yyps->psp);
#endif /* YYPOSN */
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d "
	     "(%s)\n", (int)yydepth, yytrial!=0, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
#ifdef YYDESTRUCT
    if (yychar > 0)
      YYDESTRUCT(yytrial!=0, yyastable[yyttable[yychar]], &yylval, &yyposn);
#endif /* YYDESTRUCT */
    yychar = (-1);
    goto yyloop;
  }

  /*
  ** Reduce the rule
  */
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           (int)yydepth, yytrial!=0, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = $1" default action */
  yyval = yyvsp[0];

#ifdef YYPOSN
  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling
     is present */
#ifndef YYPOSN_CONSTRUCTOR
  memset(&yyps->pos, 0, sizeof(yyps->pos));
#endif
#ifdef YYREDUCEPOSNFUNC
  reduce_posn = 1;
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

  switch (yyn) {

case 1:
#line 421 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9006 "parser.tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/src/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType(CppCompoundType::kCppFile);
                  }
#line 9014 "parser.tab.c"
break;
case 2:
#line 428 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9019 "parser.tab.c"
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = nullptr;
                  }
#line 9025 "parser.tab.c"
break;
case 3:
#line 431 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9030 "parser.tab.c"
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                  }
#line 9036 "parser.tab.c"
break;
case 4:
#line 436 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9041 "parser.tab.c"
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = newCompound(gAccessTypeStack.empty() ? gCurAccessType : gAccessTypeStack.top());
                    if (yyvsp[0].cppObj)
                    {
                      yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                    } /* Avoid 'comment-btyacc-constructs.sh' to act on this*/
                  }
#line 9051 "parser.tab.c"
break;
case 5:
#line 443 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9056 "parser.tab.c"
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gAccessTypeStack.empty() ? gCurAccessType : gAccessTypeStack.top()) : yyvsp[-1].cppCompundObj;
                    if (yyvsp[0].cppObj)
                    {
                      yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                    } /* Avoid 'comment-btyacc-constructs.sh' to act on this*/
                  }
#line 9066 "parser.tab.c"
break;
case 6:
#line 450 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9071 "parser.tab.c"
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurAccessType = yyvsp[0].objAccessType; }
#line 9075 "parser.tab.c"
break;
case 7:
#line 453 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9080 "parser.tab.c"
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 9084 "parser.tab.c"
break;
case 8:
#line 454 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9089 "parser.tab.c"
  if (!yytrial)
#line 454 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 9093 "parser.tab.c"
break;
case 9:
#line 455 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9098 "parser.tab.c"
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 9102 "parser.tab.c"
break;
case 10:
#line 456 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9107 "parser.tab.c"
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 9111 "parser.tab.c"
break;
case 11:
#line 457 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9116 "parser.tab.c"
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].typedefName; }
#line 9120 "parser.tab.c"
break;
case 12:
#line 458 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9125 "parser.tab.c"
  if (!yytrial)
#line 458 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].typedefList; }
#line 9129 "parser.tab.c"
break;
case 13:
#line 459 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9134 "parser.tab.c"
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 9138 "parser.tab.c"
break;
case 14:
#line 460 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9143 "parser.tab.c"
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 9147 "parser.tab.c"
break;
case 15:
#line 461 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9152 "parser.tab.c"
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 9156 "parser.tab.c"
break;
case 16:
#line 462 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9161 "parser.tab.c"
  if (!yytrial)
#line 462 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 9165 "parser.tab.c"
break;
case 17:
#line 463 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9170 "parser.tab.c"
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 9174 "parser.tab.c"
break;
case 18:
#line 464 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9179 "parser.tab.c"
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 9183 "parser.tab.c"
break;
case 19:
#line 465 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9188 "parser.tab.c"
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 9192 "parser.tab.c"
break;
case 20:
#line 466 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9197 "parser.tab.c"
  if (!yytrial)
#line 466 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 9201 "parser.tab.c"
break;
case 21:
#line 467 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9206 "parser.tab.c"
  if (!yytrial)
#line 467 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 9210 "parser.tab.c"
break;
case 22:
#line 468 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9215 "parser.tab.c"
  if (!yytrial)
#line 468 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].forRangeBlock; }
#line 9219 "parser.tab.c"
break;
case 23:
#line 469 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9224 "parser.tab.c"
  if (!yytrial)
#line 469 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 9228 "parser.tab.c"
break;
case 24:
#line 470 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9233 "parser.tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 9237 "parser.tab.c"
break;
case 25:
#line 471 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9242 "parser.tab.c"
  if (!yytrial)
#line 471 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 9246 "parser.tab.c"
break;
case 26:
#line 472 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9251 "parser.tab.c"
  if (!yytrial)
#line 472 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 9255 "parser.tab.c"
break;
case 27:
#line 473 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9260 "parser.tab.c"
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 9264 "parser.tab.c"
break;
case 28:
#line 474 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9269 "parser.tab.c"
  if (!yytrial)
#line 474 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 9273 "parser.tab.c"
break;
case 29:
#line 475 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9278 "parser.tab.c"
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 9282 "parser.tab.c"
break;
case 30:
#line 476 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9287 "parser.tab.c"
  if (!yytrial)
#line 476 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 9291 "parser.tab.c"
break;
case 31:
#line 477 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9296 "parser.tab.c"
  if (!yytrial)
#line 477 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 9300 "parser.tab.c"
break;
case 32:
#line 478 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9305 "parser.tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 9309 "parser.tab.c"
break;
case 33:
#line 479 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9314 "parser.tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 9318 "parser.tab.c"
break;
case 34:
#line 480 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9323 "parser.tab.c"
  if (!yytrial)
#line 480 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 9327 "parser.tab.c"
break;
case 35:
#line 481 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9332 "parser.tab.c"
  if (!yytrial)
#line 481 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].switchBlock; }
#line 9336 "parser.tab.c"
break;
case 36:
#line 482 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9341 "parser.tab.c"
  if (!yytrial)
#line 482 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].tryBlock; }
#line 9345 "parser.tab.c"
break;
case 37:
#line 483 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9350 "parser.tab.c"
  if (!yytrial)
#line 483 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].usingDecl; }
#line 9354 "parser.tab.c"
break;
case 38:
#line 484 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9359 "parser.tab.c"
  if (!yytrial)
#line 484 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].usingNamespaceDecl; }
#line 9363 "parser.tab.c"
break;
case 39:
#line 485 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9368 "parser.tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].namespaceAlias; }
#line 9372 "parser.tab.c"
break;
case 40:
#line 486 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9377 "parser.tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = new CppMacroCall(yyvsp[0].str, gCurAccessType); }
#line 9381 "parser.tab.c"
break;
case 41:
#line 487 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9386 "parser.tab.c"
  if (!yytrial)
#line 487 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = new CppMacroCall(mergeCppToken(yyvsp[-1].str, yyvsp[0].str), gCurAccessType); }
#line 9390 "parser.tab.c"
break;
case 42:
#line 488 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9395 "parser.tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = new CppMacroCall(mergeCppToken(yyvsp[-1].str, yyvsp[0].str), gCurAccessType); }
#line 9399 "parser.tab.c"
break;
case 43:
#line 489 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9404 "parser.tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = nullptr; }
#line 9408 "parser.tab.c"
break;
case 44:
#line 490 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9413 "parser.tab.c"
  if (!yytrial)
#line 490 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].asmBlock; }
#line 9417 "parser.tab.c"
break;
case 45:
#line 491 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9422 "parser.tab.c"
  if (!yytrial)
#line 491 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].blob; }
#line 9426 "parser.tab.c"
break;
case 46:
#line 492 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9431 "parser.tab.c"
  if (!yytrial)
#line 492 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].label; }
#line 9435 "parser.tab.c"
break;
case 47:
#line 495 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9440 "parser.tab.c"
  if (!yytrial)
#line 495 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.label = new CppLabel(yyvsp[-1].str); }
#line 9444 "parser.tab.c"
break;
case 48:
#line 498 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9449 "parser.tab.c"
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 9453 "parser.tab.c"
break;
case 49:
#line 499 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9458 "parser.tab.c"
  if (!yytrial)
#line 499 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 9462 "parser.tab.c"
break;
case 50:
#line 500 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9467 "parser.tab.c"
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 9471 "parser.tab.c"
break;
case 51:
#line 501 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9476 "parser.tab.c"
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashImport; }
#line 9480 "parser.tab.c"
break;
case 52:
#line 502 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9485 "parser.tab.c"
  if (!yytrial)
#line 502 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 9489 "parser.tab.c"
break;
case 53:
#line 503 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9494 "parser.tab.c"
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashError; }
#line 9498 "parser.tab.c"
break;
case 54:
#line 504 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9503 "parser.tab.c"
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashWarning; }
#line 9507 "parser.tab.c"
break;
case 55:
#line 505 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9512 "parser.tab.c"
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 9516 "parser.tab.c"
break;
case 56:
#line 508 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9521 "parser.tab.c"
  if (!yytrial)
#line 508 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.asmBlock = new CppAsmBlock(yyvsp[0].str); }
#line 9525 "parser.tab.c"
break;
case 57:
#line 511 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str;}
#line 9530 "parser.tab.c"
break;
case 58:
  if (!yytrial)
#line 511 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 9536 "parser.tab.c"
break;
case 59:
#line 512 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 9541 "parser.tab.c"
break;
case 60:
  if (!yytrial)
#line 512 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 9547 "parser.tab.c"
break;
case 61:
#line 513 "/home/dassat/github/cppparser/src/parser.y"
{
                    ZZLOG;
                    yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str);
                    delete yyvsp[-1].cppExprObj;
                  }
#line 9556 "parser.tab.c"
break;
case 62:
  if (!yytrial)
#line 517 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 9562 "parser.tab.c"
break;
case 63:
#line 520 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9567 "parser.tab.c"
  if (!yytrial)
#line 520 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.switchBlock = new CppSwitchBlock(yyvsp[-4].cppExprObj, yyvsp[-1].switchBody);
                  }
#line 9573 "parser.tab.c"
break;
case 64:
#line 525 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9578 "parser.tab.c"
  if (!yytrial)
#line 525 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.switchBody = new CppSwitchBody;
                  }
#line 9584 "parser.tab.c"
break;
case 65:
#line 528 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9589 "parser.tab.c"
  if (!yytrial)
#line 528 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.switchBody = yyvsp[-4].switchBody;
                    yyval.switchBody->emplace_back(yyvsp[-2].cppExprObj, yyvsp[0].cppCompundObj);
                  }
#line 9596 "parser.tab.c"
break;
case 66:
#line 532 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9601 "parser.tab.c"
  if (!yytrial)
#line 532 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.switchBody = yyvsp[-3].switchBody;
                    yyval.switchBody->emplace_back(nullptr, yyvsp[0].cppCompundObj);
                  }
#line 9608 "parser.tab.c"
break;
case 67:
#line 536 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9613 "parser.tab.c"
  if (!yytrial)
#line 536 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.switchBody = yyvsp[0].switchBody; }
#line 9617 "parser.tab.c"
break;
case 68:
#line 537 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9622 "parser.tab.c"
  if (!yytrial)
#line 537 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.switchBody = yyvsp[-1].switchBody; }
#line 9626 "parser.tab.c"
break;
case 69:
#line 540 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9631 "parser.tab.c"
  if (!yytrial)
#line 540 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj;
                    if (yyval.cppCompundObj == nullptr)
                      yyval.cppCompundObj = newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock);
                    else
                      yyval.cppCompundObj->compoundType(CppCompoundType::kBlock);
                  }
#line 9641 "parser.tab.c"
break;
case 70:
#line 547 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9646 "parser.tab.c"
  if (!yytrial)
#line 547 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                  }
#line 9652 "parser.tab.c"
break;
case 71:
#line 552 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9657 "parser.tab.c"
  if (!yytrial)
#line 552 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9663 "parser.tab.c"
break;
case 72:
#line 555 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9668 "parser.tab.c"
  if (!yytrial)
#line 555 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppVarObj, yyvsp[0].cppObj);
                  }
#line 9674 "parser.tab.c"
break;
case 73:
#line 558 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9679 "parser.tab.c"
  if (!yytrial)
#line 558 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->elsePart(yyvsp[0].cppObj);
                  }
#line 9686 "parser.tab.c"
break;
case 74:
#line 564 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9691 "parser.tab.c"
  if (!yytrial)
#line 564 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9697 "parser.tab.c"
break;
case 75:
#line 567 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9702 "parser.tab.c"
  if (!yytrial)
#line 567 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppVarObj, yyvsp[0].cppObj);
                  }
#line 9708 "parser.tab.c"
break;
case 76:
#line 572 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9713 "parser.tab.c"
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj, yyvsp[-4].cppObj);
                  }
#line 9719 "parser.tab.c"
break;
case 77:
#line 577 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9724 "parser.tab.c"
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9730 "parser.tab.c"
break;
case 78:
#line 580 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9735 "parser.tab.c"
  if (!yytrial)
#line 580 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppVarObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9741 "parser.tab.c"
break;
case 79:
#line 583 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9746 "parser.tab.c"
  if (!yytrial)
#line 583 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppVarObjList, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9752 "parser.tab.c"
break;
case 80:
#line 588 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9757 "parser.tab.c"
  if (!yytrial)
#line 588 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.forRangeBlock = new CppRangeForBlock(yyvsp[-4].cppVarObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 9763 "parser.tab.c"
break;
case 81:
#line 593 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9768 "parser.tab.c"
  if (!yytrial)
#line 593 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.tryBlock = new CppTryBlock(yyvsp[-1].cppCompundObj, yyvsp[0].catchBlock);
                  }
#line 9774 "parser.tab.c"
break;
case 82:
#line 596 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9779 "parser.tab.c"
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.tryBlock = yyvsp[-1].tryBlock;
                    yyval.tryBlock->addCatchBlock(yyvsp[0].catchBlock);
                  }
#line 9786 "parser.tab.c"
break;
case 83:
#line 602 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9791 "parser.tab.c"
  if (!yytrial)
#line 602 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.catchBlock = new CppCatchBlock{CppVarTypePtr(yyvsp[-3].cppVarType), yyvsp[-2].str, CppCompoundPtr(yyvsp[0].cppCompundObj)};
                  }
#line 9797 "parser.tab.c"
break;
case 84:
  if (!yytrial)
#line 607 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 9805 "parser.tab.c"
break;
case 85:
#line 610 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9810 "parser.tab.c"
  if (!yytrial)
#line 610 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 9816 "parser.tab.c"
break;
case 86:
#line 613 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9821 "parser.tab.c"
  if (!yytrial)
#line 613 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 9827 "parser.tab.c"
break;
case 87:
#line 618 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9832 "parser.tab.c"
  if (!yytrial)
#line 618 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kRename, yyvsp[-1].str, yyvsp[0].str);
                  }
#line 9838 "parser.tab.c"
break;
case 88:
#line 621 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9843 "parser.tab.c"
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kRename, yyvsp[0].str);
                  }
#line 9849 "parser.tab.c"
break;
case 89:
#line 624 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9854 "parser.tab.c"
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kConstNumDef, yyvsp[-1].str, yyvsp[0].str);
                  }
#line 9860 "parser.tab.c"
break;
case 90:
#line 627 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9865 "parser.tab.c"
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kConstStrDef, yyvsp[-1].str, yyvsp[0].str);
                  }
#line 9871 "parser.tab.c"
break;
case 91:
#line 630 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9876 "parser.tab.c"
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kConstCharDef, yyvsp[-1].str, yyvsp[0].str);
                  }
#line 9882 "parser.tab.c"
break;
case 92:
#line 633 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9887 "parser.tab.c"
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.hashDefine = new CppDefine(CppDefine::kComplexMacro, yyvsp[-1].str, yyvsp[0].str);
                  }
#line 9893 "parser.tab.c"
break;
case 93:
#line 638 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9898 "parser.tab.c"
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 9902 "parser.tab.c"
break;
case 94:
#line 641 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9907 "parser.tab.c"
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 9911 "parser.tab.c"
break;
case 95:
#line 642 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9916 "parser.tab.c"
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 9920 "parser.tab.c"
break;
case 96:
#line 645 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9925 "parser.tab.c"
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashImport = new CppImport((std::string) yyvsp[0].str); }
#line 9929 "parser.tab.c"
break;
case 97:
#line 646 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9934 "parser.tab.c"
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashImport = new CppImport((std::string) yyvsp[0].str); }
#line 9938 "parser.tab.c"
break;
case 98:
#line 649 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9943 "parser.tab.c"
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 9947 "parser.tab.c"
break;
case 99:
#line 650 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9952 "parser.tab.c"
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 9956 "parser.tab.c"
break;
case 100:
#line 651 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9961 "parser.tab.c"
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 9965 "parser.tab.c"
break;
case 101:
#line 652 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9970 "parser.tab.c"
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 9974 "parser.tab.c"
break;
case 102:
#line 653 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9979 "parser.tab.c"
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 9983 "parser.tab.c"
break;
case 103:
#line 654 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9988 "parser.tab.c"
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 9992 "parser.tab.c"
break;
case 104:
#line 655 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 9997 "parser.tab.c"
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 10001 "parser.tab.c"
break;
case 105:
#line 658 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10006 "parser.tab.c"
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashError = new CppHashError(yyvsp[0].str); }
#line 10010 "parser.tab.c"
break;
case 106:
#line 659 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10015 "parser.tab.c"
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashError = new CppHashError(mergeCppToken(yyvsp[-1].str, yyvsp[0].str)); }
#line 10019 "parser.tab.c"
break;
case 107:
#line 662 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10024 "parser.tab.c"
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashWarning = new CppHashWarning(yyvsp[0].str); }
#line 10028 "parser.tab.c"
break;
case 108:
#line 663 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10033 "parser.tab.c"
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashWarning = new CppHashWarning(mergeCppToken(yyvsp[-1].str, yyvsp[0].str)); }
#line 10037 "parser.tab.c"
break;
case 109:
#line 666 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10042 "parser.tab.c"
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 10046 "parser.tab.c"
break;
case 110:
#line 669 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10051 "parser.tab.c"
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurAccessType); }
#line 10055 "parser.tab.c"
break;
case 111:
#line 672 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10060 "parser.tab.c"
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10064 "parser.tab.c"
break;
case 112:
#line 673 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10069 "parser.tab.c"
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10073 "parser.tab.c"
break;
case 113:
#line 674 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10078 "parser.tab.c"
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10082 "parser.tab.c"
break;
case 114:
#line 675 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10087 "parser.tab.c"
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10091 "parser.tab.c"
break;
case 115:
#line 678 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10096 "parser.tab.c"
break;
case 116:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10102 "parser.tab.c"
break;
case 117:
#line 679 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 10107 "parser.tab.c"
break;
case 118:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10113 "parser.tab.c"
break;
case 119:
#line 680 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10118 "parser.tab.c"
break;
case 120:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10124 "parser.tab.c"
break;
case 121:
#line 681 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10129 "parser.tab.c"
break;
case 122:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10135 "parser.tab.c"
break;
case 123:
#line 682 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; /* override is not a reserved keyword */ }
#line 10140 "parser.tab.c"
break;
case 124:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10146 "parser.tab.c"
break;
case 125:
#line 683 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10151 "parser.tab.c"
break;
case 126:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10157 "parser.tab.c"
break;
case 127:
#line 684 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10162 "parser.tab.c"
break;
case 128:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10168 "parser.tab.c"
break;
case 129:
#line 685 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10173 "parser.tab.c"
break;
case 130:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10179 "parser.tab.c"
break;
case 131:
#line 688 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10184 "parser.tab.c"
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10188 "parser.tab.c"
break;
case 132:
#line 689 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10193 "parser.tab.c"
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10197 "parser.tab.c"
break;
case 133:
#line 690 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10202 "parser.tab.c"
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10206 "parser.tab.c"
break;
case 134:
#line 691 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10211 "parser.tab.c"
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10215 "parser.tab.c"
break;
case 135:
#line 692 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10220 "parser.tab.c"
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10224 "parser.tab.c"
break;
case 136:
#line 693 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10229 "parser.tab.c"
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10233 "parser.tab.c"
break;
case 137:
#line 696 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10238 "parser.tab.c"
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10242 "parser.tab.c"
break;
case 138:
#line 697 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10247 "parser.tab.c"
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10251 "parser.tab.c"
break;
case 139:
#line 698 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10256 "parser.tab.c"
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 10260 "parser.tab.c"
break;
case 140:
#line 699 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10265 "parser.tab.c"
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10269 "parser.tab.c"
break;
case 141:
#line 700 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10274 "parser.tab.c"
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10278 "parser.tab.c"
break;
case 142:
#line 701 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10283 "parser.tab.c"
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10287 "parser.tab.c"
break;
case 143:
#line 702 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10292 "parser.tab.c"
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10296 "parser.tab.c"
break;
case 144:
#line 703 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gTemplateParamStart == yyvsp[-1].str.sz)
                      ZZERROR;
                    else
                      ZZLOG;
                  }{ZZLOG;}
#line 10306 "parser.tab.c"
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10310 "parser.tab.c"
break;
case 145:
#line 709 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10315 "parser.tab.c"
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10319 "parser.tab.c"
break;
case 146:
#line 710 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10324 "parser.tab.c"
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10328 "parser.tab.c"
break;
case 147:
#line 711 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10333 "parser.tab.c"
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10337 "parser.tab.c"
break;
case 148:
#line 712 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10342 "parser.tab.c"
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10346 "parser.tab.c"
break;
case 149:
#line 713 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10351 "parser.tab.c"
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); delete yyvsp[-1].cppExprObj; }
#line 10355 "parser.tab.c"
break;
case 150:
#line 716 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 10360 "parser.tab.c"
break;
case 151:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10366 "parser.tab.c"
break;
case 152:
#line 719 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 10371 "parser.tab.c"
break;
case 153:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10377 "parser.tab.c"
break;
case 154:
#line 722 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str;}
#line 10382 "parser.tab.c"
break;
case 155:
  if (!yytrial)
#line 722 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10388 "parser.tab.c"
break;
case 156:
#line 725 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.str = yyvsp[0].str; }
#line 10393 "parser.tab.c"
break;
case 157:
  if (!yytrial)
#line 725 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 10399 "parser.tab.c"
break;
case 158:
#line 728 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10404 "parser.tab.c"
  if (!yytrial)
#line 728 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = makeCppToken(nullptr, nullptr); }
#line 10408 "parser.tab.c"
break;
case 159:
#line 729 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10413 "parser.tab.c"
  if (!yytrial)
#line 729 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 10417 "parser.tab.c"
break;
case 160:
#line 732 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10422 "parser.tab.c"
  if (!yytrial)
#line 732 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 10426 "parser.tab.c"
break;
case 161:
#line 733 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10431 "parser.tab.c"
  if (!yytrial)
#line 733 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 10435 "parser.tab.c"
break;
case 162:
#line 734 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10440 "parser.tab.c"
  if (!yytrial)
#line 734 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 10444 "parser.tab.c"
break;
case 163:
#line 735 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10449 "parser.tab.c"
  if (!yytrial)
#line 735 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].cppObj);     }
#line 10453 "parser.tab.c"
break;
case 164:
#line 736 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10458 "parser.tab.c"
  if (!yytrial)
#line 736 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 10462 "parser.tab.c"
break;
case 165:
#line 737 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10467 "parser.tab.c"
  if (!yytrial)
#line 737 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blob);     }
#line 10471 "parser.tab.c"
break;
case 166:
#line 740 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10476 "parser.tab.c"
  if (!yytrial)
#line 740 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.blob = new CppBlob(yyvsp[0].str);         }
#line 10480 "parser.tab.c"
break;
case 167:
#line 743 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10485 "parser.tab.c"
  if (!yytrial)
#line 743 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.enumItemList = 0; }
#line 10489 "parser.tab.c"
break;
case 168:
#line 744 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10494 "parser.tab.c"
  if (!yytrial)
#line 744 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 10501 "parser.tab.c"
break;
case 169:
#line 748 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10506 "parser.tab.c"
  if (!yytrial)
#line 748 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 10513 "parser.tab.c"
break;
case 170:
#line 752 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10518 "parser.tab.c"
  if (!yytrial)
#line 752 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 10524 "parser.tab.c"
break;
case 171:
#line 757 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10529 "parser.tab.c"
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-3].str, yyvsp[-1].enumItemList);
                  }
#line 10535 "parser.tab.c"
break;
case 172:
#line 760 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10540 "parser.tab.c"
  if (!yytrial)
#line 760 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-5].str, yyvsp[-1].enumItemList, false, yyvsp[-3].str);
                  }
#line 10546 "parser.tab.c"
break;
case 173:
#line 763 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10551 "parser.tab.c"
  if (!yytrial)
#line 763 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, "", yyvsp[-1].enumItemList, false, yyvsp[-3].str);
                  }
#line 10557 "parser.tab.c"
break;
case 174:
#line 766 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10562 "parser.tab.c"
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-3].str, yyvsp[-1].enumItemList, false);
                  }
#line 10568 "parser.tab.c"
break;
case 175:
#line 769 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10573 "parser.tab.c"
  if (!yytrial)
#line 769 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-5].str, yyvsp[-1].enumItemList, true, yyvsp[-3].str);
                  }
#line 10579 "parser.tab.c"
break;
case 176:
#line 772 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10584 "parser.tab.c"
  if (!yytrial)
#line 772 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-3].str, yyvsp[-1].enumItemList, true);
                  }
#line 10590 "parser.tab.c"
break;
case 177:
#line 775 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10595 "parser.tab.c"
  if (!yytrial)
#line 775 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[0].str, yyvsp[-2].enumItemList);
                  }
#line 10601 "parser.tab.c"
break;
case 178:
#line 780 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10606 "parser.tab.c"
  if (!yytrial)
#line 780 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppEnum = yyvsp[-1].cppEnum; }
#line 10610 "parser.tab.c"
break;
case 179:
#line 783 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10615 "parser.tab.c"
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 10621 "parser.tab.c"
break;
case 180:
#line 786 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10626 "parser.tab.c"
  if (!yytrial)
#line 786 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 10632 "parser.tab.c"
break;
case 181:
#line 789 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10637 "parser.tab.c"
  if (!yytrial)
#line 789 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurAccessType, yyvsp[-1].str, nullptr, true);
                  }
#line 10643 "parser.tab.c"
break;
case 182:
#line 794 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10648 "parser.tab.c"
  if (!yytrial)
#line 794 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->addAttr(kTypedef);
                    yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 10655 "parser.tab.c"
break;
case 183:
#line 799 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10660 "parser.tab.c"
  if (!yytrial)
#line 799 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typedefName = yyvsp[-1].typedefName; }
#line 10664 "parser.tab.c"
break;
case 184:
#line 802 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10669 "parser.tab.c"
  if (!yytrial)
#line 802 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typedefList = yyvsp[-1].typedefList; }
#line 10673 "parser.tab.c"
break;
case 185:
#line 805 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10678 "parser.tab.c"
  if (!yytrial)
#line 805 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typedefList = new CppTypedefList(yyvsp[0].cppVarObjList); }
#line 10682 "parser.tab.c"
break;
case 186:
#line 808 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10687 "parser.tab.c"
  if (!yytrial)
#line 808 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typedefName = new CppTypedefName(yyvsp[0].cppVarObj); }
#line 10691 "parser.tab.c"
break;
case 187:
#line 811 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10696 "parser.tab.c"
  if (!yytrial)
#line 811 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppVarType);
                  }
#line 10702 "parser.tab.c"
break;
case 188:
#line 814 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10707 "parser.tab.c"
  if (!yytrial)
#line 814 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppFuncPointerObj);
                  }
#line 10713 "parser.tab.c"
break;
case 189:
#line 817 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10718 "parser.tab.c"
  if (!yytrial)
#line 817 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppFuncPointerObj);
                  }
#line 10724 "parser.tab.c"
break;
case 190:
#line 820 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10729 "parser.tab.c"
  if (!yytrial)
#line 820 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppCompundObj);
                  }
#line 10735 "parser.tab.c"
break;
case 191:
#line 823 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10740 "parser.tab.c"
  if (!yytrial)
#line 823 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = yyvsp[0].usingDecl;
                    yyval.usingDecl->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 10747 "parser.tab.c"
break;
case 192:
#line 827 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10752 "parser.tab.c"
  if (!yytrial)
#line 827 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-1].str, gCurAccessType);
                  }
#line 10758 "parser.tab.c"
break;
case 193:
#line 833 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10763 "parser.tab.c"
  if (!yytrial)
#line 833 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.namespaceAlias = new CppNamespaceAlias(yyvsp[-3].str, yyvsp[-1].str);
                  }
#line 10769 "parser.tab.c"
break;
case 194:
#line 838 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10774 "parser.tab.c"
  if (!yytrial)
#line 838 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.usingNamespaceDecl = new CppUsingNamespaceDecl(yyvsp[-1].str);
                  }
#line 10780 "parser.tab.c"
break;
case 195:
#line 843 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10785 "parser.tab.c"
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 10789 "parser.tab.c"
break;
case 196:
#line 844 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10794 "parser.tab.c"
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 10798 "parser.tab.c"
break;
case 197:
#line 847 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10803 "parser.tab.c"
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 10807 "parser.tab.c"
break;
case 198:
#line 848 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10812 "parser.tab.c"
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 10816 "parser.tab.c"
break;
case 199:
#line 849 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10821 "parser.tab.c"
  if (!yytrial)
#line 849 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObj = yyvsp[0].cppVarObj; yyval.cppVarObj->apidecor(yyvsp[-1].str); }
#line 10825 "parser.tab.c"
break;
case 200:
#line 850 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10830 "parser.tab.c"
  if (!yytrial)
#line 850 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObj = yyvsp[0].cppVarObj; yyval.cppVarObj->addAttr(yyvsp[-1].attr); }
#line 10834 "parser.tab.c"
break;
case 201:
#line 851 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 10839 "parser.tab.c"
  if (!yytrial)
#line 851 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarObj = yyvsp[0].cppVarObj; yyval.cppVarObj->addAttr(yyvsp[-1].attr); }
#line 10843 "parser.tab.c"
break;
case 202:
#line 854 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10848 "parser.tab.c"
  if (!yytrial)
#line 854 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-4].cppVarObj->addAttr(yyvsp[-5].attr);
                    yyval.cppVarObjList = new CppVarList(yyvsp[-4].cppVarObj, CppVarDeclInList(yyvsp[-2].typeModifier, CppVarDecl{yyvsp[-1].str}));
                    /* TODO: Use optvarassign as well */
                  }
#line 10856 "parser.tab.c"
break;
case 203:
#line 859 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10861 "parser.tab.c"
  if (!yytrial)
#line 859 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-4].cppVarObj->addAttr(yyvsp[-5].attr);
                    yyval.cppVarObjList = new CppVarList(yyvsp[-4].cppVarObj, CppVarDeclInList(yyvsp[-2].typeModifier, CppVarDecl{yyvsp[-1].str}));
                    /* TODO: Use optvarassign as well */
                  }
#line 10869 "parser.tab.c"
break;
case 204:
#line 864 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10874 "parser.tab.c"
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-6].cppVarObj->addAttr(yyvsp[-7].attr);
                    CppVarDecl var2(yyvsp[-3].str);
                    var2.addArraySize(yyvsp[-1].cppExprObj);
                    yyval.cppVarObjList = new CppVarList(yyvsp[-6].cppVarObj, CppVarDeclInList(yyvsp[-4].typeModifier, std::move(var2)));
                    /* TODO: Use optvarassign as well */
                  }
#line 10884 "parser.tab.c"
break;
case 205:
#line 871 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10889 "parser.tab.c"
  if (!yytrial)
#line 871 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-5].cppVarObj->addAttr(yyvsp[-6].attr);
                    yyval.cppVarObjList = new CppVarList(yyvsp[-5].cppVarObj, CppVarDeclInList(yyvsp[-3].typeModifier, CppVarDecl{yyvsp[-2].str}));
                    /* TODO: Use optvarassign as well */
                  }
#line 10897 "parser.tab.c"
break;
case 206:
#line 876 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10902 "parser.tab.c"
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-4].cppVarObjList;
                    yyval.cppVarObjList->addVarDecl(CppVarDeclInList(yyvsp[-2].typeModifier, CppVarDecl{yyvsp[-1].str}));
                    /* TODO: Use optvarassign as well */
                  }
#line 10910 "parser.tab.c"
break;
case 207:
#line 881 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10915 "parser.tab.c"
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-6].cppVarObjList;
                    yyval.cppVarObjList->addVarDecl(CppVarDeclInList(yyvsp[-4].typeModifier, CppVarDecl{yyvsp[-3].str}));
                    /* TODO: Use optvarassign as well */
                  }
#line 10923 "parser.tab.c"
break;
case 208:
#line 888 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-1].str.sz; ZZERROR;}
#line 10928 "parser.tab.c"
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10932 "parser.tab.c"
break;
case 209:
#line 889 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-2].str.sz; ZZERROR;}
#line 10937 "parser.tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10941 "parser.tab.c"
break;
case 210:
#line 890 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-2].str.sz; ZZERROR;}
#line 10946 "parser.tab.c"
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10950 "parser.tab.c"
break;
case 211:
#line 891 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-1].str.sz; ZZERROR;}
#line 10955 "parser.tab.c"
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10959 "parser.tab.c"
break;
case 212:
#line 892 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-1].str.sz; ZZERROR;}
#line 10964 "parser.tab.c"
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10968 "parser.tab.c"
break;
case 213:
#line 893 "/home/dassat/github/cppparser/src/parser.y"
{gParamModPos = yyvsp[-1].str.sz; ZZERROR;}
#line 10973 "parser.tab.c"
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10977 "parser.tab.c"
break;
case 214:
#line 894 "/home/dassat/github/cppparser/src/parser.y"
{ZZERROR;}
#line 10982 "parser.tab.c"
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/src/parser.y"
{ /*FuncDeclHack*/ yyval.cppVarObj = nullptr; }
#line 10986 "parser.tab.c"
break;
case 215:
#line 895 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 10991 "parser.tab.c"
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[-1].cppVarObj;
                    yyval.cppVarObj->assign(yyvsp[0].cppVarAssign.assignValue_, yyvsp[0].cppVarAssign.assignType_);
                  }
#line 10998 "parser.tab.c"
break;
case 216:
#line 899 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11003 "parser.tab.c"
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[0].cppVarObj;
                    yyval.cppVarObj->addAttr(kConstExpr);
                  }
#line 11010 "parser.tab.c"
break;
case 217:
#line 905 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11015 "parser.tab.c"
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarAssign = CppVarAssign{yyvsp[0].cppExprObj, AssignType::kUsingEqual};
                  }
#line 11021 "parser.tab.c"
break;
case 218:
#line 908 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11026 "parser.tab.c"
  if (!yytrial)
#line 908 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarAssign = CppVarAssign{yyvsp[-1].cppExprObj, AssignType::kUsingBracket};
                  }
#line 11032 "parser.tab.c"
break;
case 219:
#line 911 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11037 "parser.tab.c"
  if (!yytrial)
#line 911 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarAssign = CppVarAssign{yyvsp[-1].cppExprObj, AssignType::kUsingBraces};
                  }
#line 11043 "parser.tab.c"
break;
case 220:
#line 916 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11048 "parser.tab.c"
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarAssign = CppVarAssign{nullptr, AssignType::kNone}; }
#line 11052 "parser.tab.c"
break;
case 221:
#line 917 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11057 "parser.tab.c"
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppVarAssign = yyvsp[0].cppVarAssign; }
#line 11061 "parser.tab.c"
break;
case 222:
#line 920 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11066 "parser.tab.c"
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = new CppVar(yyvsp[-1].cppVarType, yyvsp[0].str.toString());
                  }
#line 11072 "parser.tab.c"
break;
case 223:
#line 923 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11077 "parser.tab.c"
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = new CppVar(yyvsp[-2].cppVarType, yyvsp[0].str.toString());
                    yyval.cppVarObj->apidecor(yyvsp[-1].str);
                  }
#line 11084 "parser.tab.c"
break;
case 224:
#line 927 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11089 "parser.tab.c"
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurAccessType, yyvsp[0].cppFuncPointerObj, CppTypeModifier());
                  }
#line 11095 "parser.tab.c"
break;
case 225:
#line 930 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11100 "parser.tab.c"
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->addArraySize(yyvsp[-1].cppExprObj);
                  }
#line 11107 "parser.tab.c"
break;
case 226:
#line 934 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11112 "parser.tab.c"
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->addArraySize(nullptr);
                  }
#line 11119 "parser.tab.c"
break;
case 227:
#line 938 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11124 "parser.tab.c"
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->bitField(yyvsp[0].cppExprObj);
                  }
#line 11131 "parser.tab.c"
break;
case 228:
#line 942 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11136 "parser.tab.c"
  if (!yytrial)
#line 942 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[0].cppVarObj;
                    yyval.cppVarObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 11143 "parser.tab.c"
break;
case 229:
#line 946 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11148 "parser.tab.c"
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarObj = yyvsp[0].cppVarObj;
                    yyval.cppVarObj->addAttr(yyvsp[-1].attr);
                  }
#line 11155 "parser.tab.c"
break;
case 230:
#line 952 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11160 "parser.tab.c"
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[-1].str, yyvsp[0].typeModifier);
                    yyval.cppVarType->attribSpecifierSequence(yyvsp[-2].attribSpecifiers);
                  }
#line 11167 "parser.tab.c"
break;
case 231:
#line 956 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11172 "parser.tab.c"
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[-1].str, yyvsp[0].typeModifier);
                  }
#line 11178 "parser.tab.c"
break;
case 232:
#line 959 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gTemplateParamStart == yyvsp[-2].str.sz)
                      ZZERROR;
                    else
                      ZZLOG;
                  }
#line 11188 "parser.tab.c"
  if (!yytrial)
#line 964 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, mergeCppToken(yyvsp[-2].str, yyvsp[-1].str), yyvsp[0].typeModifier);
                  }
#line 11194 "parser.tab.c"
break;
case 233:
#line 967 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11199 "parser.tab.c"
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, mergeCppToken(yyvsp[-3].str, yyvsp[-1].str), yyvsp[0].typeModifier);
                  }
#line 11205 "parser.tab.c"
break;
case 234:
#line 970 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11210 "parser.tab.c"
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, mergeCppToken(yyvsp[-3].str, yyvsp[-1].str), yyvsp[0].typeModifier);
                  }
#line 11216 "parser.tab.c"
break;
case 235:
#line 973 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11221 "parser.tab.c"
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, mergeCppToken(yyvsp[-2].str, yyvsp[-1].str), yyvsp[0].typeModifier);
                  }
#line 11227 "parser.tab.c"
break;
case 236:
#line 976 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11232 "parser.tab.c"
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[0].cppFuncPointerObj, CppTypeModifier());
                  }
#line 11238 "parser.tab.c"
break;
case 237:
#line 979 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11243 "parser.tab.c"
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[0].cppCompundObj, CppTypeModifier());
                  }
#line 11249 "parser.tab.c"
break;
case 238:
#line 982 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11254 "parser.tab.c"
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[-1].cppCompundObj, yyvsp[0].typeModifier);
                  }
#line 11260 "parser.tab.c"
break;
case 239:
#line 985 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11265 "parser.tab.c"
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[0].cppEnum, CppTypeModifier());
                  }
#line 11271 "parser.tab.c"
break;
case 240:
#line 988 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11276 "parser.tab.c"
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurAccessType, yyvsp[-1].cppEnum, yyvsp[0].typeModifier);
                  }
#line 11282 "parser.tab.c"
break;
case 241:
#line 991 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11287 "parser.tab.c"
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = yyvsp[0].cppVarType;
                    yyval.cppVarType->addAttr(yyvsp[-1].attr);
                  }
#line 11294 "parser.tab.c"
break;
case 242:
#line 995 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11299 "parser.tab.c"
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppVarType = yyvsp[-1].cppVarType;
                    yyval.cppVarType->paramPack_ = true;
                  }
#line 11306 "parser.tab.c"
break;
case 243:
#line 999 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11311 "parser.tab.c"
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/src/parser.y"
{
                    /* reference to member declrations. E.g.:*/
                    /* int GrCCStrokeGeometry::InstanceTallies::* InstanceType*/
                    yyval.cppVarType = new CppVarType(gCurAccessType, mergeCppToken(yyvsp[-3].str, yyvsp[-1].str), yyvsp[0].typeModifier);
                  }
#line 11319 "parser.tab.c"
break;
case 244:
#line 1006 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11324 "parser.tab.c"
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 11328 "parser.tab.c"
break;
case 245:
#line 1007 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11333 "parser.tab.c"
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; /* final is not a reserved keyword */ }
#line 11337 "parser.tab.c"
break;
case 246:
#line 1008 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11342 "parser.tab.c"
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 11346 "parser.tab.c"
break;
case 247:
#line 1009 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11351 "parser.tab.c"
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 11355 "parser.tab.c"
break;
case 248:
#line 1010 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11360 "parser.tab.c"
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-4].str, yyvsp[0].str); }
#line 11364 "parser.tab.c"
break;
case 249:
#line 1013 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11369 "parser.tab.c"
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typeModifier = CppTypeModifier(); }
#line 11373 "parser.tab.c"
break;
case 250:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typeModifier = yyvsp[0].typeModifier; }
#line 11379 "parser.tab.c"
break;
case 251:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.typeModifier = yyvsp[0].typeModifier; }
#line 11385 "parser.tab.c"
break;
case 252:
#line 1018 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11390 "parser.tab.c"
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.constBits_ |= (1 << yyval.typeModifier.ptrLevel_);
                  }
#line 11397 "parser.tab.c"
break;
case 253:
#line 1022 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11402 "parser.tab.c"
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.ptrLevel_++;
                  }
#line 11409 "parser.tab.c"
break;
case 254:
#line 1026 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11414 "parser.tab.c"
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.refType_ = CppRefType::kByRef;
                  }
#line 11421 "parser.tab.c"
break;
case 255:
#line 1030 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11426 "parser.tab.c"
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.refType_ = CppRefType::kRValRef;
                  }
#line 11433 "parser.tab.c"
break;
case 256:
#line 1034 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11438 "parser.tab.c"
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.constBits_ |= (1 << yyval.typeModifier.ptrLevel_);
                  }
#line 11445 "parser.tab.c"
break;
case 257:
#line 1038 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11450 "parser.tab.c"
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.ptrLevel_++;
                  }
#line 11457 "parser.tab.c"
break;
case 258:
#line 1042 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11462 "parser.tab.c"
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.refType_ = CppRefType::kByRef;
                  }
#line 11469 "parser.tab.c"
break;
case 259:
#line 1046 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11474 "parser.tab.c"
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.refType_ = CppRefType::kRValRef;
                  }
#line 11481 "parser.tab.c"
break;
case 260:
#line 1053 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11486 "parser.tab.c"
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kStatic;  }
#line 11490 "parser.tab.c"
break;
case 261:
#line 1054 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11495 "parser.tab.c"
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kExtern;  }
#line 11499 "parser.tab.c"
break;
case 262:
#line 1055 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11504 "parser.tab.c"
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kExternC; }
#line 11508 "parser.tab.c"
break;
case 263:
#line 1058 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11513 "parser.tab.c"
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kConst;      }
#line 11517 "parser.tab.c"
break;
case 264:
#line 1059 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11522 "parser.tab.c"
  if (!yytrial)
#line 1059 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kVolatile;   }
#line 11526 "parser.tab.c"
break;
case 265:
#line 1060 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11531 "parser.tab.c"
  if (!yytrial)
#line 1060 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kMutable;    }
#line 11535 "parser.tab.c"
break;
case 266:
#line 1061 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11540 "parser.tab.c"
  if (!yytrial)
#line 1061 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kConstExpr;  }
#line 11544 "parser.tab.c"
break;
case 267:
#line 1064 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11549 "parser.tab.c"
  if (!yytrial)
#line 1064 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = newTypeConverter(yyvsp[-3].cppVarType, makeCppToken(yyvsp[-4].str.sz, yyvsp[-2].str.sz));
                  }
#line 11555 "parser.tab.c"
break;
case 268:
#line 1067 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11560 "parser.tab.c"
  if (!yytrial)
#line 1067 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = newTypeConverter(yyvsp[-3].cppVarType, makeCppToken(yyvsp[-6].str.sz, yyvsp[-2].str.sz));
                  }
#line 11566 "parser.tab.c"
break;
case 269:
#line 1070 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11571 "parser.tab.c"
  if (!yytrial)
#line 1070 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->addAttr(yyvsp[-1].attr);
                  }
#line 11578 "parser.tab.c"
break;
case 270:
#line 1074 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11583 "parser.tab.c"
  if (!yytrial)
#line 1074 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->addAttr(kConst);
                  }
#line 11590 "parser.tab.c"
break;
case 271:
#line 1078 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11595 "parser.tab.c"
  if (!yytrial)
#line 1078 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->decor1(yyvsp[-1].str);
                  }
#line 11602 "parser.tab.c"
break;
case 272:
#line 1082 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11607 "parser.tab.c"
  if (!yytrial)
#line 1082 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 11614 "parser.tab.c"
break;
case 273:
#line 1088 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11619 "parser.tab.c"
  if (!yytrial)
#line 1088 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 11625 "parser.tab.c"
break;
case 274:
#line 1091 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11630 "parser.tab.c"
  if (!yytrial)
#line 1091 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn(yyvsp[0].cppCompundObj);
                  }
#line 11637 "parser.tab.c"
break;
case 275:
#line 1097 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11642 "parser.tab.c"
  if (!yytrial)
#line 1097 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 11646 "parser.tab.c"
break;
case 276:
#line 1100 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11651 "parser.tab.c"
  if (!yytrial)
#line 1100 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn(yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock));
                  }
#line 11658 "parser.tab.c"
break;
case 277:
  if (!yytrial)
#line 1106 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppLambda = new CppLambda(yyvsp[-3].cppExprObj, yyvsp[-1].paramList, yyvsp[0].cppCompundObj);
                  }
#line 11666 "parser.tab.c"
break;
case 278:
  if (!yytrial)
#line 1109 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppLambda = new CppLambda(yyvsp[-5].cppExprObj, yyvsp[-3].paramList, yyvsp[0].cppCompundObj, yyvsp[-1].cppVarType);
                  }
#line 11674 "parser.tab.c"
break;
case 279:
#line 1114 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11679 "parser.tab.c"
  if (!yytrial)
#line 1114 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.paramList = nullptr; }
#line 11683 "parser.tab.c"
break;
case 280:
#line 1115 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11688 "parser.tab.c"
  if (!yytrial)
#line 1115 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.paramList = yyvsp[-1].paramList; }
#line 11692 "parser.tab.c"
break;
case 281:
#line 1118 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11697 "parser.tab.c"
  if (!yytrial)
#line 1118 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, yyvsp[-4].str, yyvsp[-10].cppVarType, yyvsp[-1].paramList, yyvsp[-11].attr, mergeCppToken(yyvsp[-7].str, yyvsp[-6].str));
                    yyval.cppFuncPointerObj->decor2(yyvsp[-8].str);
                  }
#line 11704 "parser.tab.c"
break;
case 282:
#line 1122 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11709 "parser.tab.c"
  if (!yytrial)
#line 1122 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, yyvsp[-4].str, yyvsp[-10].cppVarType, yyvsp[-1].paramList, 0, mergeCppToken(yyvsp[-7].str, yyvsp[-6].str));
                    yyval.cppFuncPointerObj->decor2(yyvsp[-8].str);
                  }
#line 11716 "parser.tab.c"
break;
case 283:
#line 1126 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11721 "parser.tab.c"
  if (!yytrial)
#line 1126 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, yyvsp[-4].str, yyvsp[-8].cppVarType, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->decor2(yyvsp[-6].str);
                  }
#line 11728 "parser.tab.c"
break;
case 284:
#line 1130 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11733 "parser.tab.c"
  if (!yytrial)
#line 1130 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, yyvsp[-4].str, yyvsp[-8].cppVarType, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->decor2(yyvsp[-6].str);
                  }
#line 11740 "parser.tab.c"
break;
case 285:
#line 1134 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11745 "parser.tab.c"
  if (!yytrial)
#line 1134 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, yyvsp[-4].str, yyvsp[-8].cppVarType, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->decor2(yyvsp[-5].str);
                  }
#line 11752 "parser.tab.c"
break;
case 286:
#line 1138 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11757 "parser.tab.c"
  if (!yytrial)
#line 1138 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = yyvsp[0].cppFuncPointerObj;
                    yyval.cppFuncPointerObj->decor1(yyvsp[-1].str);
                  }
#line 11764 "parser.tab.c"
break;
case 287:
#line 1142 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11769 "parser.tab.c"
  if (!yytrial)
#line 1142 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;
                    yyval.cppFuncPointerObj->addAttr(yyvsp[0].attr);
                  }
#line 11776 "parser.tab.c"
break;
case 288:
#line 1149 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[0].cppFuncPointerObj->name_.empty() == true) {
                        ZZERROR;
                      }
                    }
#line 11785 "parser.tab.c"
break;
case 289:
#line 1157 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[0].cppFuncPointerObj->name_.empty() == false) {
                        ZZERROR;
                      }
                    }
#line 11794 "parser.tab.c"
break;
case 290:
#line 1164 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11799 "parser.tab.c"
  if (!yytrial)
#line 1164 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPointer(gCurAccessType, "", yyvsp[-4].cppVarType, yyvsp[-1].paramList, 0);
                  }
#line 11805 "parser.tab.c"
break;
case 291:
#line 1169 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11810 "parser.tab.c"
  if (!yytrial)
#line 1169 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 11814 "parser.tab.c"
break;
case 292:
#line 1172 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11819 "parser.tab.c"
  if (!yytrial)
#line 1172 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.funcDeclData = CppNtFuncDeclData{yyvsp[-3].str, yyvsp[-1].paramList, 0};
                  }
#line 11825 "parser.tab.c"
break;
case 293:
#line 1175 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11830 "parser.tab.c"
  if (!yytrial)
#line 1175 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.funcDeclData = CppNtFuncDeclData{yyvsp[-4].str, yyvsp[-2].paramList, yyvsp[0].attr};
                  }
#line 11836 "parser.tab.c"
break;
case 294:
#line 1180 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11841 "parser.tab.c"
  if (!yytrial)
#line 1180 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurAccessType, yyvsp[0].funcDeclData.funcName, yyvsp[-2].cppVarType, yyvsp[0].funcDeclData.paramList, yyvsp[0].funcDeclData.funcAttr);
                    yyval.cppFuncObj->decor2(yyvsp[-1].str);
                  }
#line 11848 "parser.tab.c"
break;
case 295:
#line 1184 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11853 "parser.tab.c"
  if (!yytrial)
#line 1184 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurAccessType, yyvsp[0].funcDeclData.funcName, yyvsp[-1].cppVarType, yyvsp[0].funcDeclData.paramList, yyvsp[0].funcDeclData.funcAttr);
                  }
#line 11859 "parser.tab.c"
break;
case 296:
#line 1187 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11864 "parser.tab.c"
  if (!yytrial)
#line 1187 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurAccessType, yyvsp[0].funcDeclData.funcName, yyvsp[-2].cppVarType, yyvsp[0].funcDeclData.paramList, yyvsp[0].funcDeclData.funcAttr | kConstExpr);
                  }
#line 11870 "parser.tab.c"
break;
case 297:
#line 1190 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11875 "parser.tab.c"
  if (!yytrial)
#line 1190 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurAccessType, yyvsp[-2].funcDeclData.funcName, yyvsp[0].cppVarType, yyvsp[-2].funcDeclData.paramList, yyvsp[-2].funcDeclData.funcAttr | kTrailingRet);
                  }
#line 11881 "parser.tab.c"
break;
case 298:
#line 1193 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 11886 "parser.tab.c"
  if (!yytrial)
#line 1193 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurAccessType, yyvsp[-2].funcDeclData.funcName, yyvsp[0].cppVarType, yyvsp[-2].funcDeclData.paramList, yyvsp[-2].funcDeclData.funcAttr | kTrailingRet | kConstExpr);
                  }
#line 11892 "parser.tab.c"
break;
case 299:
#line 1196 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11897 "parser.tab.c"
  if (!yytrial)
#line 1196 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->addAttr(kConstExpr);
                  }
#line 11904 "parser.tab.c"
break;
case 300:
#line 1200 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11909 "parser.tab.c"
  if (!yytrial)
#line 1200 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    if (!yyval.cppFuncObj->decor1().empty())
                      yyval.cppFuncObj->decor2(yyval.cppFuncObj->decor1());
                    yyval.cppFuncObj->decor1(yyvsp[-1].str);
                  }
#line 11918 "parser.tab.c"
break;
case 301:
#line 1206 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11923 "parser.tab.c"
  if (!yytrial)
#line 1206 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 11930 "parser.tab.c"
break;
case 302:
#line 1210 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11935 "parser.tab.c"
  if (!yytrial)
#line 1210 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->addAttr(yyvsp[-1].attr);
                  }
#line 11942 "parser.tab.c"
break;
case 303:
#line 1214 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11947 "parser.tab.c"
  if (!yytrial)
#line 1214 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->addAttr(kDelete);
                  }
#line 11954 "parser.tab.c"
break;
case 304:
#line 1218 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11959 "parser.tab.c"
  if (!yytrial)
#line 1218 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->addAttr(kDefault);
                  }
#line 11966 "parser.tab.c"
break;
case 305:
#line 1222 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11971 "parser.tab.c"
  if (!yytrial)
#line 1222 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->throwSpec(yyvsp[0].funcThrowSpec);
                  }
#line 11978 "parser.tab.c"
break;
case 306:
#line 1228 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11983 "parser.tab.c"
  if (!yytrial)
#line 1228 "/home/dassat/github/cppparser/src/parser.y"
{
                    delete yyvsp[-1].paramList;
                    yyval.str = mergeCppToken(yyvsp[-4].str, yyvsp[0].str);
                  }
#line 11990 "parser.tab.c"
break;
case 307:
#line 1234 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 11995 "parser.tab.c"
  if (!yytrial)
#line 1234 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 11999 "parser.tab.c"
break;
case 308:
#line 1235 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12004 "parser.tab.c"
  if (!yytrial)
#line 1235 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 12008 "parser.tab.c"
break;
case 309:
#line 1236 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12013 "parser.tab.c"
  if (!yytrial)
#line 1236 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12017 "parser.tab.c"
break;
case 310:
#line 1238 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12022 "parser.tab.c"
  if (!yytrial)
#line 1238 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 12026 "parser.tab.c"
break;
case 311:
#line 1241 "/home/dassat/github/cppparser/src/parser.y"
{ if (yyvsp[0].str.sz != (yyvsp[-1].str.sz + 1)) ZZERROR; }
#line 12031 "parser.tab.c"
  if (!yytrial)
#line 1241 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12035 "parser.tab.c"
break;
case 312:
#line 1244 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12040 "parser.tab.c"
  if (!yytrial)
#line 1244 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12044 "parser.tab.c"
break;
case 313:
#line 1245 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12049 "parser.tab.c"
  if (!yytrial)
#line 1245 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12053 "parser.tab.c"
break;
case 314:
#line 1246 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12058 "parser.tab.c"
  if (!yytrial)
#line 1246 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12062 "parser.tab.c"
break;
case 315:
#line 1247 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12067 "parser.tab.c"
  if (!yytrial)
#line 1247 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12071 "parser.tab.c"
break;
case 316:
#line 1248 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12076 "parser.tab.c"
  if (!yytrial)
#line 1248 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12080 "parser.tab.c"
break;
case 317:
#line 1249 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12085 "parser.tab.c"
  if (!yytrial)
#line 1249 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12089 "parser.tab.c"
break;
case 318:
#line 1250 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12094 "parser.tab.c"
  if (!yytrial)
#line 1250 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12098 "parser.tab.c"
break;
case 319:
#line 1251 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12103 "parser.tab.c"
  if (!yytrial)
#line 1251 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12107 "parser.tab.c"
break;
case 320:
#line 1252 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12112 "parser.tab.c"
  if (!yytrial)
#line 1252 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12116 "parser.tab.c"
break;
case 321:
#line 1253 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12121 "parser.tab.c"
  if (!yytrial)
#line 1253 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12125 "parser.tab.c"
break;
case 322:
#line 1254 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12130 "parser.tab.c"
  if (!yytrial)
#line 1254 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12134 "parser.tab.c"
break;
case 323:
#line 1255 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12139 "parser.tab.c"
  if (!yytrial)
#line 1255 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12143 "parser.tab.c"
break;
case 324:
#line 1256 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12148 "parser.tab.c"
  if (!yytrial)
#line 1256 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12152 "parser.tab.c"
break;
case 325:
#line 1257 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12157 "parser.tab.c"
  if (!yytrial)
#line 1257 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12161 "parser.tab.c"
break;
case 326:
#line 1258 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12166 "parser.tab.c"
  if (!yytrial)
#line 1258 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12170 "parser.tab.c"
break;
case 327:
#line 1259 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12175 "parser.tab.c"
  if (!yytrial)
#line 1259 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12179 "parser.tab.c"
break;
case 328:
#line 1260 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12184 "parser.tab.c"
  if (!yytrial)
#line 1260 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12188 "parser.tab.c"
break;
case 329:
#line 1261 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12193 "parser.tab.c"
  if (!yytrial)
#line 1261 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12197 "parser.tab.c"
break;
case 330:
#line 1262 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12202 "parser.tab.c"
  if (!yytrial)
#line 1262 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12206 "parser.tab.c"
break;
case 331:
#line 1263 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12211 "parser.tab.c"
  if (!yytrial)
#line 1263 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12215 "parser.tab.c"
break;
case 332:
#line 1264 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12220 "parser.tab.c"
  if (!yytrial)
#line 1264 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12224 "parser.tab.c"
break;
case 333:
#line 1265 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12229 "parser.tab.c"
  if (!yytrial)
#line 1265 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12233 "parser.tab.c"
break;
case 334:
#line 1266 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12238 "parser.tab.c"
  if (!yytrial)
#line 1266 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12242 "parser.tab.c"
break;
case 335:
#line 1267 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12247 "parser.tab.c"
  if (!yytrial)
#line 1267 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12251 "parser.tab.c"
break;
case 336:
#line 1268 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12256 "parser.tab.c"
  if (!yytrial)
#line 1268 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12260 "parser.tab.c"
break;
case 337:
#line 1269 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12265 "parser.tab.c"
  if (!yytrial)
#line 1269 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12269 "parser.tab.c"
break;
case 338:
#line 1270 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12274 "parser.tab.c"
  if (!yytrial)
#line 1270 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12278 "parser.tab.c"
break;
case 339:
#line 1271 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12283 "parser.tab.c"
  if (!yytrial)
#line 1271 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12287 "parser.tab.c"
break;
case 340:
#line 1272 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12292 "parser.tab.c"
  if (!yytrial)
#line 1272 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12296 "parser.tab.c"
break;
case 341:
#line 1273 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12301 "parser.tab.c"
  if (!yytrial)
#line 1273 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12305 "parser.tab.c"
break;
case 342:
#line 1274 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12310 "parser.tab.c"
  if (!yytrial)
#line 1274 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12314 "parser.tab.c"
break;
case 343:
#line 1275 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12319 "parser.tab.c"
  if (!yytrial)
#line 1275 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12323 "parser.tab.c"
break;
case 344:
#line 1276 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12328 "parser.tab.c"
  if (!yytrial)
#line 1276 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12332 "parser.tab.c"
break;
case 345:
#line 1277 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12337 "parser.tab.c"
  if (!yytrial)
#line 1277 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12341 "parser.tab.c"
break;
case 346:
#line 1278 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12346 "parser.tab.c"
  if (!yytrial)
#line 1278 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12350 "parser.tab.c"
break;
case 347:
#line 1279 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12355 "parser.tab.c"
  if (!yytrial)
#line 1279 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12359 "parser.tab.c"
break;
case 348:
#line 1280 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12364 "parser.tab.c"
  if (!yytrial)
#line 1280 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12368 "parser.tab.c"
break;
case 349:
#line 1281 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12373 "parser.tab.c"
  if (!yytrial)
#line 1281 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 12377 "parser.tab.c"
break;
case 350:
#line 1282 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12382 "parser.tab.c"
  if (!yytrial)
#line 1282 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 12386 "parser.tab.c"
break;
case 351:
#line 1283 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12391 "parser.tab.c"
  if (!yytrial)
#line 1283 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12395 "parser.tab.c"
break;
case 352:
#line 1284 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12400 "parser.tab.c"
  if (!yytrial)
#line 1284 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 12404 "parser.tab.c"
break;
case 353:
#line 1285 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12409 "parser.tab.c"
  if (!yytrial)
#line 1285 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12413 "parser.tab.c"
break;
case 354:
#line 1286 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12418 "parser.tab.c"
  if (!yytrial)
#line 1286 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 12422 "parser.tab.c"
break;
case 355:
#line 1287 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12427 "parser.tab.c"
  if (!yytrial)
#line 1287 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 12431 "parser.tab.c"
break;
case 356:
#line 1288 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12436 "parser.tab.c"
  if (!yytrial)
#line 1288 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 12440 "parser.tab.c"
break;
case 357:
#line 1289 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12445 "parser.tab.c"
  if (!yytrial)
#line 1289 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 12449 "parser.tab.c"
break;
case 358:
#line 1292 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12454 "parser.tab.c"
  if (!yytrial)
#line 1292 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 12458 "parser.tab.c"
break;
case 359:
#line 1297 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12463 "parser.tab.c"
  if (!yytrial)
#line 1297 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 12467 "parser.tab.c"
break;
case 360:
#line 1300 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12472 "parser.tab.c"
  if (!yytrial)
#line 1300 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.paramList = nullptr; }
#line 12476 "parser.tab.c"
break;
case 361:
  if (!yytrial)
#line 1301 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.paramList = new CppParamVector;
                    yyval.paramList->emplace_back(yyvsp[0].varOrFuncPtr);
                  }
#line 12485 "parser.tab.c"
break;
case 362:
#line 1305 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12490 "parser.tab.c"
  if (!yytrial)
#line 1305 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyvsp[-2].paramList->emplace_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 12497 "parser.tab.c"
break;
case 363:
#line 1311 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12502 "parser.tab.c"
  if (!yytrial)
#line 1311 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->addAttr(kFuncParam);  }
#line 12506 "parser.tab.c"
break;
case 364:
#line 1312 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12511 "parser.tab.c"
  if (!yytrial)
#line 1312 "/home/dassat/github/cppparser/src/parser.y"
{
                    auto var = new CppVar(yyvsp[-2].cppVarType, std::string());
                    var->addAttr(kFuncParam);
                    var->assign(yyvsp[0].cppExprObj, AssignType::kUsingEqual);
                    yyval.varOrFuncPtr = var;
                  }
#line 12520 "parser.tab.c"
break;
case 365:
#line 1318 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12525 "parser.tab.c"
  if (!yytrial)
#line 1318 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->addAttr(kFuncParam);  }
#line 12529 "parser.tab.c"
break;
case 366:
#line 1319 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12534 "parser.tab.c"
  if (!yytrial)
#line 1319 "/home/dassat/github/cppparser/src/parser.y"
{
                    auto var = new CppVar(yyvsp[0].cppVarType, std::string());
                    var->addAttr(kFuncParam);
                    yyval.varOrFuncPtr = var;
                  }
#line 12542 "parser.tab.c"
break;
case 367:
#line 1324 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12547 "parser.tab.c"
  if (!yytrial)
#line 1324 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->addAttr(kFuncParam);     }
#line 12551 "parser.tab.c"
break;
case 368:
#line 1325 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12556 "parser.tab.c"
  if (!yytrial)
#line 1325 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].varOrFuncPtr; }
#line 12560 "parser.tab.c"
break;
case 369:
#line 1326 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12565 "parser.tab.c"
  if (!yytrial)
#line 1326 "/home/dassat/github/cppparser/src/parser.y"
{
                    auto var = new CppVar(yyvsp[-3].cppVarType, std::string());
                    var->addAttr(kFuncParam);
                    var->addArraySize(yyvsp[-1].cppExprObj);
                    yyval.varOrFuncPtr = var;
                  }
#line 12574 "parser.tab.c"
break;
case 370:
#line 1332 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12579 "parser.tab.c"
  if (!yytrial)
#line 1332 "/home/dassat/github/cppparser/src/parser.y"
{
                    auto var = new CppVar(yyvsp[-2].cppVarType, std::string());
                    var->addAttr(kFuncParam);
                    var->addArraySize(nullptr);
                    yyval.varOrFuncPtr = var;
                  }
#line 12588 "parser.tab.c"
break;
case 371:
#line 1340 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = nullptr; /*$$ = makeCppToken(nullptr, nullptr);*/ }
#line 12593 "parser.tab.c"
break;
case 372:
  if (!yytrial)
#line 1340 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12599 "parser.tab.c"
break;
case 373:
#line 1341 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = nullptr; /*$$ = mergeCppToken($1, $2);*/ }
#line 12604 "parser.tab.c"
break;
case 374:
  if (!yytrial)
#line 1341 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12610 "parser.tab.c"
break;
case 375:
#line 1342 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = nullptr; /*$$ = $1;*/ }
#line 12615 "parser.tab.c"
break;
case 376:
  if (!yytrial)
#line 1342 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12621 "parser.tab.c"
break;
case 377:
#line 1343 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = nullptr; }
#line 12626 "parser.tab.c"
break;
case 378:
  if (!yytrial)
#line 1343 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12632 "parser.tab.c"
break;
case 379:
#line 1346 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = yyvsp[0].templateArg; }
#line 12637 "parser.tab.c"
break;
case 380:
  if (!yytrial)
#line 1346 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12643 "parser.tab.c"
break;
case 381:
#line 1347 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = yyvsp[-2].templateArg; /*$$ = mergeCppToken($1, $3);*/ }
#line 12648 "parser.tab.c"
break;
case 382:
  if (!yytrial)
#line 1347 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12654 "parser.tab.c"
break;
case 383:
#line 1348 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG; yyval.templateArg = yyvsp[-3].templateArg; /*$$ = mergeCppToken($1, $3);*/ }
#line 12659 "parser.tab.c"
break;
case 384:
  if (!yytrial)
#line 1348 "/home/dassat/github/cppparser/src/parser.y"
{}
#line 12665 "parser.tab.c"
break;
case 385:
#line 1351 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12670 "parser.tab.c"
  if (!yytrial)
#line 1351 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[0].attr; }
#line 12674 "parser.tab.c"
break;
case 386:
#line 1352 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12679 "parser.tab.c"
  if (!yytrial)
#line 1352 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kInline;    }
#line 12683 "parser.tab.c"
break;
case 387:
#line 1353 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12688 "parser.tab.c"
  if (!yytrial)
#line 1353 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kVirtual;   }
#line 12692 "parser.tab.c"
break;
case 388:
#line 1354 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12697 "parser.tab.c"
  if (!yytrial)
#line 1354 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kExplicit;  }
#line 12701 "parser.tab.c"
break;
case 389:
#line 1355 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12706 "parser.tab.c"
  if (!yytrial)
#line 1355 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kFriend;    }
#line 12710 "parser.tab.c"
break;
case 390:
#line 1356 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12715 "parser.tab.c"
  if (!yytrial)
#line 1356 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kConstExpr; }
#line 12719 "parser.tab.c"
break;
case 391:
#line 1359 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12724 "parser.tab.c"
  if (!yytrial)
#line 1359 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = 0;}
#line 12728 "parser.tab.c"
break;
case 392:
#line 1360 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12733 "parser.tab.c"
  if (!yytrial)
#line 1360 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[0].attr;}
#line 12737 "parser.tab.c"
break;
case 393:
#line 1363 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12742 "parser.tab.c"
  if (!yytrial)
#line 1363 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kConst; }
#line 12746 "parser.tab.c"
break;
case 394:
#line 1364 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12751 "parser.tab.c"
  if (!yytrial)
#line 1364 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kOverride; }
#line 12755 "parser.tab.c"
break;
case 395:
#line 1365 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12760 "parser.tab.c"
  if (!yytrial)
#line 1365 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kFinal; }
#line 12764 "parser.tab.c"
break;
case 396:
#line 1366 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12769 "parser.tab.c"
  if (!yytrial)
#line 1366 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kNoExcept; }
#line 12773 "parser.tab.c"
break;
case 397:
#line 1367 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}{ZZLOG;}
#line 12778 "parser.tab.c"
  if (!yytrial)
#line 1368 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kPureVirtual; }
#line 12782 "parser.tab.c"
break;
case 398:
#line 1369 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12787 "parser.tab.c"
  if (!yytrial)
#line 1369 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 12791 "parser.tab.c"
break;
case 399:
#line 1370 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12796 "parser.tab.c"
  if (!yytrial)
#line 1370 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 12800 "parser.tab.c"
break;
case 400:
#line 1371 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12805 "parser.tab.c"
  if (!yytrial)
#line 1371 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 12809 "parser.tab.c"
break;
case 401:
#line 1372 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12814 "parser.tab.c"
  if (!yytrial)
#line 1372 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[-1].attr | kNoExcept; }
#line 12818 "parser.tab.c"
break;
case 402:
#line 1373 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 12823 "parser.tab.c"
  if (!yytrial)
#line 1374 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 12827 "parser.tab.c"
break;
case 403:
#line 1375 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12832 "parser.tab.c"
  if (!yytrial)
#line 1375 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = 0; }
#line 12836 "parser.tab.c"
break;
case 404:
#line 1378 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12841 "parser.tab.c"
  if (!yytrial)
#line 1378 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.funcThrowSpec = nullptr; }
#line 12845 "parser.tab.c"
break;
case 405:
#line 1379 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12850 "parser.tab.c"
  if (!yytrial)
#line 1379 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.funcThrowSpec = yyvsp[0].funcThrowSpec; }
#line 12854 "parser.tab.c"
break;
case 406:
#line 1382 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12859 "parser.tab.c"
  if (!yytrial)
#line 1382 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.funcThrowSpec = yyvsp[-1].identifierList ? yyvsp[-1].identifierList : new CppFuncThrowSpec;
                  }
#line 12865 "parser.tab.c"
break;
case 407:
#line 1387 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12870 "parser.tab.c"
  if (!yytrial)
#line 1387 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.identifierList = nullptr; }
#line 12874 "parser.tab.c"
break;
case 408:
#line 1388 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12879 "parser.tab.c"
  if (!yytrial)
#line 1388 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.identifierList = new CppIdentifierList;
                    yyval.identifierList->push_back(yyvsp[0].str);
                  }
#line 12886 "parser.tab.c"
break;
case 409:
#line 1392 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12891 "parser.tab.c"
  if (!yytrial)
#line 1392 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.identifierList = yyvsp[-2].identifierList;
                    yyval.identifierList->push_back(yyvsp[0].str);
                  }
#line 12898 "parser.tab.c"
break;
case 410:
#line 1398 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 12903 "parser.tab.c"
  if (!yytrial)
#line 1398 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 12907 "parser.tab.c"
break;
case 411:
#line 1401 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 12912 "parser.tab.c"
  if (!yytrial)
#line 1402 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->memInits_  = yyvsp[-1].memInitList;
                    yyval.cppCtorObj->defn(yyvsp[0].cppCompundObj);
                  }
#line 12920 "parser.tab.c"
break;
case 412:
#line 1407 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 12925 "parser.tab.c"
break;
case 413:
#line 1408 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 12930 "parser.tab.c"
  if (!yytrial)
#line 1409 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurAccessType, mergeCppToken(yyvsp[-9].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn(yyvsp[0].cppCompundObj);
                    yyval.cppCtorObj->throwSpec(yyvsp[-2].funcThrowSpec);
                  }
#line 12938 "parser.tab.c"
break;
case 414:
#line 1414 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 12943 "parser.tab.c"
break;
case 415:
#line 1415 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 12948 "parser.tab.c"
  if (!yytrial)
#line 1416 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurAccessType, mergeCppToken(yyvsp[-11].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn(yyvsp[0].cppCompundObj);
                    yyval.cppCtorObj->throwSpec(yyvsp[-2].funcThrowSpec);
                  }
#line 12956 "parser.tab.c"
break;
case 416:
#line 1421 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-5].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 12961 "parser.tab.c"
break;
case 417:
#line 1422 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 12966 "parser.tab.c"
  if (!yytrial)
#line 1423 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurAccessType, mergeCppToken(yyvsp[-12].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn(yyvsp[0].cppCompundObj);
                    yyval.cppCtorObj->throwSpec(yyvsp[-2].funcThrowSpec);
                  }
#line 12974 "parser.tab.c"
break;
case 418:
#line 1428 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12979 "parser.tab.c"
  if (!yytrial)
#line 1428 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->addAttr(yyvsp[-1].attr);
                  }
#line 12986 "parser.tab.c"
break;
case 419:
#line 1432 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 12991 "parser.tab.c"
  if (!yytrial)
#line 1432 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 12998 "parser.tab.c"
break;
case 420:
#line 1439 "/home/dassat/github/cppparser/src/parser.y"
{
                    if(gCompoundStack.empty())
                      ZZERROR;
                    if((gCompoundStack.top() != yyvsp[-3].str) && (classNameFromIdentifier(gCompoundStack.top()) != yyvsp[-3].str))
                      ZZERROR;
                    else
                      ZZVALID;
                  }
#line 13010 "parser.tab.c"
  if (!yytrial)
#line 1447 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurAccessType, yyvsp[-3].str, yyvsp[-1].paramList, makeEmptyCppMemInitList(), 0);
                  }
#line 13016 "parser.tab.c"
break;
case 421:
#line 1450 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13021 "parser.tab.c"
  if (!yytrial)
#line 1450 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->addAttr(yyvsp[-1].attr);
                  }
#line 13028 "parser.tab.c"
break;
case 422:
#line 1454 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13033 "parser.tab.c"
  if (!yytrial)
#line 1454 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 13040 "parser.tab.c"
break;
case 423:
#line 1458 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13045 "parser.tab.c"
  if (!yytrial)
#line 1458 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->addAttr(kDelete);
                  }
#line 13052 "parser.tab.c"
break;
case 424:
#line 1462 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13057 "parser.tab.c"
  if (!yytrial)
#line 1462 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->addAttr(kDefault);
                  }
#line 13064 "parser.tab.c"
break;
case 425:
#line 1466 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13069 "parser.tab.c"
  if (!yytrial)
#line 1466 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-1].cppCtorObj;
                    yyval.cppCtorObj->throwSpec(yyvsp[0].funcThrowSpec);
                  }
#line 13076 "parser.tab.c"
break;
case 426:
#line 1470 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13081 "parser.tab.c"
  if (!yytrial)
#line 1470 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-1].cppCtorObj;
                    yyval.cppCtorObj->addAttr(kNoExcept);
                  }
#line 13088 "parser.tab.c"
break;
case 427:
#line 1474 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13093 "parser.tab.c"
  if (!yytrial)
#line 1474 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->decor1(yyvsp[-1].str);
                  }
#line 13100 "parser.tab.c"
break;
case 428:
#line 1480 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13105 "parser.tab.c"
  if (!yytrial)
#line 1480 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInitList = makeEmptyCppMemInitList(); }
#line 13109 "parser.tab.c"
break;
case 429:
#line 1481 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13114 "parser.tab.c"
  if (!yytrial)
#line 1481 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.memInitList = makeCppMemInitList(new std::list<CppMemInit>);
                    yyval.memInitList.memInitList->push_back(CppMemInit(yyvsp[0].memInit.mem, yyvsp[0].memInit.init));
                  }
#line 13121 "parser.tab.c"
break;
case 430:
#line 1485 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13126 "parser.tab.c"
  if (!yytrial)
#line 1485 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInitList = makeCppMemInitList(yyvsp[0].blob); }
#line 13130 "parser.tab.c"
break;
case 431:
#line 1486 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13135 "parser.tab.c"
  if (!yytrial)
#line 1486 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.memInitList = yyvsp[-2].memInitList;
                    assert(yyval.memInitList.memInitListIsABlob_ == false);
                    yyval.memInitList.memInitList->push_back(CppMemInit(yyvsp[0].memInit.mem, yyvsp[0].memInit.init));
                  }
#line 13143 "parser.tab.c"
break;
case 432:
#line 1493 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13148 "parser.tab.c"
  if (!yytrial)
#line 1493 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-3].str, yyvsp[-1].cppExprObj}; }
#line 13152 "parser.tab.c"
break;
case 433:
#line 1494 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13157 "parser.tab.c"
  if (!yytrial)
#line 1494 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-2].str, nullptr}; }
#line 13161 "parser.tab.c"
break;
case 434:
#line 1495 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13166 "parser.tab.c"
  if (!yytrial)
#line 1495 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-3].str, yyvsp[-1].cppExprObj}; }
#line 13170 "parser.tab.c"
break;
case 435:
#line 1496 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13175 "parser.tab.c"
  if (!yytrial)
#line 1496 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-2].str, nullptr}; }
#line 13179 "parser.tab.c"
break;
case 436:
#line 1499 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13184 "parser.tab.c"
  if (!yytrial)
#line 1499 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 13188 "parser.tab.c"
break;
case 437:
#line 1502 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13193 "parser.tab.c"
  if (!yytrial)
#line 1503 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn(yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock));
                  }
#line 13200 "parser.tab.c"
break;
case 438:
#line 1507 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 13205 "parser.tab.c"
break;
case 439:
  if (!yytrial)
#line 1509 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurAccessType, mergeCppToken(yyvsp[-7].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn(yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock));
                  }
#line 13214 "parser.tab.c"
break;
case 440:
#line 1513 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 13219 "parser.tab.c"
break;
case 441:
  if (!yytrial)
#line 1515 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurAccessType, mergeCppToken(yyvsp[-9].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn(yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock));
                  }
#line 13228 "parser.tab.c"
break;
case 442:
#line 1519 "/home/dassat/github/cppparser/src/parser.y"
{if(yyvsp[-6].str != yyvsp[0].str) ZZERROR; else ZZVALID;}
#line 13233 "parser.tab.c"
break;
case 443:
  if (!yytrial)
#line 1521 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurAccessType, mergeCppToken(yyvsp[-10].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn(yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(CppAccessType::kUnknown, CppCompoundType::kBlock));
                  }
#line 13242 "parser.tab.c"
break;
case 444:
#line 1525 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13247 "parser.tab.c"
  if (!yytrial)
#line 1525 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 13254 "parser.tab.c"
break;
case 445:
#line 1529 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13259 "parser.tab.c"
  if (!yytrial)
#line 1529 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->addAttr(yyvsp[-1].attr);
                  }
#line 13266 "parser.tab.c"
break;
case 446:
#line 1535 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}{
                    if(gCompoundStack.empty())
                      ZZERROR;
                    if(classNameFromIdentifier(gCompoundStack.top()) != yyvsp[-3].str)
                      ZZERROR;
                    else
                      ZZVALID;
                  }
#line 13278 "parser.tab.c"
  if (!yytrial)
#line 1544 "/home/dassat/github/cppparser/src/parser.y"
{
                    const char* tildaStartPos = yyvsp[-3].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurAccessType, makeCppToken(tildaStartPos, yyvsp[-3].str.sz+yyvsp[-3].str.len-tildaStartPos), 0);
                  }
#line 13286 "parser.tab.c"
break;
case 447:
#line 1549 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13291 "parser.tab.c"
  if (!yytrial)
#line 1549 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->decor1(yyvsp[-1].str);
                  }
#line 13298 "parser.tab.c"
break;
case 448:
#line 1553 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13303 "parser.tab.c"
  if (!yytrial)
#line 1553 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->addAttr(yyvsp[-1].attr);
                  }
#line 13310 "parser.tab.c"
break;
case 449:
#line 1557 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13315 "parser.tab.c"
  if (!yytrial)
#line 1558 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->addAttr(yyvsp[0].attr);
                  }
#line 13322 "parser.tab.c"
break;
case 450:
#line 1562 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13327 "parser.tab.c"
  if (!yytrial)
#line 1563 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->addAttr(kPureVirtual);
                  }
#line 13334 "parser.tab.c"
break;
case 451:
#line 1567 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13339 "parser.tab.c"
  if (!yytrial)
#line 1567 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->addAttr(kDelete);
                  }
#line 13346 "parser.tab.c"
break;
case 452:
#line 1571 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13351 "parser.tab.c"
  if (!yytrial)
#line 1571 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->addAttr(kDefault);
                  }
#line 13358 "parser.tab.c"
break;
case 453:
#line 1575 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13363 "parser.tab.c"
  if (!yytrial)
#line 1575 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->throwSpec(yyvsp[0].funcThrowSpec);
                  }
#line 13370 "parser.tab.c"
break;
case 454:
#line 1581 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13375 "parser.tab.c"
break;
case 455:
#line 1582 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13380 "parser.tab.c"
break;
case 456:
#line 1585 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13385 "parser.tab.c"
  if (!yytrial)
#line 1585 "/home/dassat/github/cppparser/src/parser.y"
{
                  }
#line 13390 "parser.tab.c"
break;
case 457:
#line 1587 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13395 "parser.tab.c"
  if (!yytrial)
#line 1587 "/home/dassat/github/cppparser/src/parser.y"
{
                  }
#line 13400 "parser.tab.c"
break;
case 458:
#line 1591 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13405 "parser.tab.c"
  if (!yytrial)
#line 1591 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 13409 "parser.tab.c"
break;
case 459:
  if (!yytrial)
#line 1594 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.attribSpecifier = yyvsp[-2].cppExprObj;
                  }
#line 13417 "parser.tab.c"
break;
case 460:
  if (!yytrial)
#line 1599 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attribSpecifiers = nullptr; }
#line 13423 "parser.tab.c"
break;
case 461:
  if (!yytrial)
#line 1600 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attribSpecifiers = yyvsp[0].attribSpecifiers; }
#line 13429 "parser.tab.c"
break;
case 462:
  if (!yytrial)
#line 1603 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.attribSpecifiers = new AttribSpecifierArray;
                    yyval.attribSpecifiers->emplace_back(yyvsp[0].attribSpecifier);
                  }
#line 13438 "parser.tab.c"
break;
case 463:
  if (!yytrial)
#line 1607 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.attribSpecifiers = yyvsp[-1].attribSpecifiers;
                    yyval.attribSpecifiers->emplace_back(yyvsp[0].attribSpecifier);
                  }
#line 13447 "parser.tab.c"
break;
case 464:
#line 1614 "/home/dassat/github/cppparser/src/parser.y"
{
                    ZZVALID;
                    gCompoundStack.push(yyvsp[-4].str);
                    gAccessTypeStack.push(gCurAccessType); gCurAccessType = CppAccessType::kUnknown;
                  }
#line 13456 "parser.tab.c"
break;
case 465:
#line 1620 "/home/dassat/github/cppparser/src/parser.y"
{
                    ZZVALID;
                    gCompoundStack.pop();
                    gCurAccessType = gAccessTypeStack.top();
                    gAccessTypeStack.pop();
                  }
#line 13466 "parser.tab.c"
  if (!yytrial)
#line 1626 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurAccessType);
                    yyval.cppCompundObj->compoundType(yyvsp[-10].compoundType);
                    yyval.cppCompundObj->apidecor(yyvsp[-9].str);
                    yyval.cppCompundObj->attribSpecifierSequence(yyvsp[-8].attribSpecifiers);
                    yyval.cppCompundObj->name(pruneClassName(yyvsp[-7].str));
                    yyval.cppCompundObj->inheritanceList(yyvsp[-5].inheritList);
                    yyval.cppCompundObj->addAttr(yyvsp[-6].attr);
                  }
#line 13478 "parser.tab.c"
break;
case 466:
  if (!yytrial)
#line 1636 "/home/dassat/github/cppparser/src/parser.y"
{ gAccessTypeStack.push(gCurAccessType); gCurAccessType = CppAccessType::kUnknown; }
#line 13484 "parser.tab.c"
break;
case 467:
#line 1638 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13489 "parser.tab.c"
  if (!yytrial)
#line 1639 "/home/dassat/github/cppparser/src/parser.y"
{
                    gCurAccessType = gAccessTypeStack.top();
                    gAccessTypeStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurAccessType);
                    yyval.cppCompundObj->compoundType(yyvsp[-7].compoundType);
                    yyval.cppCompundObj->attribSpecifierSequence(yyvsp[-6].attribSpecifiers);
                    yyval.cppCompundObj->inheritanceList(yyvsp[-5].inheritList);
                  }
#line 13501 "parser.tab.c"
break;
case 468:
#line 1648 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13506 "parser.tab.c"
  if (!yytrial)
#line 1649 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 13513 "parser.tab.c"
break;
case 469:
#line 1656 "/home/dassat/github/cppparser/src/parser.y"
{
                    ZZVALID;
                    gCompoundStack.push(classNameFromIdentifier(yyvsp[-1].str));
                    gAccessTypeStack.push(gCurAccessType); gCurAccessType = CppAccessType::kUnknown;
                  }
#line 13522 "parser.tab.c"
break;
case 470:
#line 1662 "/home/dassat/github/cppparser/src/parser.y"
{
                    ZZVALID;
                    gCompoundStack.pop();
                    gCurAccessType = gAccessTypeStack.top();
                    gAccessTypeStack.pop();
                  }
#line 13532 "parser.tab.c"
  if (!yytrial)
#line 1668 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurAccessType);
                    yyval.cppCompundObj->compoundType(CppCompoundType::kNamespace);
                    yyval.cppCompundObj->name(yyvsp[-4].str);
                  }
#line 13540 "parser.tab.c"
break;
case 471:
#line 1675 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13545 "parser.tab.c"
  if (!yytrial)
#line 1675 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = 0; }
#line 13549 "parser.tab.c"
break;
case 472:
#line 1676 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13554 "parser.tab.c"
  if (!yytrial)
#line 1676 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.attr = kFinal; }
#line 13558 "parser.tab.c"
break;
case 473:
#line 1679 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13563 "parser.tab.c"
  if (!yytrial)
#line 1679 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.inheritList = 0; }
#line 13567 "parser.tab.c"
break;
case 474:
#line 1680 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13572 "parser.tab.c"
  if (!yytrial)
#line 1680 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-2].objAccessType, yyvsp[-1].inheritType));
                  }
#line 13578 "parser.tab.c"
break;
case 475:
#line 1683 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13583 "parser.tab.c"
  if (!yytrial)
#line 1683 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.inheritList = yyvsp[-4].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-2].objAccessType, yyvsp[-1].inheritType));
                  }
#line 13589 "parser.tab.c"
break;
case 476:
#line 1686 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13594 "parser.tab.c"
  if (!yytrial)
#line 1686 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].objAccessType, yyvsp[-2].inheritType));
                  }
#line 13600 "parser.tab.c"
break;
case 477:
#line 1689 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13605 "parser.tab.c"
  if (!yytrial)
#line 1689 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.inheritList = yyvsp[-4].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].objAccessType, yyvsp[-2].inheritType));
                  }
#line 13611 "parser.tab.c"
break;
case 478:
#line 1694 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13616 "parser.tab.c"
  if (!yytrial)
#line 1694 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kUnknown;    }
#line 13620 "parser.tab.c"
break;
case 479:
#line 1695 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13625 "parser.tab.c"
  if (!yytrial)
#line 1695 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kPublic;     }
#line 13629 "parser.tab.c"
break;
case 480:
#line 1696 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13634 "parser.tab.c"
  if (!yytrial)
#line 1696 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kProtected;  }
#line 13638 "parser.tab.c"
break;
case 481:
#line 1697 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13643 "parser.tab.c"
  if (!yytrial)
#line 1697 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kPrivate;    }
#line 13647 "parser.tab.c"
break;
case 482:
#line 1700 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13652 "parser.tab.c"
  if (!yytrial)
#line 1700 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.inheritType = false; }
#line 13656 "parser.tab.c"
break;
case 483:
#line 1701 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13661 "parser.tab.c"
  if (!yytrial)
#line 1701 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.inheritType = true; }
#line 13665 "parser.tab.c"
break;
case 484:
#line 1704 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13670 "parser.tab.c"
  if (!yytrial)
#line 1704 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurAccessType, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 13674 "parser.tab.c"
break;
case 485:
#line 1705 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13679 "parser.tab.c"
  if (!yytrial)
#line 1705 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurAccessType, yyvsp[-1].str, yyvsp[-2].str, yyvsp[-3].compoundType); }
#line 13683 "parser.tab.c"
break;
case 486:
#line 1706 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13688 "parser.tab.c"
  if (!yytrial)
#line 1706 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.fwdDeclObj = yyvsp[0].fwdDeclObj;
                    yyval.fwdDeclObj->templateParamList(yyvsp[-1].templateParamList);
                  }
#line 13695 "parser.tab.c"
break;
case 487:
#line 1710 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13700 "parser.tab.c"
  if (!yytrial)
#line 1710 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurAccessType, yyvsp[-1].str); yyval.fwdDeclObj->addAttr(kFriend); }
#line 13704 "parser.tab.c"
break;
case 488:
#line 1711 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 13709 "parser.tab.c"
  if (!yytrial)
#line 1711 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->addAttr(kFriend); }
#line 13713 "parser.tab.c"
break;
case 489:
#line 1714 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13718 "parser.tab.c"
  if (!yytrial)
#line 1714 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.compoundType = CppCompoundType::kClass;     }
#line 13722 "parser.tab.c"
break;
case 490:
#line 1715 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13727 "parser.tab.c"
  if (!yytrial)
#line 1715 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.compoundType = CppCompoundType::kStruct;    }
#line 13731 "parser.tab.c"
break;
case 491:
#line 1716 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13736 "parser.tab.c"
  if (!yytrial)
#line 1716 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.compoundType = CppCompoundType::kUnion;     }
#line 13740 "parser.tab.c"
break;
case 492:
#line 1719 "/home/dassat/github/cppparser/src/parser.y"
{gInTemplateSpec = true;  ZZLOG;   }
#line 13745 "parser.tab.c"
break;
case 493:
#line 1720 "/home/dassat/github/cppparser/src/parser.y"
{gInTemplateSpec = false; ZZVALID; }
#line 13750 "parser.tab.c"
  if (!yytrial)
#line 1721 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParamList = yyvsp[-1].templateParamList;
                  }
#line 13756 "parser.tab.c"
break;
case 494:
#line 1726 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13761 "parser.tab.c"
  if (!yytrial)
#line 1726 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParamList = new CppTemplateParamList;
                  }
#line 13767 "parser.tab.c"
break;
case 495:
#line 1729 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13772 "parser.tab.c"
  if (!yytrial)
#line 1729 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParamList = new CppTemplateParamList;
                    yyval.templateParamList->emplace_back(yyvsp[0].templateParam);
                  }
#line 13779 "parser.tab.c"
break;
case 496:
#line 1733 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13784 "parser.tab.c"
  if (!yytrial)
#line 1733 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParamList = yyvsp[-2].templateParamList;
                    yyval.templateParamList->emplace_back(yyvsp[0].templateParam);
                  }
#line 13791 "parser.tab.c"
break;
case 497:
#line 1739 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13796 "parser.tab.c"
  if (!yytrial)
#line 1739 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[0].str);
                  }
#line 13802 "parser.tab.c"
break;
case 498:
#line 1742 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13807 "parser.tab.c"
  if (!yytrial)
#line 1742 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-2].str);
                    yyval.templateParam->defaultArg(yyvsp[0].cppVarType);
                  }
#line 13814 "parser.tab.c"
break;
case 499:
#line 1746 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13819 "parser.tab.c"
  if (!yytrial)
#line 1746 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[0].str);
                  }
#line 13825 "parser.tab.c"
break;
case 500:
#line 1749 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13830 "parser.tab.c"
  if (!yytrial)
#line 1749 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-2].str);
                    yyval.templateParam->defaultArg(yyvsp[0].cppVarType);
                  }
#line 13837 "parser.tab.c"
break;
case 501:
#line 1753 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13842 "parser.tab.c"
  if (!yytrial)
#line 1753 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-1].cppVarType, yyvsp[0].str);
                  }
#line 13848 "parser.tab.c"
break;
case 502:
#line 1756 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13853 "parser.tab.c"
  if (!yytrial)
#line 1756 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-3].cppVarType, yyvsp[-2].str);
                    yyval.templateParam->defaultArg(yyvsp[0].cppExprObj);
                  }
#line 13860 "parser.tab.c"
break;
case 503:
#line 1760 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13865 "parser.tab.c"
  if (!yytrial)
#line 1760 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[0].cppFuncPointerObj, std::string());
                  }
#line 13871 "parser.tab.c"
break;
case 504:
#line 1763 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13876 "parser.tab.c"
  if (!yytrial)
#line 1763 "/home/dassat/github/cppparser/src/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-2].cppFuncPointerObj, std::string());
                    yyval.templateParam->defaultArg(yyvsp[0].cppExprObj);
                  }
#line 13883 "parser.tab.c"
break;
case 505:
#line 1767 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13888 "parser.tab.c"
  if (!yytrial)
#line 1767 "/home/dassat/github/cppparser/src/parser.y"
{ /* Can happen when forward declaring*/
                    yyval.templateParam = new CppTemplateParam(yyvsp[0].cppVarType, std::string());
                  }
#line 13894 "parser.tab.c"
break;
case 506:
#line 1770 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13899 "parser.tab.c"
  if (!yytrial)
#line 1770 "/home/dassat/github/cppparser/src/parser.y"
{ /* Can happen when forward declaring*/
                    yyval.templateParam = new CppTemplateParam(yyvsp[-2].cppVarType, std::string());
                    yyval.templateParam->defaultArg(yyvsp[0].cppExprObj);
                  }
#line 13906 "parser.tab.c"
break;
case 507:
#line 1775 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gInTemplateSpec)
                      gTemplateParamStart = yyvsp[-2].str.sz;
                    ZZERROR;
                  }
#line 13915 "parser.tab.c"
  if (!yytrial)
#line 1779 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.templateParam = nullptr; }
#line 13919 "parser.tab.c"
break;
case 508:
#line 1780 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gInTemplateSpec)
                      gTemplateParamStart = yyvsp[-2].str.sz;
                    ZZERROR;
                  }
#line 13928 "parser.tab.c"
  if (!yytrial)
#line 1784 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.templateParam = nullptr; }
#line 13932 "parser.tab.c"
break;
case 509:
#line 1785 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gInTemplateSpec)
                      gTemplateParamStart = yyvsp[-2].str.sz;
                    ZZERROR;
                  }
#line 13941 "parser.tab.c"
  if (!yytrial)
#line 1789 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.templateParam = nullptr; }
#line 13945 "parser.tab.c"
break;
case 510:
#line 1790 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gInTemplateSpec)
                      gTemplateParamStart = yyvsp[-2].str.sz;
                    ZZERROR;
                  }
#line 13954 "parser.tab.c"
  if (!yytrial)
#line 1794 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.templateParam = nullptr; }
#line 13958 "parser.tab.c"
break;
case 511:
#line 1795 "/home/dassat/github/cppparser/src/parser.y"
{
                    if (gInTemplateSpec)
                      gTemplateParamStart = yyvsp[-2].str.sz;
                    ZZERROR;
                  }
#line 13967 "parser.tab.c"
  if (!yytrial)
#line 1799 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.templateParam = nullptr; }
#line 13971 "parser.tab.c"
break;
case 512:
#line 1803 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13976 "parser.tab.c"
  if (!yytrial)
#line 1803 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = makeCppToken(nullptr, nullptr); }
#line 13980 "parser.tab.c"
break;
case 513:
#line 1804 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13985 "parser.tab.c"
  if (!yytrial)
#line 1804 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 13989 "parser.tab.c"
break;
case 514:
#line 1807 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 13994 "parser.tab.c"
  if (!yytrial)
#line 1807 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 13998 "parser.tab.c"
break;
case 515:
#line 1808 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14003 "parser.tab.c"
  if (!yytrial)
#line 1808 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 14007 "parser.tab.c"
break;
case 516:
#line 1809 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14012 "parser.tab.c"
  if (!yytrial)
#line 1809 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 14016 "parser.tab.c"
break;
case 517:
#line 1810 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14021 "parser.tab.c"
  if (!yytrial)
#line 1810 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 14025 "parser.tab.c"
break;
case 518:
#line 1813 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14030 "parser.tab.c"
  if (!yytrial)
#line 1813 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 14034 "parser.tab.c"
break;
case 519:
#line 1814 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14039 "parser.tab.c"
  if (!yytrial)
#line 1814 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 14043 "parser.tab.c"
break;
case 520:
#line 1815 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14048 "parser.tab.c"
  if (!yytrial)
#line 1815 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 14052 "parser.tab.c"
break;
case 521:
#line 1818 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 14057 "parser.tab.c"
  if (!yytrial)
#line 1818 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kPublic;     }
#line 14061 "parser.tab.c"
break;
case 522:
#line 1819 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 14066 "parser.tab.c"
  if (!yytrial)
#line 1819 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kProtected;  }
#line 14070 "parser.tab.c"
break;
case 523:
#line 1820 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 14075 "parser.tab.c"
  if (!yytrial)
#line 1820 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.objAccessType = CppAccessType::kPrivate;    }
#line 14079 "parser.tab.c"
break;
case 524:
#line 1823 "/home/dassat/github/cppparser/src/parser.y"
{ZZVALID;}
#line 14084 "parser.tab.c"
  if (!yytrial)
#line 1823 "/home/dassat/github/cppparser/src/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType(CppCompoundType::kExternCBlock); }
#line 14088 "parser.tab.c"
break;
case 525:
#line 1826 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14093 "parser.tab.c"
  if (!yytrial)
#line 1826 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 14097 "parser.tab.c"
break;
case 526:
#line 1827 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14102 "parser.tab.c"
  if (!yytrial)
#line 1827 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 14106 "parser.tab.c"
break;
case 527:
#line 1830 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14111 "parser.tab.c"
  if (!yytrial)
#line 1830 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 14115 "parser.tab.c"
break;
case 528:
#line 1831 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14120 "parser.tab.c"
  if (!yytrial)
#line 1831 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 14124 "parser.tab.c"
break;
case 529:
#line 1832 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14129 "parser.tab.c"
  if (!yytrial)
#line 1832 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 14133 "parser.tab.c"
break;
case 530:
#line 1833 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14138 "parser.tab.c"
  if (!yytrial)
#line 1833 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 14142 "parser.tab.c"
break;
case 531:
#line 1835 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[0].str.sz == gParamModPos) {
                        gParamModPos = nullptr;
                        ZZERROR;
                      } else {
                        ZZLOG;
                      }
                    }{ZZLOG;}
#line 14154 "parser.tab.c"
  if (!yytrial)
#line 1842 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 14158 "parser.tab.c"
break;
case 532:
#line 1843 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14163 "parser.tab.c"
  if (!yytrial)
#line 1843 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kInitializer);        }
#line 14167 "parser.tab.c"
break;
case 533:
#line 1844 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14172 "parser.tab.c"
  if (!yytrial)
#line 1844 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, CppExpr::kInitializer);        }
#line 14176 "parser.tab.c"
break;
case 534:
#line 1845 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14181 "parser.tab.c"
  if (!yytrial)
#line 1845 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kInitializer);        }
#line 14185 "parser.tab.c"
break;
case 535:
#line 1846 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14190 "parser.tab.c"
  if (!yytrial)
#line 1846 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, CppExpr::kInitializer);        }
#line 14194 "parser.tab.c"
break;
case 536:
#line 1847 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14199 "parser.tab.c"
  if (!yytrial)
#line 1847 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((CppExpr*)nullptr, CppExpr::kInitializer);   }
#line 14203 "parser.tab.c"
break;
case 537:
#line 1848 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14208 "parser.tab.c"
  if (!yytrial)
#line 1848 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 14212 "parser.tab.c"
break;
case 538:
#line 1849 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14217 "parser.tab.c"
  if (!yytrial)
#line 1849 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 14221 "parser.tab.c"
break;
case 539:
#line 1850 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14226 "parser.tab.c"
  if (!yytrial)
#line 1850 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 14230 "parser.tab.c"
break;
case 540:
#line 1851 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14235 "parser.tab.c"
  if (!yytrial)
#line 1851 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 14239 "parser.tab.c"
break;
case 541:
#line 1852 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14244 "parser.tab.c"
  if (!yytrial)
#line 1852 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 14248 "parser.tab.c"
break;
case 542:
#line 1853 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14253 "parser.tab.c"
  if (!yytrial)
#line 1853 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(yyvsp[0].str), kRefer);          }
#line 14257 "parser.tab.c"
break;
case 543:
#line 1854 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14262 "parser.tab.c"
  if (!yytrial)
#line 1854 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 14266 "parser.tab.c"
break;
case 544:
#line 1855 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14271 "parser.tab.c"
  if (!yytrial)
#line 1855 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 14275 "parser.tab.c"
break;
case 545:
#line 1856 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14280 "parser.tab.c"
  if (!yytrial)
#line 1856 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 14284 "parser.tab.c"
break;
case 546:
#line 1857 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14289 "parser.tab.c"
  if (!yytrial)
#line 1857 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 14293 "parser.tab.c"
break;
case 547:
#line 1858 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14298 "parser.tab.c"
  if (!yytrial)
#line 1858 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 14302 "parser.tab.c"
break;
case 548:
#line 1859 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14307 "parser.tab.c"
  if (!yytrial)
#line 1859 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 14311 "parser.tab.c"
break;
case 549:
#line 1861 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[-1].str.sz == gParamModPos) {
                        gParamModPos = nullptr;
                        ZZERROR;
                      } else {
                        ZZLOG;
                      }
                    }{ZZLOG;}
#line 14323 "parser.tab.c"
  if (!yytrial)
#line 1868 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 14327 "parser.tab.c"
break;
case 550:
#line 1869 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14332 "parser.tab.c"
  if (!yytrial)
#line 1869 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 14336 "parser.tab.c"
break;
case 551:
#line 1870 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14341 "parser.tab.c"
  if (!yytrial)
#line 1870 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                 }
#line 14345 "parser.tab.c"
break;
case 552:
#line 1872 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[-1].str.sz == gParamModPos) {
                        gParamModPos = nullptr;
                        ZZERROR;
                      } else {
                        ZZLOG;
                      }
                    }{ZZLOG;}
#line 14357 "parser.tab.c"
  if (!yytrial)
#line 1879 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 14361 "parser.tab.c"
break;
case 553:
#line 1880 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14366 "parser.tab.c"
  if (!yytrial)
#line 1880 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 14370 "parser.tab.c"
break;
case 554:
#line 1881 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14375 "parser.tab.c"
  if (!yytrial)
#line 1881 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                     }
#line 14379 "parser.tab.c"
break;
case 555:
#line 1882 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14384 "parser.tab.c"
  if (!yytrial)
#line 1882 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 14388 "parser.tab.c"
break;
case 556:
#line 1883 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14393 "parser.tab.c"
  if (!yytrial)
#line 1883 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 14397 "parser.tab.c"
break;
case 557:
#line 1884 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14402 "parser.tab.c"
  if (!yytrial)
#line 1884 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 14406 "parser.tab.c"
break;
case 558:
#line 1885 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14411 "parser.tab.c"
  if (!yytrial)
#line 1885 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppExprObj);                       }
#line 14415 "parser.tab.c"
break;
case 559:
#line 1886 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14420 "parser.tab.c"
  if (!yytrial)
#line 1886 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);               }
#line 14424 "parser.tab.c"
break;
case 560:
#line 1887 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14429 "parser.tab.c"
  if (!yytrial)
#line 1887 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);              }
#line 14433 "parser.tab.c"
break;
case 561:
#line 1888 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14438 "parser.tab.c"
  if (!yytrial)
#line 1888 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);                }
#line 14442 "parser.tab.c"
break;
case 562:
#line 1889 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14447 "parser.tab.c"
  if (!yytrial)
#line 1889 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);                }
#line 14451 "parser.tab.c"
break;
case 563:
#line 1890 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14456 "parser.tab.c"
  if (!yytrial)
#line 1890 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);                }
#line 14460 "parser.tab.c"
break;
case 564:
#line 1891 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14465 "parser.tab.c"
  if (!yytrial)
#line 1891 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);                }
#line 14469 "parser.tab.c"
break;
case 565:
#line 1892 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14474 "parser.tab.c"
  if (!yytrial)
#line 1892 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);                }
#line 14478 "parser.tab.c"
break;
case 566:
#line 1893 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14483 "parser.tab.c"
  if (!yytrial)
#line 1893 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);                 }
#line 14487 "parser.tab.c"
break;
case 567:
#line 1894 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14492 "parser.tab.c"
  if (!yytrial)
#line 1894 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 14496 "parser.tab.c"
break;
case 568:
#line 1895 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14501 "parser.tab.c"
  if (!yytrial)
#line 1895 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 14505 "parser.tab.c"
break;
case 569:
#line 1896 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14510 "parser.tab.c"
  if (!yytrial)
#line 1896 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 14514 "parser.tab.c"
break;
case 570:
#line 1897 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14519 "parser.tab.c"
  if (!yytrial)
#line 1897 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 14523 "parser.tab.c"
break;
case 571:
#line 1898 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14528 "parser.tab.c"
  if (!yytrial)
#line 1898 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 14532 "parser.tab.c"
break;
case 572:
#line 1899 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14537 "parser.tab.c"
  if (!yytrial)
#line 1899 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 14541 "parser.tab.c"
break;
case 573:
#line 1900 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14546 "parser.tab.c"
  if (!yytrial)
#line 1900 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);               }
#line 14550 "parser.tab.c"
break;
case 574:
#line 1901 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14555 "parser.tab.c"
  if (!yytrial)
#line 1901 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);            }
#line 14559 "parser.tab.c"
break;
case 575:
#line 1902 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14564 "parser.tab.c"
  if (!yytrial)
#line 1902 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                 }
#line 14568 "parser.tab.c"
break;
case 576:
#line 1904 "/home/dassat/github/cppparser/src/parser.y"
{
                      if (yyvsp[-1].str.sz == gParamModPos) {
                        gParamModPos = nullptr;
                        ZZERROR;
                      } else {
                        ZZLOG;
                      }
                    }{ZZLOG;}
#line 14580 "parser.tab.c"
  if (!yytrial)
#line 1911 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAnd, yyvsp[0].cppExprObj);                     }
#line 14584 "parser.tab.c"
break;
case 577:
#line 1912 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14589 "parser.tab.c"
  if (!yytrial)
#line 1912 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOr, yyvsp[0].cppExprObj);                      }
#line 14593 "parser.tab.c"
break;
case 578:
#line 1913 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14598 "parser.tab.c"
  if (!yytrial)
#line 1913 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, CppExprAtom(yyvsp[0].str));                     }
#line 14602 "parser.tab.c"
break;
case 579:
#line 1915 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14607 "parser.tab.c"
  if (!yytrial)
#line 1915 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kDot, CppExprAtom(mergeCppToken(yyvsp[-1].str, yyvsp[0].str)));                     }
#line 14611 "parser.tab.c"
break;
case 580:
#line 1916 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14616 "parser.tab.c"
  if (!yytrial)
#line 1916 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, CppExprAtom(yyvsp[0].str));      }
#line 14620 "parser.tab.c"
break;
case 581:
#line 1917 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14625 "parser.tab.c"
  if (!yytrial)
#line 1917 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, CppExprAtom(yyvsp[0].str));  }
#line 14629 "parser.tab.c"
break;
case 582:
#line 1918 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14634 "parser.tab.c"
  if (!yytrial)
#line 1918 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kDot, CppExprAtom(mergeCppToken(yyvsp[-1].str, yyvsp[0].str)));                     }
#line 14638 "parser.tab.c"
break;
case 583:
#line 1919 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14643 "parser.tab.c"
  if (!yytrial)
#line 1919 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, CppExprAtom(mergeCppToken(yyvsp[-1].str, yyvsp[0].str)));      }
#line 14647 "parser.tab.c"
break;
case 584:
#line 1920 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14652 "parser.tab.c"
  if (!yytrial)
#line 1920 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 14656 "parser.tab.c"
break;
case 585:
#line 1921 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14661 "parser.tab.c"
  if (!yytrial)
#line 1921 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrayElem);                   }
#line 14665 "parser.tab.c"
break;
case 586:
#line 1922 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14670 "parser.tab.c"
  if (!yytrial)
#line 1922 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].cppExprObj);            }
#line 14674 "parser.tab.c"
break;
case 587:
#line 1923 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14679 "parser.tab.c"
  if (!yytrial)
#line 1923 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(yyvsp[-3].str), kFunctionCall, yyvsp[-1].cppExprObj);            }
#line 14683 "parser.tab.c"
break;
case 588:
#line 1924 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14688 "parser.tab.c"
  if (!yytrial)
#line 1924 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(new CppExpr(yyvsp[-5].cppExprObj, kArrow, CppExprAtom(mergeCppToken(yyvsp[-3].str, yyvsp[-2].str))), kFunctionCall, (CppExpr*)nullptr); }
#line 14692 "parser.tab.c"
break;
case 589:
#line 1926 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14697 "parser.tab.c"
  if (!yytrial)
#line 1926 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(new CppExpr((std::string) yyvsp[-3].str, kNone), kFunctionCall, yyvsp[-1].cppExprObj);            }
#line 14701 "parser.tab.c"
break;
case 590:
#line 1927 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14706 "parser.tab.c"
  if (!yytrial)
#line 1927 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarType, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 14710 "parser.tab.c"
break;
case 591:
#line 1928 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14715 "parser.tab.c"
  if (!yytrial)
#line 1928 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kConstCast, yyvsp[-1].cppExprObj);               }
#line 14719 "parser.tab.c"
break;
case 592:
#line 1929 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14724 "parser.tab.c"
  if (!yytrial)
#line 1929 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kStaticCast, yyvsp[-1].cppExprObj);              }
#line 14728 "parser.tab.c"
break;
case 593:
#line 1930 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14733 "parser.tab.c"
  if (!yytrial)
#line 1930 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kDynamicCast, yyvsp[-1].cppExprObj);             }
#line 14737 "parser.tab.c"
break;
case 594:
#line 1931 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14742 "parser.tab.c"
  if (!yytrial)
#line 1931 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kReinterpretCast, yyvsp[-1].cppExprObj);         }
#line 14746 "parser.tab.c"
break;
case 595:
#line 1932 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14751 "parser.tab.c"
  if (!yytrial)
#line 1932 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 14755 "parser.tab.c"
break;
case 596:
#line 1933 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14760 "parser.tab.c"
  if (!yytrial)
#line 1933 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[-1].str, CppExpr::kNew);  }
#line 14764 "parser.tab.c"
break;
case 597:
#line 1934 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14769 "parser.tab.c"
  if (!yytrial)
#line 1934 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, CppExpr::kNew);  }
#line 14773 "parser.tab.c"
break;
case 598:
#line 1935 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14778 "parser.tab.c"
  if (!yytrial)
#line 1935 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlacementNew, yyvsp[0].cppExprObj);            }
#line 14782 "parser.tab.c"
break;
case 599:
#line 1936 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14787 "parser.tab.c"
  if (!yytrial)
#line 1936 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlacementNew, yyvsp[0].cppExprObj);            }
#line 14791 "parser.tab.c"
break;
case 600:
#line 1937 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14796 "parser.tab.c"
  if (!yytrial)
#line 1937 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 14800 "parser.tab.c"
break;
case 601:
#line 1938 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14805 "parser.tab.c"
  if (!yytrial)
#line 1938 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 14809 "parser.tab.c"
break;
case 602:
#line 1939 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14814 "parser.tab.c"
  if (!yytrial)
#line 1939 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 14818 "parser.tab.c"
break;
case 603:
#line 1940 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14823 "parser.tab.c"
  if (!yytrial)
#line 1940 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 14827 "parser.tab.c"
break;
case 604:
#line 1941 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14832 "parser.tab.c"
  if (!yytrial)
#line 1941 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 14836 "parser.tab.c"
break;
case 605:
#line 1942 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14841 "parser.tab.c"
  if (!yytrial)
#line 1942 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 14845 "parser.tab.c"
break;
case 606:
#line 1943 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14850 "parser.tab.c"
  if (!yytrial)
#line 1943 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppVarType, CppExpr::kSizeOf);             }
#line 14854 "parser.tab.c"
break;
case 607:
#line 1944 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14859 "parser.tab.c"
  if (!yytrial)
#line 1944 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kSizeOf);             }
#line 14863 "parser.tab.c"
break;
case 608:
#line 1945 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14868 "parser.tab.c"
  if (!yytrial)
#line 1945 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppVarType, CppExpr::kSizeOf | CppExpr::kVariadicPack);             }
#line 14872 "parser.tab.c"
break;
case 609:
#line 1946 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14877 "parser.tab.c"
  if (!yytrial)
#line 1946 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kSizeOf | CppExpr::kVariadicPack);             }
#line 14881 "parser.tab.c"
break;
case 610:
#line 1947 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14886 "parser.tab.c"
  if (!yytrial)
#line 1947 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyval.cppExprObj->flags_ |= CppExpr::kVariadicPack;      }
#line 14890 "parser.tab.c"
break;
case 611:
#line 1948 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14895 "parser.tab.c"
  if (!yytrial)
#line 1948 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppLambda);                               }
#line 14899 "parser.tab.c"
break;
case 612:
#line 1949 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14904 "parser.tab.c"
  if (!yytrial)
#line 1949 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, CppExpr::kGoto);               }
#line 14908 "parser.tab.c"
break;
case 613:
#line 1952 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14913 "parser.tab.c"
  if (!yytrial)
#line 1952 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[-1].str, kNone);          }
#line 14917 "parser.tab.c"
break;
case 614:
#line 1955 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14922 "parser.tab.c"
  if (!yytrial)
#line 1955 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-2].cppExprObj;          }
#line 14926 "parser.tab.c"
break;
case 615:
#line 1956 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14931 "parser.tab.c"
  if (!yytrial)
#line 1956 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-2].cppExprObj;          }
#line 14935 "parser.tab.c"
break;
case 616:
  if (!yytrial)
#line 1959 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 14941 "parser.tab.c"
break;
case 617:
  if (!yytrial)
#line 1962 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 14947 "parser.tab.c"
break;
case 618:
  if (!yytrial)
#line 1963 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 14953 "parser.tab.c"
break;
case 619:
#line 1966 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14958 "parser.tab.c"
  if (!yytrial)
#line 1966 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kComma, yyvsp[0].cppExprObj);                   }
#line 14962 "parser.tab.c"
break;
case 620:
#line 1967 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14967 "parser.tab.c"
  if (!yytrial)
#line 1967 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kComma, yyvsp[0].cppExprObj);                   }
#line 14971 "parser.tab.c"
break;
case 621:
#line 1968 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14976 "parser.tab.c"
  if (!yytrial)
#line 1968 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 14980 "parser.tab.c"
break;
case 622:
#line 1971 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14985 "parser.tab.c"
  if (!yytrial)
#line 1971 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 14989 "parser.tab.c"
break;
case 623:
#line 1972 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 14994 "parser.tab.c"
  if (!yytrial)
#line 1972 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 14998 "parser.tab.c"
break;
case 624:
#line 1973 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15003 "parser.tab.c"
  if (!yytrial)
#line 1973 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; }
#line 15007 "parser.tab.c"
break;
case 625:
#line 1976 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15012 "parser.tab.c"
  if (!yytrial)
#line 1976 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = nullptr; }
#line 15016 "parser.tab.c"
break;
case 626:
#line 1977 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15021 "parser.tab.c"
  if (!yytrial)
#line 1977 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj;      }
#line 15025 "parser.tab.c"
break;
case 627:
#line 1980 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15030 "parser.tab.c"
  if (!yytrial)
#line 1980 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr("", kRefer); }
#line 15034 "parser.tab.c"
break;
case 628:
#line 1983 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15039 "parser.tab.c"
  if (!yytrial)
#line 1983 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = new CppExpr("", kEqual, ""); }
#line 15043 "parser.tab.c"
break;
case 629:
#line 1986 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15048 "parser.tab.c"
break;
case 630:
#line 1987 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15053 "parser.tab.c"
break;
case 631:
#line 1988 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15058 "parser.tab.c"
break;
case 632:
#line 1991 "/home/dassat/github/cppparser/src/parser.y"
{ZZLOG;}
#line 15063 "parser.tab.c"
  if (!yytrial)
#line 1991 "/home/dassat/github/cppparser/src/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 15067 "parser.tab.c"
break;
#line 15069 "parser.tab.c"
#line 802 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial!=0);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

#ifdef YYPOSN
  /* Perform user-defined position reduction */
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif
#endif /* YYPOSN */

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state "
	     "%d\n", (int)yydepth, yytrial!=0, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;  /* return value of root non-terminal to yylval */
#ifdef YYPOSN
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;  /* return value of root position to yyposn */
#endif /* YYPOSN */
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       (int)yydepth, yytrial!=0, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state "
	   "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
#ifdef YYPOSN
  *++(yyps->psp) = yyps->pos;
#endif /* YYPOSN */
  goto yyloop;


  /*
  ** Reduction declares that this path is valid.
  ** Set yypath and do a full parse
  */
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    struct yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state "
	   "%d, %d tokens\n", (int)yydepth, yytrial!=0, yypath->state,
	   (int)(yylvp - yylvals - yypath->lexeme));
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  yylexp = yylexemes + yypath->lexeme;
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  yylvp = yylvals + yypath->lexeme;
#ifdef YYPOSN
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylpp = yylpsns + yypath->lexeme;
#endif /* YYPOSN */
  yystate = yypath->state;
  goto yyloop;

yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  {
    YYSTYPE *pv;
#ifdef YYPOSN
    YYPOSN *pp = yyps->ps;
#endif
#ifdef YYDESTRUCT
    Yshort *ps = yyps->ss;
#endif
    for(pv=yyps->vs; pv<yyps->vsp; pv++) {
      YYDELETEVAL(*pv,2);
#if defined(YYDESTRUCT)
      YYDESTRUCT(yytrial!=0, yyastable[*ps++], pv, pp++);
#endif /* YYDESTRUCT */
    }
#ifdef YYPOSN
    for(pp=yyps->ps; pp<yyps->psp; pp++) {
      YYDELETEPOSN(*pp,2);
    }
#endif /* YYPOSN */
  }

  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}
